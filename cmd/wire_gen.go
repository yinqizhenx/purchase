// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"purchase/adapter/handler/rpc"
	"purchase/adapter/scheduler"
	"purchase/app"
	"purchase/app/assembler"
	"purchase/app/event_handler"
	"purchase/cmd/server"
	"purchase/domain/factory"
	"purchase/domain/service"
	"purchase/infra/acl"
	"purchase/infra/async_task"
	"purchase/infra/config"
	"purchase/infra/dlock"
	"purchase/infra/idempotent"
	"purchase/infra/logx"
	"purchase/infra/mq"
	"purchase/infra/mq/kafka_sa"
	"purchase/infra/persistence/convertor"
	"purchase/infra/persistence/dal"
	"purchase/infra/persistence/data"
	"purchase/infra/persistence/repo_impl"
	"purchase/infra/persistence/tx"
	"purchase/infra/request"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp() (*App, func(), error) {
	logger := logx.NewKratosLogger()
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, nil, err
	}
	client, err := data.NewDB(configConfig)
	if err != nil {
		return nil, nil, err
	}
	httpClient, cleanup := request.NewHttpClient(logger)
	mdmService := acl.NewMDMService(httpClient)
	convertorConvertor := convertor.NewConvertor(mdmService)
	paDal := dal.NewPADal(client, convertorConvertor)
	unboundedChan, cleanup2 := async_task.NewMessageChan()
	asyncTaskDal := dal.NewAsyncTaskDal(client, convertorConvertor)
	paymentCenterRepo := repo_impl.NewPARepository(paDal, unboundedChan, asyncTaskDal)
	eventRepo := repo_impl.NewEventRepository(unboundedChan, asyncTaskDal)
	eventService := service.NewEventService(eventRepo)
	pcFactory := factory.NewPCFactory(mdmService)
	eventFactory := factory.NewEventFactory()
	paDomainService := service.NewPADomainService(paymentCenterRepo, mdmService, eventService, pcFactory, eventFactory)
	assemblerAssembler := assembler.NewAssembler()
	transactionManager := tx.NewTransactionManager(client)
	paymentCenterAppService := app.NewPaymentCenterAppService(paDomainService, paymentCenterRepo, assemblerAssembler, transactionManager, pcFactory)
	paymentCenterHandler := rpc.NewPaymentCenterHandler(paymentCenterAppService)
	rpcServer := rpc.NewPurchaseServer(paymentCenterHandler)
	grpcServer := server.NewGRPCServer(configConfig, rpcServer)
	httpServer := server.NewHttpServer(configConfig)
	idGenFunc := mq.NewIDGenFunc()
	publisher, err := kafka_sa.NewKafkaPublisher(configConfig, idGenFunc)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	redisClient, err := data.NewRedis(configConfig)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	lockBuilder := dlock.NewRedisLock(redisClient)
	asyncTaskMux := scheduler.NewAsyncTaskServer(publisher, asyncTaskDal, transactionManager, unboundedChan, lockBuilder)
	idempotentIdempotent := idempotent.NewIdempotentImpl(redisClient)
	handlerAggregator := event_handler.NewDomainEventHandler()
	subscriber, err := kafka_sa.NewKafkaSubscriber(configConfig, idempotentIdempotent, handlerAggregator, publisher)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	eventConsumer := server.NewEventConsumerServer(subscriber)
	mainApp := newApp(logger, grpcServer, httpServer, asyncTaskMux, eventConsumer)
	return mainApp, func() {
		cleanup2()
		cleanup()
	}, nil
}
