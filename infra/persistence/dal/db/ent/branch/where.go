// Code generated by ent, DO NOT EDIT.

package branch

import (
	"purchase/infra/persistence/dal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Branch {
	return predicate.Branch(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Branch {
	return predicate.Branch(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Branch {
	return predicate.Branch(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Branch {
	return predicate.Branch(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Branch {
	return predicate.Branch(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Branch {
	return predicate.Branch(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Branch {
	return predicate.Branch(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Branch {
	return predicate.Branch(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Branch {
	return predicate.Branch(sql.FieldLTE(FieldID, id))
}

// BranchID applies equality check predicate on the "branch_id" field. It's identical to BranchIDEQ.
func BranchID(v string) predicate.Branch {
	return predicate.Branch(sql.FieldEQ(FieldBranchID, v))
}

// TransID applies equality check predicate on the "trans_id" field. It's identical to TransIDEQ.
func TransID(v string) predicate.Branch {
	return predicate.Branch(sql.FieldEQ(FieldTransID, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Branch {
	return predicate.Branch(sql.FieldEQ(FieldType, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v string) predicate.Branch {
	return predicate.Branch(sql.FieldEQ(FieldState, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Branch {
	return predicate.Branch(sql.FieldEQ(FieldName, v))
}

// Executor applies equality check predicate on the "executor" field. It's identical to ExecutorEQ.
func Executor(v string) predicate.Branch {
	return predicate.Branch(sql.FieldEQ(FieldExecutor, v))
}

// Payload applies equality check predicate on the "payload" field. It's identical to PayloadEQ.
func Payload(v string) predicate.Branch {
	return predicate.Branch(sql.FieldEQ(FieldPayload, v))
}

// ActionDepend applies equality check predicate on the "action_depend" field. It's identical to ActionDependEQ.
func ActionDepend(v string) predicate.Branch {
	return predicate.Branch(sql.FieldEQ(FieldActionDepend, v))
}

// CompensateDepend applies equality check predicate on the "compensate_depend" field. It's identical to CompensateDependEQ.
func CompensateDepend(v string) predicate.Branch {
	return predicate.Branch(sql.FieldEQ(FieldCompensateDepend, v))
}

// FinishedAt applies equality check predicate on the "finished_at" field. It's identical to FinishedAtEQ.
func FinishedAt(v time.Time) predicate.Branch {
	return predicate.Branch(sql.FieldEQ(FieldFinishedAt, v))
}

// IsDead applies equality check predicate on the "is_dead" field. It's identical to IsDeadEQ.
func IsDead(v bool) predicate.Branch {
	return predicate.Branch(sql.FieldEQ(FieldIsDead, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Branch {
	return predicate.Branch(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Branch {
	return predicate.Branch(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.Branch {
	return predicate.Branch(sql.FieldEQ(FieldUpdatedBy, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.Branch {
	return predicate.Branch(sql.FieldEQ(FieldCreatedBy, v))
}

// BranchIDEQ applies the EQ predicate on the "branch_id" field.
func BranchIDEQ(v string) predicate.Branch {
	return predicate.Branch(sql.FieldEQ(FieldBranchID, v))
}

// BranchIDNEQ applies the NEQ predicate on the "branch_id" field.
func BranchIDNEQ(v string) predicate.Branch {
	return predicate.Branch(sql.FieldNEQ(FieldBranchID, v))
}

// BranchIDIn applies the In predicate on the "branch_id" field.
func BranchIDIn(vs ...string) predicate.Branch {
	return predicate.Branch(sql.FieldIn(FieldBranchID, vs...))
}

// BranchIDNotIn applies the NotIn predicate on the "branch_id" field.
func BranchIDNotIn(vs ...string) predicate.Branch {
	return predicate.Branch(sql.FieldNotIn(FieldBranchID, vs...))
}

// BranchIDGT applies the GT predicate on the "branch_id" field.
func BranchIDGT(v string) predicate.Branch {
	return predicate.Branch(sql.FieldGT(FieldBranchID, v))
}

// BranchIDGTE applies the GTE predicate on the "branch_id" field.
func BranchIDGTE(v string) predicate.Branch {
	return predicate.Branch(sql.FieldGTE(FieldBranchID, v))
}

// BranchIDLT applies the LT predicate on the "branch_id" field.
func BranchIDLT(v string) predicate.Branch {
	return predicate.Branch(sql.FieldLT(FieldBranchID, v))
}

// BranchIDLTE applies the LTE predicate on the "branch_id" field.
func BranchIDLTE(v string) predicate.Branch {
	return predicate.Branch(sql.FieldLTE(FieldBranchID, v))
}

// BranchIDContains applies the Contains predicate on the "branch_id" field.
func BranchIDContains(v string) predicate.Branch {
	return predicate.Branch(sql.FieldContains(FieldBranchID, v))
}

// BranchIDHasPrefix applies the HasPrefix predicate on the "branch_id" field.
func BranchIDHasPrefix(v string) predicate.Branch {
	return predicate.Branch(sql.FieldHasPrefix(FieldBranchID, v))
}

// BranchIDHasSuffix applies the HasSuffix predicate on the "branch_id" field.
func BranchIDHasSuffix(v string) predicate.Branch {
	return predicate.Branch(sql.FieldHasSuffix(FieldBranchID, v))
}

// BranchIDEqualFold applies the EqualFold predicate on the "branch_id" field.
func BranchIDEqualFold(v string) predicate.Branch {
	return predicate.Branch(sql.FieldEqualFold(FieldBranchID, v))
}

// BranchIDContainsFold applies the ContainsFold predicate on the "branch_id" field.
func BranchIDContainsFold(v string) predicate.Branch {
	return predicate.Branch(sql.FieldContainsFold(FieldBranchID, v))
}

// TransIDEQ applies the EQ predicate on the "trans_id" field.
func TransIDEQ(v string) predicate.Branch {
	return predicate.Branch(sql.FieldEQ(FieldTransID, v))
}

// TransIDNEQ applies the NEQ predicate on the "trans_id" field.
func TransIDNEQ(v string) predicate.Branch {
	return predicate.Branch(sql.FieldNEQ(FieldTransID, v))
}

// TransIDIn applies the In predicate on the "trans_id" field.
func TransIDIn(vs ...string) predicate.Branch {
	return predicate.Branch(sql.FieldIn(FieldTransID, vs...))
}

// TransIDNotIn applies the NotIn predicate on the "trans_id" field.
func TransIDNotIn(vs ...string) predicate.Branch {
	return predicate.Branch(sql.FieldNotIn(FieldTransID, vs...))
}

// TransIDGT applies the GT predicate on the "trans_id" field.
func TransIDGT(v string) predicate.Branch {
	return predicate.Branch(sql.FieldGT(FieldTransID, v))
}

// TransIDGTE applies the GTE predicate on the "trans_id" field.
func TransIDGTE(v string) predicate.Branch {
	return predicate.Branch(sql.FieldGTE(FieldTransID, v))
}

// TransIDLT applies the LT predicate on the "trans_id" field.
func TransIDLT(v string) predicate.Branch {
	return predicate.Branch(sql.FieldLT(FieldTransID, v))
}

// TransIDLTE applies the LTE predicate on the "trans_id" field.
func TransIDLTE(v string) predicate.Branch {
	return predicate.Branch(sql.FieldLTE(FieldTransID, v))
}

// TransIDContains applies the Contains predicate on the "trans_id" field.
func TransIDContains(v string) predicate.Branch {
	return predicate.Branch(sql.FieldContains(FieldTransID, v))
}

// TransIDHasPrefix applies the HasPrefix predicate on the "trans_id" field.
func TransIDHasPrefix(v string) predicate.Branch {
	return predicate.Branch(sql.FieldHasPrefix(FieldTransID, v))
}

// TransIDHasSuffix applies the HasSuffix predicate on the "trans_id" field.
func TransIDHasSuffix(v string) predicate.Branch {
	return predicate.Branch(sql.FieldHasSuffix(FieldTransID, v))
}

// TransIDEqualFold applies the EqualFold predicate on the "trans_id" field.
func TransIDEqualFold(v string) predicate.Branch {
	return predicate.Branch(sql.FieldEqualFold(FieldTransID, v))
}

// TransIDContainsFold applies the ContainsFold predicate on the "trans_id" field.
func TransIDContainsFold(v string) predicate.Branch {
	return predicate.Branch(sql.FieldContainsFold(FieldTransID, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Branch {
	return predicate.Branch(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Branch {
	return predicate.Branch(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Branch {
	return predicate.Branch(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Branch {
	return predicate.Branch(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Branch {
	return predicate.Branch(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Branch {
	return predicate.Branch(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Branch {
	return predicate.Branch(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Branch {
	return predicate.Branch(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Branch {
	return predicate.Branch(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Branch {
	return predicate.Branch(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Branch {
	return predicate.Branch(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Branch {
	return predicate.Branch(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Branch {
	return predicate.Branch(sql.FieldContainsFold(FieldType, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v string) predicate.Branch {
	return predicate.Branch(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v string) predicate.Branch {
	return predicate.Branch(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...string) predicate.Branch {
	return predicate.Branch(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...string) predicate.Branch {
	return predicate.Branch(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v string) predicate.Branch {
	return predicate.Branch(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v string) predicate.Branch {
	return predicate.Branch(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v string) predicate.Branch {
	return predicate.Branch(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v string) predicate.Branch {
	return predicate.Branch(sql.FieldLTE(FieldState, v))
}

// StateContains applies the Contains predicate on the "state" field.
func StateContains(v string) predicate.Branch {
	return predicate.Branch(sql.FieldContains(FieldState, v))
}

// StateHasPrefix applies the HasPrefix predicate on the "state" field.
func StateHasPrefix(v string) predicate.Branch {
	return predicate.Branch(sql.FieldHasPrefix(FieldState, v))
}

// StateHasSuffix applies the HasSuffix predicate on the "state" field.
func StateHasSuffix(v string) predicate.Branch {
	return predicate.Branch(sql.FieldHasSuffix(FieldState, v))
}

// StateEqualFold applies the EqualFold predicate on the "state" field.
func StateEqualFold(v string) predicate.Branch {
	return predicate.Branch(sql.FieldEqualFold(FieldState, v))
}

// StateContainsFold applies the ContainsFold predicate on the "state" field.
func StateContainsFold(v string) predicate.Branch {
	return predicate.Branch(sql.FieldContainsFold(FieldState, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Branch {
	return predicate.Branch(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Branch {
	return predicate.Branch(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Branch {
	return predicate.Branch(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Branch {
	return predicate.Branch(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Branch {
	return predicate.Branch(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Branch {
	return predicate.Branch(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Branch {
	return predicate.Branch(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Branch {
	return predicate.Branch(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Branch {
	return predicate.Branch(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Branch {
	return predicate.Branch(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Branch {
	return predicate.Branch(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Branch {
	return predicate.Branch(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Branch {
	return predicate.Branch(sql.FieldContainsFold(FieldName, v))
}

// ExecutorEQ applies the EQ predicate on the "executor" field.
func ExecutorEQ(v string) predicate.Branch {
	return predicate.Branch(sql.FieldEQ(FieldExecutor, v))
}

// ExecutorNEQ applies the NEQ predicate on the "executor" field.
func ExecutorNEQ(v string) predicate.Branch {
	return predicate.Branch(sql.FieldNEQ(FieldExecutor, v))
}

// ExecutorIn applies the In predicate on the "executor" field.
func ExecutorIn(vs ...string) predicate.Branch {
	return predicate.Branch(sql.FieldIn(FieldExecutor, vs...))
}

// ExecutorNotIn applies the NotIn predicate on the "executor" field.
func ExecutorNotIn(vs ...string) predicate.Branch {
	return predicate.Branch(sql.FieldNotIn(FieldExecutor, vs...))
}

// ExecutorGT applies the GT predicate on the "executor" field.
func ExecutorGT(v string) predicate.Branch {
	return predicate.Branch(sql.FieldGT(FieldExecutor, v))
}

// ExecutorGTE applies the GTE predicate on the "executor" field.
func ExecutorGTE(v string) predicate.Branch {
	return predicate.Branch(sql.FieldGTE(FieldExecutor, v))
}

// ExecutorLT applies the LT predicate on the "executor" field.
func ExecutorLT(v string) predicate.Branch {
	return predicate.Branch(sql.FieldLT(FieldExecutor, v))
}

// ExecutorLTE applies the LTE predicate on the "executor" field.
func ExecutorLTE(v string) predicate.Branch {
	return predicate.Branch(sql.FieldLTE(FieldExecutor, v))
}

// ExecutorContains applies the Contains predicate on the "executor" field.
func ExecutorContains(v string) predicate.Branch {
	return predicate.Branch(sql.FieldContains(FieldExecutor, v))
}

// ExecutorHasPrefix applies the HasPrefix predicate on the "executor" field.
func ExecutorHasPrefix(v string) predicate.Branch {
	return predicate.Branch(sql.FieldHasPrefix(FieldExecutor, v))
}

// ExecutorHasSuffix applies the HasSuffix predicate on the "executor" field.
func ExecutorHasSuffix(v string) predicate.Branch {
	return predicate.Branch(sql.FieldHasSuffix(FieldExecutor, v))
}

// ExecutorEqualFold applies the EqualFold predicate on the "executor" field.
func ExecutorEqualFold(v string) predicate.Branch {
	return predicate.Branch(sql.FieldEqualFold(FieldExecutor, v))
}

// ExecutorContainsFold applies the ContainsFold predicate on the "executor" field.
func ExecutorContainsFold(v string) predicate.Branch {
	return predicate.Branch(sql.FieldContainsFold(FieldExecutor, v))
}

// PayloadEQ applies the EQ predicate on the "payload" field.
func PayloadEQ(v string) predicate.Branch {
	return predicate.Branch(sql.FieldEQ(FieldPayload, v))
}

// PayloadNEQ applies the NEQ predicate on the "payload" field.
func PayloadNEQ(v string) predicate.Branch {
	return predicate.Branch(sql.FieldNEQ(FieldPayload, v))
}

// PayloadIn applies the In predicate on the "payload" field.
func PayloadIn(vs ...string) predicate.Branch {
	return predicate.Branch(sql.FieldIn(FieldPayload, vs...))
}

// PayloadNotIn applies the NotIn predicate on the "payload" field.
func PayloadNotIn(vs ...string) predicate.Branch {
	return predicate.Branch(sql.FieldNotIn(FieldPayload, vs...))
}

// PayloadGT applies the GT predicate on the "payload" field.
func PayloadGT(v string) predicate.Branch {
	return predicate.Branch(sql.FieldGT(FieldPayload, v))
}

// PayloadGTE applies the GTE predicate on the "payload" field.
func PayloadGTE(v string) predicate.Branch {
	return predicate.Branch(sql.FieldGTE(FieldPayload, v))
}

// PayloadLT applies the LT predicate on the "payload" field.
func PayloadLT(v string) predicate.Branch {
	return predicate.Branch(sql.FieldLT(FieldPayload, v))
}

// PayloadLTE applies the LTE predicate on the "payload" field.
func PayloadLTE(v string) predicate.Branch {
	return predicate.Branch(sql.FieldLTE(FieldPayload, v))
}

// PayloadContains applies the Contains predicate on the "payload" field.
func PayloadContains(v string) predicate.Branch {
	return predicate.Branch(sql.FieldContains(FieldPayload, v))
}

// PayloadHasPrefix applies the HasPrefix predicate on the "payload" field.
func PayloadHasPrefix(v string) predicate.Branch {
	return predicate.Branch(sql.FieldHasPrefix(FieldPayload, v))
}

// PayloadHasSuffix applies the HasSuffix predicate on the "payload" field.
func PayloadHasSuffix(v string) predicate.Branch {
	return predicate.Branch(sql.FieldHasSuffix(FieldPayload, v))
}

// PayloadEqualFold applies the EqualFold predicate on the "payload" field.
func PayloadEqualFold(v string) predicate.Branch {
	return predicate.Branch(sql.FieldEqualFold(FieldPayload, v))
}

// PayloadContainsFold applies the ContainsFold predicate on the "payload" field.
func PayloadContainsFold(v string) predicate.Branch {
	return predicate.Branch(sql.FieldContainsFold(FieldPayload, v))
}

// ActionDependEQ applies the EQ predicate on the "action_depend" field.
func ActionDependEQ(v string) predicate.Branch {
	return predicate.Branch(sql.FieldEQ(FieldActionDepend, v))
}

// ActionDependNEQ applies the NEQ predicate on the "action_depend" field.
func ActionDependNEQ(v string) predicate.Branch {
	return predicate.Branch(sql.FieldNEQ(FieldActionDepend, v))
}

// ActionDependIn applies the In predicate on the "action_depend" field.
func ActionDependIn(vs ...string) predicate.Branch {
	return predicate.Branch(sql.FieldIn(FieldActionDepend, vs...))
}

// ActionDependNotIn applies the NotIn predicate on the "action_depend" field.
func ActionDependNotIn(vs ...string) predicate.Branch {
	return predicate.Branch(sql.FieldNotIn(FieldActionDepend, vs...))
}

// ActionDependGT applies the GT predicate on the "action_depend" field.
func ActionDependGT(v string) predicate.Branch {
	return predicate.Branch(sql.FieldGT(FieldActionDepend, v))
}

// ActionDependGTE applies the GTE predicate on the "action_depend" field.
func ActionDependGTE(v string) predicate.Branch {
	return predicate.Branch(sql.FieldGTE(FieldActionDepend, v))
}

// ActionDependLT applies the LT predicate on the "action_depend" field.
func ActionDependLT(v string) predicate.Branch {
	return predicate.Branch(sql.FieldLT(FieldActionDepend, v))
}

// ActionDependLTE applies the LTE predicate on the "action_depend" field.
func ActionDependLTE(v string) predicate.Branch {
	return predicate.Branch(sql.FieldLTE(FieldActionDepend, v))
}

// ActionDependContains applies the Contains predicate on the "action_depend" field.
func ActionDependContains(v string) predicate.Branch {
	return predicate.Branch(sql.FieldContains(FieldActionDepend, v))
}

// ActionDependHasPrefix applies the HasPrefix predicate on the "action_depend" field.
func ActionDependHasPrefix(v string) predicate.Branch {
	return predicate.Branch(sql.FieldHasPrefix(FieldActionDepend, v))
}

// ActionDependHasSuffix applies the HasSuffix predicate on the "action_depend" field.
func ActionDependHasSuffix(v string) predicate.Branch {
	return predicate.Branch(sql.FieldHasSuffix(FieldActionDepend, v))
}

// ActionDependEqualFold applies the EqualFold predicate on the "action_depend" field.
func ActionDependEqualFold(v string) predicate.Branch {
	return predicate.Branch(sql.FieldEqualFold(FieldActionDepend, v))
}

// ActionDependContainsFold applies the ContainsFold predicate on the "action_depend" field.
func ActionDependContainsFold(v string) predicate.Branch {
	return predicate.Branch(sql.FieldContainsFold(FieldActionDepend, v))
}

// CompensateDependEQ applies the EQ predicate on the "compensate_depend" field.
func CompensateDependEQ(v string) predicate.Branch {
	return predicate.Branch(sql.FieldEQ(FieldCompensateDepend, v))
}

// CompensateDependNEQ applies the NEQ predicate on the "compensate_depend" field.
func CompensateDependNEQ(v string) predicate.Branch {
	return predicate.Branch(sql.FieldNEQ(FieldCompensateDepend, v))
}

// CompensateDependIn applies the In predicate on the "compensate_depend" field.
func CompensateDependIn(vs ...string) predicate.Branch {
	return predicate.Branch(sql.FieldIn(FieldCompensateDepend, vs...))
}

// CompensateDependNotIn applies the NotIn predicate on the "compensate_depend" field.
func CompensateDependNotIn(vs ...string) predicate.Branch {
	return predicate.Branch(sql.FieldNotIn(FieldCompensateDepend, vs...))
}

// CompensateDependGT applies the GT predicate on the "compensate_depend" field.
func CompensateDependGT(v string) predicate.Branch {
	return predicate.Branch(sql.FieldGT(FieldCompensateDepend, v))
}

// CompensateDependGTE applies the GTE predicate on the "compensate_depend" field.
func CompensateDependGTE(v string) predicate.Branch {
	return predicate.Branch(sql.FieldGTE(FieldCompensateDepend, v))
}

// CompensateDependLT applies the LT predicate on the "compensate_depend" field.
func CompensateDependLT(v string) predicate.Branch {
	return predicate.Branch(sql.FieldLT(FieldCompensateDepend, v))
}

// CompensateDependLTE applies the LTE predicate on the "compensate_depend" field.
func CompensateDependLTE(v string) predicate.Branch {
	return predicate.Branch(sql.FieldLTE(FieldCompensateDepend, v))
}

// CompensateDependContains applies the Contains predicate on the "compensate_depend" field.
func CompensateDependContains(v string) predicate.Branch {
	return predicate.Branch(sql.FieldContains(FieldCompensateDepend, v))
}

// CompensateDependHasPrefix applies the HasPrefix predicate on the "compensate_depend" field.
func CompensateDependHasPrefix(v string) predicate.Branch {
	return predicate.Branch(sql.FieldHasPrefix(FieldCompensateDepend, v))
}

// CompensateDependHasSuffix applies the HasSuffix predicate on the "compensate_depend" field.
func CompensateDependHasSuffix(v string) predicate.Branch {
	return predicate.Branch(sql.FieldHasSuffix(FieldCompensateDepend, v))
}

// CompensateDependEqualFold applies the EqualFold predicate on the "compensate_depend" field.
func CompensateDependEqualFold(v string) predicate.Branch {
	return predicate.Branch(sql.FieldEqualFold(FieldCompensateDepend, v))
}

// CompensateDependContainsFold applies the ContainsFold predicate on the "compensate_depend" field.
func CompensateDependContainsFold(v string) predicate.Branch {
	return predicate.Branch(sql.FieldContainsFold(FieldCompensateDepend, v))
}

// FinishedAtEQ applies the EQ predicate on the "finished_at" field.
func FinishedAtEQ(v time.Time) predicate.Branch {
	return predicate.Branch(sql.FieldEQ(FieldFinishedAt, v))
}

// FinishedAtNEQ applies the NEQ predicate on the "finished_at" field.
func FinishedAtNEQ(v time.Time) predicate.Branch {
	return predicate.Branch(sql.FieldNEQ(FieldFinishedAt, v))
}

// FinishedAtIn applies the In predicate on the "finished_at" field.
func FinishedAtIn(vs ...time.Time) predicate.Branch {
	return predicate.Branch(sql.FieldIn(FieldFinishedAt, vs...))
}

// FinishedAtNotIn applies the NotIn predicate on the "finished_at" field.
func FinishedAtNotIn(vs ...time.Time) predicate.Branch {
	return predicate.Branch(sql.FieldNotIn(FieldFinishedAt, vs...))
}

// FinishedAtGT applies the GT predicate on the "finished_at" field.
func FinishedAtGT(v time.Time) predicate.Branch {
	return predicate.Branch(sql.FieldGT(FieldFinishedAt, v))
}

// FinishedAtGTE applies the GTE predicate on the "finished_at" field.
func FinishedAtGTE(v time.Time) predicate.Branch {
	return predicate.Branch(sql.FieldGTE(FieldFinishedAt, v))
}

// FinishedAtLT applies the LT predicate on the "finished_at" field.
func FinishedAtLT(v time.Time) predicate.Branch {
	return predicate.Branch(sql.FieldLT(FieldFinishedAt, v))
}

// FinishedAtLTE applies the LTE predicate on the "finished_at" field.
func FinishedAtLTE(v time.Time) predicate.Branch {
	return predicate.Branch(sql.FieldLTE(FieldFinishedAt, v))
}

// IsDeadEQ applies the EQ predicate on the "is_dead" field.
func IsDeadEQ(v bool) predicate.Branch {
	return predicate.Branch(sql.FieldEQ(FieldIsDead, v))
}

// IsDeadNEQ applies the NEQ predicate on the "is_dead" field.
func IsDeadNEQ(v bool) predicate.Branch {
	return predicate.Branch(sql.FieldNEQ(FieldIsDead, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Branch {
	return predicate.Branch(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Branch {
	return predicate.Branch(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Branch {
	return predicate.Branch(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Branch {
	return predicate.Branch(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Branch {
	return predicate.Branch(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Branch {
	return predicate.Branch(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Branch {
	return predicate.Branch(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Branch {
	return predicate.Branch(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Branch {
	return predicate.Branch(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Branch {
	return predicate.Branch(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Branch {
	return predicate.Branch(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Branch {
	return predicate.Branch(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Branch {
	return predicate.Branch(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Branch {
	return predicate.Branch(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Branch {
	return predicate.Branch(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Branch {
	return predicate.Branch(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.Branch {
	return predicate.Branch(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.Branch {
	return predicate.Branch(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.Branch {
	return predicate.Branch(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.Branch {
	return predicate.Branch(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.Branch {
	return predicate.Branch(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.Branch {
	return predicate.Branch(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.Branch {
	return predicate.Branch(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.Branch {
	return predicate.Branch(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.Branch {
	return predicate.Branch(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.Branch {
	return predicate.Branch(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.Branch {
	return predicate.Branch(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.Branch {
	return predicate.Branch(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.Branch {
	return predicate.Branch(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.Branch {
	return predicate.Branch(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.Branch {
	return predicate.Branch(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.Branch {
	return predicate.Branch(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.Branch {
	return predicate.Branch(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.Branch {
	return predicate.Branch(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.Branch {
	return predicate.Branch(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.Branch {
	return predicate.Branch(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.Branch {
	return predicate.Branch(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.Branch {
	return predicate.Branch(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.Branch {
	return predicate.Branch(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.Branch {
	return predicate.Branch(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.Branch {
	return predicate.Branch(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.Branch {
	return predicate.Branch(sql.FieldContainsFold(FieldCreatedBy, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Branch) predicate.Branch {
	return predicate.Branch(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Branch) predicate.Branch {
	return predicate.Branch(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Branch) predicate.Branch {
	return predicate.Branch(sql.NotPredicates(p))
}
