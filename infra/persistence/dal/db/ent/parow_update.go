// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"purchase/infra/persistence/dal/db/ent/parow"
	"purchase/infra/persistence/dal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PARowUpdate is the builder for updating PARow entities.
type PARowUpdate struct {
	config
	hooks    []Hook
	mutation *PARowMutation
}

// Where appends a list predicates to the PARowUpdate builder.
func (pru *PARowUpdate) Where(ps ...predicate.PARow) *PARowUpdate {
	pru.mutation.Where(ps...)
	return pru
}

// SetDocCode sets the "doc_code" field.
func (pru *PARowUpdate) SetDocCode(s string) *PARowUpdate {
	pru.mutation.SetDocCode(s)
	return pru
}

// SetNillableDocCode sets the "doc_code" field if the given value is not nil.
func (pru *PARowUpdate) SetNillableDocCode(s *string) *PARowUpdate {
	if s != nil {
		pru.SetDocCode(*s)
	}
	return pru
}

// SetOrderCode sets the "order_code" field.
func (pru *PARowUpdate) SetOrderCode(s string) *PARowUpdate {
	pru.mutation.SetOrderCode(s)
	return pru
}

// SetNillableOrderCode sets the "order_code" field if the given value is not nil.
func (pru *PARowUpdate) SetNillableOrderCode(s *string) *PARowUpdate {
	if s != nil {
		pru.SetOrderCode(*s)
	}
	return pru
}

// SetRowCurrency sets the "row_currency" field.
func (pru *PARowUpdate) SetRowCurrency(s string) *PARowUpdate {
	pru.mutation.SetRowCurrency(s)
	return pru
}

// SetNillableRowCurrency sets the "row_currency" field if the given value is not nil.
func (pru *PARowUpdate) SetNillableRowCurrency(s *string) *PARowUpdate {
	if s != nil {
		pru.SetRowCurrency(*s)
	}
	return pru
}

// SetTaxRatio sets the "tax_ratio" field.
func (pru *PARowUpdate) SetTaxRatio(s string) *PARowUpdate {
	pru.mutation.SetTaxRatio(s)
	return pru
}

// SetNillableTaxRatio sets the "tax_ratio" field if the given value is not nil.
func (pru *PARowUpdate) SetNillableTaxRatio(s *string) *PARowUpdate {
	if s != nil {
		pru.SetTaxRatio(*s)
	}
	return pru
}

// SetInitialAmount sets the "initial_amount" field.
func (pru *PARowUpdate) SetInitialAmount(s string) *PARowUpdate {
	pru.mutation.SetInitialAmount(s)
	return pru
}

// SetNillableInitialAmount sets the "initial_amount" field if the given value is not nil.
func (pru *PARowUpdate) SetNillableInitialAmount(s *string) *PARowUpdate {
	if s != nil {
		pru.SetInitialAmount(*s)
	}
	return pru
}

// SetCreatedAt sets the "created_at" field.
func (pru *PARowUpdate) SetCreatedAt(t time.Time) *PARowUpdate {
	pru.mutation.SetCreatedAt(t)
	return pru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pru *PARowUpdate) SetNillableCreatedAt(t *time.Time) *PARowUpdate {
	if t != nil {
		pru.SetCreatedAt(*t)
	}
	return pru
}

// SetUpdatedAt sets the "updated_at" field.
func (pru *PARowUpdate) SetUpdatedAt(t time.Time) *PARowUpdate {
	pru.mutation.SetUpdatedAt(t)
	return pru
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pru *PARowUpdate) SetNillableUpdatedAt(t *time.Time) *PARowUpdate {
	if t != nil {
		pru.SetUpdatedAt(*t)
	}
	return pru
}

// Mutation returns the PARowMutation object of the builder.
func (pru *PARowUpdate) Mutation() *PARowMutation {
	return pru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pru *PARowUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pru.sqlSave, pru.mutation, pru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pru *PARowUpdate) SaveX(ctx context.Context) int {
	affected, err := pru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pru *PARowUpdate) Exec(ctx context.Context) error {
	_, err := pru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pru *PARowUpdate) ExecX(ctx context.Context) {
	if err := pru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pru *PARowUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(parow.Table, parow.Columns, sqlgraph.NewFieldSpec(parow.FieldID, field.TypeInt64))
	if ps := pru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pru.mutation.DocCode(); ok {
		_spec.SetField(parow.FieldDocCode, field.TypeString, value)
	}
	if value, ok := pru.mutation.OrderCode(); ok {
		_spec.SetField(parow.FieldOrderCode, field.TypeString, value)
	}
	if value, ok := pru.mutation.RowCurrency(); ok {
		_spec.SetField(parow.FieldRowCurrency, field.TypeString, value)
	}
	if value, ok := pru.mutation.TaxRatio(); ok {
		_spec.SetField(parow.FieldTaxRatio, field.TypeString, value)
	}
	if value, ok := pru.mutation.InitialAmount(); ok {
		_spec.SetField(parow.FieldInitialAmount, field.TypeString, value)
	}
	if value, ok := pru.mutation.CreatedAt(); ok {
		_spec.SetField(parow.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pru.mutation.UpdatedAt(); ok {
		_spec.SetField(parow.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{parow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pru.mutation.done = true
	return n, nil
}

// PARowUpdateOne is the builder for updating a single PARow entity.
type PARowUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PARowMutation
}

// SetDocCode sets the "doc_code" field.
func (pruo *PARowUpdateOne) SetDocCode(s string) *PARowUpdateOne {
	pruo.mutation.SetDocCode(s)
	return pruo
}

// SetNillableDocCode sets the "doc_code" field if the given value is not nil.
func (pruo *PARowUpdateOne) SetNillableDocCode(s *string) *PARowUpdateOne {
	if s != nil {
		pruo.SetDocCode(*s)
	}
	return pruo
}

// SetOrderCode sets the "order_code" field.
func (pruo *PARowUpdateOne) SetOrderCode(s string) *PARowUpdateOne {
	pruo.mutation.SetOrderCode(s)
	return pruo
}

// SetNillableOrderCode sets the "order_code" field if the given value is not nil.
func (pruo *PARowUpdateOne) SetNillableOrderCode(s *string) *PARowUpdateOne {
	if s != nil {
		pruo.SetOrderCode(*s)
	}
	return pruo
}

// SetRowCurrency sets the "row_currency" field.
func (pruo *PARowUpdateOne) SetRowCurrency(s string) *PARowUpdateOne {
	pruo.mutation.SetRowCurrency(s)
	return pruo
}

// SetNillableRowCurrency sets the "row_currency" field if the given value is not nil.
func (pruo *PARowUpdateOne) SetNillableRowCurrency(s *string) *PARowUpdateOne {
	if s != nil {
		pruo.SetRowCurrency(*s)
	}
	return pruo
}

// SetTaxRatio sets the "tax_ratio" field.
func (pruo *PARowUpdateOne) SetTaxRatio(s string) *PARowUpdateOne {
	pruo.mutation.SetTaxRatio(s)
	return pruo
}

// SetNillableTaxRatio sets the "tax_ratio" field if the given value is not nil.
func (pruo *PARowUpdateOne) SetNillableTaxRatio(s *string) *PARowUpdateOne {
	if s != nil {
		pruo.SetTaxRatio(*s)
	}
	return pruo
}

// SetInitialAmount sets the "initial_amount" field.
func (pruo *PARowUpdateOne) SetInitialAmount(s string) *PARowUpdateOne {
	pruo.mutation.SetInitialAmount(s)
	return pruo
}

// SetNillableInitialAmount sets the "initial_amount" field if the given value is not nil.
func (pruo *PARowUpdateOne) SetNillableInitialAmount(s *string) *PARowUpdateOne {
	if s != nil {
		pruo.SetInitialAmount(*s)
	}
	return pruo
}

// SetCreatedAt sets the "created_at" field.
func (pruo *PARowUpdateOne) SetCreatedAt(t time.Time) *PARowUpdateOne {
	pruo.mutation.SetCreatedAt(t)
	return pruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pruo *PARowUpdateOne) SetNillableCreatedAt(t *time.Time) *PARowUpdateOne {
	if t != nil {
		pruo.SetCreatedAt(*t)
	}
	return pruo
}

// SetUpdatedAt sets the "updated_at" field.
func (pruo *PARowUpdateOne) SetUpdatedAt(t time.Time) *PARowUpdateOne {
	pruo.mutation.SetUpdatedAt(t)
	return pruo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pruo *PARowUpdateOne) SetNillableUpdatedAt(t *time.Time) *PARowUpdateOne {
	if t != nil {
		pruo.SetUpdatedAt(*t)
	}
	return pruo
}

// Mutation returns the PARowMutation object of the builder.
func (pruo *PARowUpdateOne) Mutation() *PARowMutation {
	return pruo.mutation
}

// Where appends a list predicates to the PARowUpdate builder.
func (pruo *PARowUpdateOne) Where(ps ...predicate.PARow) *PARowUpdateOne {
	pruo.mutation.Where(ps...)
	return pruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pruo *PARowUpdateOne) Select(field string, fields ...string) *PARowUpdateOne {
	pruo.fields = append([]string{field}, fields...)
	return pruo
}

// Save executes the query and returns the updated PARow entity.
func (pruo *PARowUpdateOne) Save(ctx context.Context) (*PARow, error) {
	return withHooks(ctx, pruo.sqlSave, pruo.mutation, pruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pruo *PARowUpdateOne) SaveX(ctx context.Context) *PARow {
	node, err := pruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pruo *PARowUpdateOne) Exec(ctx context.Context) error {
	_, err := pruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pruo *PARowUpdateOne) ExecX(ctx context.Context) {
	if err := pruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pruo *PARowUpdateOne) sqlSave(ctx context.Context) (_node *PARow, err error) {
	_spec := sqlgraph.NewUpdateSpec(parow.Table, parow.Columns, sqlgraph.NewFieldSpec(parow.FieldID, field.TypeInt64))
	id, ok := pruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PARow.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, parow.FieldID)
		for _, f := range fields {
			if !parow.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != parow.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pruo.mutation.DocCode(); ok {
		_spec.SetField(parow.FieldDocCode, field.TypeString, value)
	}
	if value, ok := pruo.mutation.OrderCode(); ok {
		_spec.SetField(parow.FieldOrderCode, field.TypeString, value)
	}
	if value, ok := pruo.mutation.RowCurrency(); ok {
		_spec.SetField(parow.FieldRowCurrency, field.TypeString, value)
	}
	if value, ok := pruo.mutation.TaxRatio(); ok {
		_spec.SetField(parow.FieldTaxRatio, field.TypeString, value)
	}
	if value, ok := pruo.mutation.InitialAmount(); ok {
		_spec.SetField(parow.FieldInitialAmount, field.TypeString, value)
	}
	if value, ok := pruo.mutation.CreatedAt(); ok {
		_spec.SetField(parow.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pruo.mutation.UpdatedAt(); ok {
		_spec.SetField(parow.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &PARow{config: pruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{parow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pruo.mutation.done = true
	return _node, nil
}
