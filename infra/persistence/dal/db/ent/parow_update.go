// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"purchase/infra/persistence/dal/db/ent/parow"
	"purchase/infra/persistence/dal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PARowUpdate is the builder for updating PARow entities.
type PARowUpdate struct {
	config
	hooks    []Hook
	mutation *PARowMutation
}

// Where appends a list predicates to the PARowUpdate builder.
func (pru *PARowUpdate) Where(ps ...predicate.PARow) *PARowUpdate {
	pru.mutation.Where(ps...)
	return pru
}

// SetHeadCode sets the "head_code" field.
func (pru *PARowUpdate) SetHeadCode(s string) *PARowUpdate {
	pru.mutation.SetHeadCode(s)
	return pru
}

// SetNillableHeadCode sets the "head_code" field if the given value is not nil.
func (pru *PARowUpdate) SetNillableHeadCode(s *string) *PARowUpdate {
	if s != nil {
		pru.SetHeadCode(*s)
	}
	return pru
}

// SetRowCode sets the "row_code" field.
func (pru *PARowUpdate) SetRowCode(s string) *PARowUpdate {
	pru.mutation.SetRowCode(s)
	return pru
}

// SetNillableRowCode sets the "row_code" field if the given value is not nil.
func (pru *PARowUpdate) SetNillableRowCode(s *string) *PARowUpdate {
	if s != nil {
		pru.SetRowCode(*s)
	}
	return pru
}

// SetGrnCount sets the "grn_count" field.
func (pru *PARowUpdate) SetGrnCount(i int32) *PARowUpdate {
	pru.mutation.ResetGrnCount()
	pru.mutation.SetGrnCount(i)
	return pru
}

// SetNillableGrnCount sets the "grn_count" field if the given value is not nil.
func (pru *PARowUpdate) SetNillableGrnCount(i *int32) *PARowUpdate {
	if i != nil {
		pru.SetGrnCount(*i)
	}
	return pru
}

// AddGrnCount adds i to the "grn_count" field.
func (pru *PARowUpdate) AddGrnCount(i int32) *PARowUpdate {
	pru.mutation.AddGrnCount(i)
	return pru
}

// SetGrnAmount sets the "grn_amount" field.
func (pru *PARowUpdate) SetGrnAmount(s string) *PARowUpdate {
	pru.mutation.SetGrnAmount(s)
	return pru
}

// SetNillableGrnAmount sets the "grn_amount" field if the given value is not nil.
func (pru *PARowUpdate) SetNillableGrnAmount(s *string) *PARowUpdate {
	if s != nil {
		pru.SetGrnAmount(*s)
	}
	return pru
}

// SetPayAmount sets the "pay_amount" field.
func (pru *PARowUpdate) SetPayAmount(s string) *PARowUpdate {
	pru.mutation.SetPayAmount(s)
	return pru
}

// SetNillablePayAmount sets the "pay_amount" field if the given value is not nil.
func (pru *PARowUpdate) SetNillablePayAmount(s *string) *PARowUpdate {
	if s != nil {
		pru.SetPayAmount(*s)
	}
	return pru
}

// SetDescription sets the "description" field.
func (pru *PARowUpdate) SetDescription(s string) *PARowUpdate {
	pru.mutation.SetDescription(s)
	return pru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pru *PARowUpdate) SetNillableDescription(s *string) *PARowUpdate {
	if s != nil {
		pru.SetDescription(*s)
	}
	return pru
}

// SetCreatedAt sets the "created_at" field.
func (pru *PARowUpdate) SetCreatedAt(t time.Time) *PARowUpdate {
	pru.mutation.SetCreatedAt(t)
	return pru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pru *PARowUpdate) SetNillableCreatedAt(t *time.Time) *PARowUpdate {
	if t != nil {
		pru.SetCreatedAt(*t)
	}
	return pru
}

// SetUpdatedAt sets the "updated_at" field.
func (pru *PARowUpdate) SetUpdatedAt(t time.Time) *PARowUpdate {
	pru.mutation.SetUpdatedAt(t)
	return pru
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pru *PARowUpdate) SetNillableUpdatedAt(t *time.Time) *PARowUpdate {
	if t != nil {
		pru.SetUpdatedAt(*t)
	}
	return pru
}

// Mutation returns the PARowMutation object of the builder.
func (pru *PARowUpdate) Mutation() *PARowMutation {
	return pru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pru *PARowUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pru.sqlSave, pru.mutation, pru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pru *PARowUpdate) SaveX(ctx context.Context) int {
	affected, err := pru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pru *PARowUpdate) Exec(ctx context.Context) error {
	_, err := pru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pru *PARowUpdate) ExecX(ctx context.Context) {
	if err := pru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pru *PARowUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(parow.Table, parow.Columns, sqlgraph.NewFieldSpec(parow.FieldID, field.TypeInt64))
	if ps := pru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pru.mutation.HeadCode(); ok {
		_spec.SetField(parow.FieldHeadCode, field.TypeString, value)
	}
	if value, ok := pru.mutation.RowCode(); ok {
		_spec.SetField(parow.FieldRowCode, field.TypeString, value)
	}
	if value, ok := pru.mutation.GrnCount(); ok {
		_spec.SetField(parow.FieldGrnCount, field.TypeInt32, value)
	}
	if value, ok := pru.mutation.AddedGrnCount(); ok {
		_spec.AddField(parow.FieldGrnCount, field.TypeInt32, value)
	}
	if value, ok := pru.mutation.GrnAmount(); ok {
		_spec.SetField(parow.FieldGrnAmount, field.TypeString, value)
	}
	if value, ok := pru.mutation.PayAmount(); ok {
		_spec.SetField(parow.FieldPayAmount, field.TypeString, value)
	}
	if value, ok := pru.mutation.Description(); ok {
		_spec.SetField(parow.FieldDescription, field.TypeString, value)
	}
	if value, ok := pru.mutation.CreatedAt(); ok {
		_spec.SetField(parow.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pru.mutation.UpdatedAt(); ok {
		_spec.SetField(parow.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{parow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pru.mutation.done = true
	return n, nil
}

// PARowUpdateOne is the builder for updating a single PARow entity.
type PARowUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PARowMutation
}

// SetHeadCode sets the "head_code" field.
func (pruo *PARowUpdateOne) SetHeadCode(s string) *PARowUpdateOne {
	pruo.mutation.SetHeadCode(s)
	return pruo
}

// SetNillableHeadCode sets the "head_code" field if the given value is not nil.
func (pruo *PARowUpdateOne) SetNillableHeadCode(s *string) *PARowUpdateOne {
	if s != nil {
		pruo.SetHeadCode(*s)
	}
	return pruo
}

// SetRowCode sets the "row_code" field.
func (pruo *PARowUpdateOne) SetRowCode(s string) *PARowUpdateOne {
	pruo.mutation.SetRowCode(s)
	return pruo
}

// SetNillableRowCode sets the "row_code" field if the given value is not nil.
func (pruo *PARowUpdateOne) SetNillableRowCode(s *string) *PARowUpdateOne {
	if s != nil {
		pruo.SetRowCode(*s)
	}
	return pruo
}

// SetGrnCount sets the "grn_count" field.
func (pruo *PARowUpdateOne) SetGrnCount(i int32) *PARowUpdateOne {
	pruo.mutation.ResetGrnCount()
	pruo.mutation.SetGrnCount(i)
	return pruo
}

// SetNillableGrnCount sets the "grn_count" field if the given value is not nil.
func (pruo *PARowUpdateOne) SetNillableGrnCount(i *int32) *PARowUpdateOne {
	if i != nil {
		pruo.SetGrnCount(*i)
	}
	return pruo
}

// AddGrnCount adds i to the "grn_count" field.
func (pruo *PARowUpdateOne) AddGrnCount(i int32) *PARowUpdateOne {
	pruo.mutation.AddGrnCount(i)
	return pruo
}

// SetGrnAmount sets the "grn_amount" field.
func (pruo *PARowUpdateOne) SetGrnAmount(s string) *PARowUpdateOne {
	pruo.mutation.SetGrnAmount(s)
	return pruo
}

// SetNillableGrnAmount sets the "grn_amount" field if the given value is not nil.
func (pruo *PARowUpdateOne) SetNillableGrnAmount(s *string) *PARowUpdateOne {
	if s != nil {
		pruo.SetGrnAmount(*s)
	}
	return pruo
}

// SetPayAmount sets the "pay_amount" field.
func (pruo *PARowUpdateOne) SetPayAmount(s string) *PARowUpdateOne {
	pruo.mutation.SetPayAmount(s)
	return pruo
}

// SetNillablePayAmount sets the "pay_amount" field if the given value is not nil.
func (pruo *PARowUpdateOne) SetNillablePayAmount(s *string) *PARowUpdateOne {
	if s != nil {
		pruo.SetPayAmount(*s)
	}
	return pruo
}

// SetDescription sets the "description" field.
func (pruo *PARowUpdateOne) SetDescription(s string) *PARowUpdateOne {
	pruo.mutation.SetDescription(s)
	return pruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pruo *PARowUpdateOne) SetNillableDescription(s *string) *PARowUpdateOne {
	if s != nil {
		pruo.SetDescription(*s)
	}
	return pruo
}

// SetCreatedAt sets the "created_at" field.
func (pruo *PARowUpdateOne) SetCreatedAt(t time.Time) *PARowUpdateOne {
	pruo.mutation.SetCreatedAt(t)
	return pruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pruo *PARowUpdateOne) SetNillableCreatedAt(t *time.Time) *PARowUpdateOne {
	if t != nil {
		pruo.SetCreatedAt(*t)
	}
	return pruo
}

// SetUpdatedAt sets the "updated_at" field.
func (pruo *PARowUpdateOne) SetUpdatedAt(t time.Time) *PARowUpdateOne {
	pruo.mutation.SetUpdatedAt(t)
	return pruo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pruo *PARowUpdateOne) SetNillableUpdatedAt(t *time.Time) *PARowUpdateOne {
	if t != nil {
		pruo.SetUpdatedAt(*t)
	}
	return pruo
}

// Mutation returns the PARowMutation object of the builder.
func (pruo *PARowUpdateOne) Mutation() *PARowMutation {
	return pruo.mutation
}

// Where appends a list predicates to the PARowUpdate builder.
func (pruo *PARowUpdateOne) Where(ps ...predicate.PARow) *PARowUpdateOne {
	pruo.mutation.Where(ps...)
	return pruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pruo *PARowUpdateOne) Select(field string, fields ...string) *PARowUpdateOne {
	pruo.fields = append([]string{field}, fields...)
	return pruo
}

// Save executes the query and returns the updated PARow entity.
func (pruo *PARowUpdateOne) Save(ctx context.Context) (*PARow, error) {
	return withHooks(ctx, pruo.sqlSave, pruo.mutation, pruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pruo *PARowUpdateOne) SaveX(ctx context.Context) *PARow {
	node, err := pruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pruo *PARowUpdateOne) Exec(ctx context.Context) error {
	_, err := pruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pruo *PARowUpdateOne) ExecX(ctx context.Context) {
	if err := pruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pruo *PARowUpdateOne) sqlSave(ctx context.Context) (_node *PARow, err error) {
	_spec := sqlgraph.NewUpdateSpec(parow.Table, parow.Columns, sqlgraph.NewFieldSpec(parow.FieldID, field.TypeInt64))
	id, ok := pruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PARow.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, parow.FieldID)
		for _, f := range fields {
			if !parow.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != parow.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pruo.mutation.HeadCode(); ok {
		_spec.SetField(parow.FieldHeadCode, field.TypeString, value)
	}
	if value, ok := pruo.mutation.RowCode(); ok {
		_spec.SetField(parow.FieldRowCode, field.TypeString, value)
	}
	if value, ok := pruo.mutation.GrnCount(); ok {
		_spec.SetField(parow.FieldGrnCount, field.TypeInt32, value)
	}
	if value, ok := pruo.mutation.AddedGrnCount(); ok {
		_spec.AddField(parow.FieldGrnCount, field.TypeInt32, value)
	}
	if value, ok := pruo.mutation.GrnAmount(); ok {
		_spec.SetField(parow.FieldGrnAmount, field.TypeString, value)
	}
	if value, ok := pruo.mutation.PayAmount(); ok {
		_spec.SetField(parow.FieldPayAmount, field.TypeString, value)
	}
	if value, ok := pruo.mutation.Description(); ok {
		_spec.SetField(parow.FieldDescription, field.TypeString, value)
	}
	if value, ok := pruo.mutation.CreatedAt(); ok {
		_spec.SetField(parow.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pruo.mutation.UpdatedAt(); ok {
		_spec.SetField(parow.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &PARow{config: pruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{parow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pruo.mutation.done = true
	return _node, nil
}
