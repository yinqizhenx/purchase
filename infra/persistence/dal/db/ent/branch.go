// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"purchase/infra/persistence/dal/db/ent/branch"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Branch is the model entity for the Branch schema.
type Branch struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TransID holds the value of the "trans_id" field.
	TransID int `json:"trans_id,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// State holds the value of the "state" field.
	State string `json:"state,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Action holds the value of the "action" field.
	Action string `json:"action,omitempty"`
	// Compensate holds the value of the "compensate" field.
	Compensate string `json:"compensate,omitempty"`
	// Payload holds the value of the "payload" field.
	Payload string `json:"payload,omitempty"`
	// ActionDepend holds the value of the "action_depend" field.
	ActionDepend string `json:"action_depend,omitempty"`
	// CompensateDepend holds the value of the "compensate_depend" field.
	CompensateDepend string `json:"compensate_depend,omitempty"`
	// FinishedAt holds the value of the "finished_at" field.
	FinishedAt time.Time `json:"finished_at,omitempty"`
	// IsDead holds the value of the "is_dead" field.
	IsDead bool `json:"is_dead,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy    string `json:"created_by,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Branch) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case branch.FieldIsDead:
			values[i] = new(sql.NullBool)
		case branch.FieldID, branch.FieldTransID:
			values[i] = new(sql.NullInt64)
		case branch.FieldType, branch.FieldState, branch.FieldName, branch.FieldAction, branch.FieldCompensate, branch.FieldPayload, branch.FieldActionDepend, branch.FieldCompensateDepend, branch.FieldUpdatedBy, branch.FieldCreatedBy:
			values[i] = new(sql.NullString)
		case branch.FieldFinishedAt, branch.FieldCreatedAt, branch.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Branch fields.
func (b *Branch) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case branch.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case branch.FieldTransID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field trans_id", values[i])
			} else if value.Valid {
				b.TransID = int(value.Int64)
			}
		case branch.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				b.Type = value.String
			}
		case branch.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				b.State = value.String
			}
		case branch.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				b.Name = value.String
			}
		case branch.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				b.Action = value.String
			}
		case branch.FieldCompensate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field compensate", values[i])
			} else if value.Valid {
				b.Compensate = value.String
			}
		case branch.FieldPayload:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payload", values[i])
			} else if value.Valid {
				b.Payload = value.String
			}
		case branch.FieldActionDepend:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action_depend", values[i])
			} else if value.Valid {
				b.ActionDepend = value.String
			}
		case branch.FieldCompensateDepend:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field compensate_depend", values[i])
			} else if value.Valid {
				b.CompensateDepend = value.String
			}
		case branch.FieldFinishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field finished_at", values[i])
			} else if value.Valid {
				b.FinishedAt = value.Time
			}
		case branch.FieldIsDead:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_dead", values[i])
			} else if value.Valid {
				b.IsDead = value.Bool
			}
		case branch.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				b.CreatedAt = value.Time
			}
		case branch.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				b.UpdatedAt = value.Time
			}
		case branch.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				b.UpdatedBy = value.String
			}
		case branch.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				b.CreatedBy = value.String
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Branch.
// This includes values selected through modifiers, order, etc.
func (b *Branch) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// Update returns a builder for updating this Branch.
// Note that you need to call Branch.Unwrap() before calling this method if this Branch
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Branch) Update() *BranchUpdateOne {
	return NewBranchClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Branch entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Branch) Unwrap() *Branch {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Branch is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Branch) String() string {
	var builder strings.Builder
	builder.WriteString("Branch(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("trans_id=")
	builder.WriteString(fmt.Sprintf("%v", b.TransID))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(b.Type)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(b.State)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(b.Name)
	builder.WriteString(", ")
	builder.WriteString("action=")
	builder.WriteString(b.Action)
	builder.WriteString(", ")
	builder.WriteString("compensate=")
	builder.WriteString(b.Compensate)
	builder.WriteString(", ")
	builder.WriteString("payload=")
	builder.WriteString(b.Payload)
	builder.WriteString(", ")
	builder.WriteString("action_depend=")
	builder.WriteString(b.ActionDepend)
	builder.WriteString(", ")
	builder.WriteString("compensate_depend=")
	builder.WriteString(b.CompensateDepend)
	builder.WriteString(", ")
	builder.WriteString("finished_at=")
	builder.WriteString(b.FinishedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_dead=")
	builder.WriteString(fmt.Sprintf("%v", b.IsDead))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(b.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(b.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(b.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(b.CreatedBy)
	builder.WriteByte(')')
	return builder.String()
}

// Branches is a parsable slice of Branch.
type Branches []*Branch
