// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"purchase/infra/persistence/dal/db/ent/asynctask"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsyncTaskCreate is the builder for creating a AsyncTask entity.
type AsyncTaskCreate struct {
	config
	mutation *AsyncTaskMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTaskID sets the "task_id" field.
func (atc *AsyncTaskCreate) SetTaskID(s string) *AsyncTaskCreate {
	atc.mutation.SetTaskID(s)
	return atc
}

// SetTaskType sets the "task_type" field.
func (atc *AsyncTaskCreate) SetTaskType(s string) *AsyncTaskCreate {
	atc.mutation.SetTaskType(s)
	return atc
}

// SetTaskGroup sets the "task_group" field.
func (atc *AsyncTaskCreate) SetTaskGroup(s string) *AsyncTaskCreate {
	atc.mutation.SetTaskGroup(s)
	return atc
}

// SetTaskName sets the "task_name" field.
func (atc *AsyncTaskCreate) SetTaskName(s string) *AsyncTaskCreate {
	atc.mutation.SetTaskName(s)
	return atc
}

// SetBizID sets the "biz_id" field.
func (atc *AsyncTaskCreate) SetBizID(s string) *AsyncTaskCreate {
	atc.mutation.SetBizID(s)
	return atc
}

// SetTaskData sets the "task_data" field.
func (atc *AsyncTaskCreate) SetTaskData(s string) *AsyncTaskCreate {
	atc.mutation.SetTaskData(s)
	return atc
}

// SetState sets the "state" field.
func (atc *AsyncTaskCreate) SetState(s string) *AsyncTaskCreate {
	atc.mutation.SetState(s)
	return atc
}

// SetCreatedAt sets the "created_at" field.
func (atc *AsyncTaskCreate) SetCreatedAt(t time.Time) *AsyncTaskCreate {
	atc.mutation.SetCreatedAt(t)
	return atc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (atc *AsyncTaskCreate) SetNillableCreatedAt(t *time.Time) *AsyncTaskCreate {
	if t != nil {
		atc.SetCreatedAt(*t)
	}
	return atc
}

// SetUpdatedAt sets the "updated_at" field.
func (atc *AsyncTaskCreate) SetUpdatedAt(t time.Time) *AsyncTaskCreate {
	atc.mutation.SetUpdatedAt(t)
	return atc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (atc *AsyncTaskCreate) SetNillableUpdatedAt(t *time.Time) *AsyncTaskCreate {
	if t != nil {
		atc.SetUpdatedAt(*t)
	}
	return atc
}

// SetID sets the "id" field.
func (atc *AsyncTaskCreate) SetID(i int64) *AsyncTaskCreate {
	atc.mutation.SetID(i)
	return atc
}

// Mutation returns the AsyncTaskMutation object of the builder.
func (atc *AsyncTaskCreate) Mutation() *AsyncTaskMutation {
	return atc.mutation
}

// Save creates the AsyncTask in the database.
func (atc *AsyncTaskCreate) Save(ctx context.Context) (*AsyncTask, error) {
	atc.defaults()
	return withHooks(ctx, atc.sqlSave, atc.mutation, atc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (atc *AsyncTaskCreate) SaveX(ctx context.Context) *AsyncTask {
	v, err := atc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atc *AsyncTaskCreate) Exec(ctx context.Context) error {
	_, err := atc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atc *AsyncTaskCreate) ExecX(ctx context.Context) {
	if err := atc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atc *AsyncTaskCreate) defaults() {
	if _, ok := atc.mutation.CreatedAt(); !ok {
		v := asynctask.DefaultCreatedAt()
		atc.mutation.SetCreatedAt(v)
	}
	if _, ok := atc.mutation.UpdatedAt(); !ok {
		v := asynctask.DefaultUpdatedAt()
		atc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atc *AsyncTaskCreate) check() error {
	if _, ok := atc.mutation.TaskID(); !ok {
		return &ValidationError{Name: "task_id", err: errors.New(`ent: missing required field "AsyncTask.task_id"`)}
	}
	if _, ok := atc.mutation.TaskType(); !ok {
		return &ValidationError{Name: "task_type", err: errors.New(`ent: missing required field "AsyncTask.task_type"`)}
	}
	if _, ok := atc.mutation.TaskGroup(); !ok {
		return &ValidationError{Name: "task_group", err: errors.New(`ent: missing required field "AsyncTask.task_group"`)}
	}
	if _, ok := atc.mutation.TaskName(); !ok {
		return &ValidationError{Name: "task_name", err: errors.New(`ent: missing required field "AsyncTask.task_name"`)}
	}
	if _, ok := atc.mutation.BizID(); !ok {
		return &ValidationError{Name: "biz_id", err: errors.New(`ent: missing required field "AsyncTask.biz_id"`)}
	}
	if _, ok := atc.mutation.TaskData(); !ok {
		return &ValidationError{Name: "task_data", err: errors.New(`ent: missing required field "AsyncTask.task_data"`)}
	}
	if _, ok := atc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "AsyncTask.state"`)}
	}
	if _, ok := atc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AsyncTask.created_at"`)}
	}
	if _, ok := atc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AsyncTask.updated_at"`)}
	}
	return nil
}

func (atc *AsyncTaskCreate) sqlSave(ctx context.Context) (*AsyncTask, error) {
	if err := atc.check(); err != nil {
		return nil, err
	}
	_node, _spec := atc.createSpec()
	if err := sqlgraph.CreateNode(ctx, atc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	atc.mutation.id = &_node.ID
	atc.mutation.done = true
	return _node, nil
}

func (atc *AsyncTaskCreate) createSpec() (*AsyncTask, *sqlgraph.CreateSpec) {
	var (
		_node = &AsyncTask{config: atc.config}
		_spec = sqlgraph.NewCreateSpec(asynctask.Table, sqlgraph.NewFieldSpec(asynctask.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = atc.conflict
	if id, ok := atc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := atc.mutation.TaskID(); ok {
		_spec.SetField(asynctask.FieldTaskID, field.TypeString, value)
		_node.TaskID = value
	}
	if value, ok := atc.mutation.TaskType(); ok {
		_spec.SetField(asynctask.FieldTaskType, field.TypeString, value)
		_node.TaskType = value
	}
	if value, ok := atc.mutation.TaskGroup(); ok {
		_spec.SetField(asynctask.FieldTaskGroup, field.TypeString, value)
		_node.TaskGroup = value
	}
	if value, ok := atc.mutation.TaskName(); ok {
		_spec.SetField(asynctask.FieldTaskName, field.TypeString, value)
		_node.TaskName = value
	}
	if value, ok := atc.mutation.BizID(); ok {
		_spec.SetField(asynctask.FieldBizID, field.TypeString, value)
		_node.BizID = value
	}
	if value, ok := atc.mutation.TaskData(); ok {
		_spec.SetField(asynctask.FieldTaskData, field.TypeString, value)
		_node.TaskData = value
	}
	if value, ok := atc.mutation.State(); ok {
		_spec.SetField(asynctask.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := atc.mutation.CreatedAt(); ok {
		_spec.SetField(asynctask.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := atc.mutation.UpdatedAt(); ok {
		_spec.SetField(asynctask.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AsyncTask.Create().
//		SetTaskID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AsyncTaskUpsert) {
//			SetTaskID(v+v).
//		}).
//		Exec(ctx)
func (atc *AsyncTaskCreate) OnConflict(opts ...sql.ConflictOption) *AsyncTaskUpsertOne {
	atc.conflict = opts
	return &AsyncTaskUpsertOne{
		create: atc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AsyncTask.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (atc *AsyncTaskCreate) OnConflictColumns(columns ...string) *AsyncTaskUpsertOne {
	atc.conflict = append(atc.conflict, sql.ConflictColumns(columns...))
	return &AsyncTaskUpsertOne{
		create: atc,
	}
}

type (
	// AsyncTaskUpsertOne is the builder for "upsert"-ing
	//  one AsyncTask node.
	AsyncTaskUpsertOne struct {
		create *AsyncTaskCreate
	}

	// AsyncTaskUpsert is the "OnConflict" setter.
	AsyncTaskUpsert struct {
		*sql.UpdateSet
	}
)

// SetTaskID sets the "task_id" field.
func (u *AsyncTaskUpsert) SetTaskID(v string) *AsyncTaskUpsert {
	u.Set(asynctask.FieldTaskID, v)
	return u
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *AsyncTaskUpsert) UpdateTaskID() *AsyncTaskUpsert {
	u.SetExcluded(asynctask.FieldTaskID)
	return u
}

// SetTaskType sets the "task_type" field.
func (u *AsyncTaskUpsert) SetTaskType(v string) *AsyncTaskUpsert {
	u.Set(asynctask.FieldTaskType, v)
	return u
}

// UpdateTaskType sets the "task_type" field to the value that was provided on create.
func (u *AsyncTaskUpsert) UpdateTaskType() *AsyncTaskUpsert {
	u.SetExcluded(asynctask.FieldTaskType)
	return u
}

// SetTaskGroup sets the "task_group" field.
func (u *AsyncTaskUpsert) SetTaskGroup(v string) *AsyncTaskUpsert {
	u.Set(asynctask.FieldTaskGroup, v)
	return u
}

// UpdateTaskGroup sets the "task_group" field to the value that was provided on create.
func (u *AsyncTaskUpsert) UpdateTaskGroup() *AsyncTaskUpsert {
	u.SetExcluded(asynctask.FieldTaskGroup)
	return u
}

// SetTaskName sets the "task_name" field.
func (u *AsyncTaskUpsert) SetTaskName(v string) *AsyncTaskUpsert {
	u.Set(asynctask.FieldTaskName, v)
	return u
}

// UpdateTaskName sets the "task_name" field to the value that was provided on create.
func (u *AsyncTaskUpsert) UpdateTaskName() *AsyncTaskUpsert {
	u.SetExcluded(asynctask.FieldTaskName)
	return u
}

// SetBizID sets the "biz_id" field.
func (u *AsyncTaskUpsert) SetBizID(v string) *AsyncTaskUpsert {
	u.Set(asynctask.FieldBizID, v)
	return u
}

// UpdateBizID sets the "biz_id" field to the value that was provided on create.
func (u *AsyncTaskUpsert) UpdateBizID() *AsyncTaskUpsert {
	u.SetExcluded(asynctask.FieldBizID)
	return u
}

// SetTaskData sets the "task_data" field.
func (u *AsyncTaskUpsert) SetTaskData(v string) *AsyncTaskUpsert {
	u.Set(asynctask.FieldTaskData, v)
	return u
}

// UpdateTaskData sets the "task_data" field to the value that was provided on create.
func (u *AsyncTaskUpsert) UpdateTaskData() *AsyncTaskUpsert {
	u.SetExcluded(asynctask.FieldTaskData)
	return u
}

// SetState sets the "state" field.
func (u *AsyncTaskUpsert) SetState(v string) *AsyncTaskUpsert {
	u.Set(asynctask.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *AsyncTaskUpsert) UpdateState() *AsyncTaskUpsert {
	u.SetExcluded(asynctask.FieldState)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AsyncTaskUpsert) SetCreatedAt(v time.Time) *AsyncTaskUpsert {
	u.Set(asynctask.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AsyncTaskUpsert) UpdateCreatedAt() *AsyncTaskUpsert {
	u.SetExcluded(asynctask.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AsyncTaskUpsert) SetUpdatedAt(v time.Time) *AsyncTaskUpsert {
	u.Set(asynctask.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AsyncTaskUpsert) UpdateUpdatedAt() *AsyncTaskUpsert {
	u.SetExcluded(asynctask.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AsyncTask.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(asynctask.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AsyncTaskUpsertOne) UpdateNewValues() *AsyncTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(asynctask.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AsyncTask.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AsyncTaskUpsertOne) Ignore() *AsyncTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AsyncTaskUpsertOne) DoNothing() *AsyncTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AsyncTaskCreate.OnConflict
// documentation for more info.
func (u *AsyncTaskUpsertOne) Update(set func(*AsyncTaskUpsert)) *AsyncTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AsyncTaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetTaskID sets the "task_id" field.
func (u *AsyncTaskUpsertOne) SetTaskID(v string) *AsyncTaskUpsertOne {
	return u.Update(func(s *AsyncTaskUpsert) {
		s.SetTaskID(v)
	})
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *AsyncTaskUpsertOne) UpdateTaskID() *AsyncTaskUpsertOne {
	return u.Update(func(s *AsyncTaskUpsert) {
		s.UpdateTaskID()
	})
}

// SetTaskType sets the "task_type" field.
func (u *AsyncTaskUpsertOne) SetTaskType(v string) *AsyncTaskUpsertOne {
	return u.Update(func(s *AsyncTaskUpsert) {
		s.SetTaskType(v)
	})
}

// UpdateTaskType sets the "task_type" field to the value that was provided on create.
func (u *AsyncTaskUpsertOne) UpdateTaskType() *AsyncTaskUpsertOne {
	return u.Update(func(s *AsyncTaskUpsert) {
		s.UpdateTaskType()
	})
}

// SetTaskGroup sets the "task_group" field.
func (u *AsyncTaskUpsertOne) SetTaskGroup(v string) *AsyncTaskUpsertOne {
	return u.Update(func(s *AsyncTaskUpsert) {
		s.SetTaskGroup(v)
	})
}

// UpdateTaskGroup sets the "task_group" field to the value that was provided on create.
func (u *AsyncTaskUpsertOne) UpdateTaskGroup() *AsyncTaskUpsertOne {
	return u.Update(func(s *AsyncTaskUpsert) {
		s.UpdateTaskGroup()
	})
}

// SetTaskName sets the "task_name" field.
func (u *AsyncTaskUpsertOne) SetTaskName(v string) *AsyncTaskUpsertOne {
	return u.Update(func(s *AsyncTaskUpsert) {
		s.SetTaskName(v)
	})
}

// UpdateTaskName sets the "task_name" field to the value that was provided on create.
func (u *AsyncTaskUpsertOne) UpdateTaskName() *AsyncTaskUpsertOne {
	return u.Update(func(s *AsyncTaskUpsert) {
		s.UpdateTaskName()
	})
}

// SetBizID sets the "biz_id" field.
func (u *AsyncTaskUpsertOne) SetBizID(v string) *AsyncTaskUpsertOne {
	return u.Update(func(s *AsyncTaskUpsert) {
		s.SetBizID(v)
	})
}

// UpdateBizID sets the "biz_id" field to the value that was provided on create.
func (u *AsyncTaskUpsertOne) UpdateBizID() *AsyncTaskUpsertOne {
	return u.Update(func(s *AsyncTaskUpsert) {
		s.UpdateBizID()
	})
}

// SetTaskData sets the "task_data" field.
func (u *AsyncTaskUpsertOne) SetTaskData(v string) *AsyncTaskUpsertOne {
	return u.Update(func(s *AsyncTaskUpsert) {
		s.SetTaskData(v)
	})
}

// UpdateTaskData sets the "task_data" field to the value that was provided on create.
func (u *AsyncTaskUpsertOne) UpdateTaskData() *AsyncTaskUpsertOne {
	return u.Update(func(s *AsyncTaskUpsert) {
		s.UpdateTaskData()
	})
}

// SetState sets the "state" field.
func (u *AsyncTaskUpsertOne) SetState(v string) *AsyncTaskUpsertOne {
	return u.Update(func(s *AsyncTaskUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *AsyncTaskUpsertOne) UpdateState() *AsyncTaskUpsertOne {
	return u.Update(func(s *AsyncTaskUpsert) {
		s.UpdateState()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *AsyncTaskUpsertOne) SetCreatedAt(v time.Time) *AsyncTaskUpsertOne {
	return u.Update(func(s *AsyncTaskUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AsyncTaskUpsertOne) UpdateCreatedAt() *AsyncTaskUpsertOne {
	return u.Update(func(s *AsyncTaskUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AsyncTaskUpsertOne) SetUpdatedAt(v time.Time) *AsyncTaskUpsertOne {
	return u.Update(func(s *AsyncTaskUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AsyncTaskUpsertOne) UpdateUpdatedAt() *AsyncTaskUpsertOne {
	return u.Update(func(s *AsyncTaskUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *AsyncTaskUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AsyncTaskCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AsyncTaskUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AsyncTaskUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AsyncTaskUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AsyncTaskCreateBulk is the builder for creating many AsyncTask entities in bulk.
type AsyncTaskCreateBulk struct {
	config
	err      error
	builders []*AsyncTaskCreate
	conflict []sql.ConflictOption
}

// Save creates the AsyncTask entities in the database.
func (atcb *AsyncTaskCreateBulk) Save(ctx context.Context) ([]*AsyncTask, error) {
	if atcb.err != nil {
		return nil, atcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(atcb.builders))
	nodes := make([]*AsyncTask, len(atcb.builders))
	mutators := make([]Mutator, len(atcb.builders))
	for i := range atcb.builders {
		func(i int, root context.Context) {
			builder := atcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AsyncTaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, atcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = atcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, atcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, atcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (atcb *AsyncTaskCreateBulk) SaveX(ctx context.Context) []*AsyncTask {
	v, err := atcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atcb *AsyncTaskCreateBulk) Exec(ctx context.Context) error {
	_, err := atcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atcb *AsyncTaskCreateBulk) ExecX(ctx context.Context) {
	if err := atcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AsyncTask.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AsyncTaskUpsert) {
//			SetTaskID(v+v).
//		}).
//		Exec(ctx)
func (atcb *AsyncTaskCreateBulk) OnConflict(opts ...sql.ConflictOption) *AsyncTaskUpsertBulk {
	atcb.conflict = opts
	return &AsyncTaskUpsertBulk{
		create: atcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AsyncTask.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (atcb *AsyncTaskCreateBulk) OnConflictColumns(columns ...string) *AsyncTaskUpsertBulk {
	atcb.conflict = append(atcb.conflict, sql.ConflictColumns(columns...))
	return &AsyncTaskUpsertBulk{
		create: atcb,
	}
}

// AsyncTaskUpsertBulk is the builder for "upsert"-ing
// a bulk of AsyncTask nodes.
type AsyncTaskUpsertBulk struct {
	create *AsyncTaskCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AsyncTask.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(asynctask.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AsyncTaskUpsertBulk) UpdateNewValues() *AsyncTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(asynctask.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AsyncTask.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AsyncTaskUpsertBulk) Ignore() *AsyncTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AsyncTaskUpsertBulk) DoNothing() *AsyncTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AsyncTaskCreateBulk.OnConflict
// documentation for more info.
func (u *AsyncTaskUpsertBulk) Update(set func(*AsyncTaskUpsert)) *AsyncTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AsyncTaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetTaskID sets the "task_id" field.
func (u *AsyncTaskUpsertBulk) SetTaskID(v string) *AsyncTaskUpsertBulk {
	return u.Update(func(s *AsyncTaskUpsert) {
		s.SetTaskID(v)
	})
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *AsyncTaskUpsertBulk) UpdateTaskID() *AsyncTaskUpsertBulk {
	return u.Update(func(s *AsyncTaskUpsert) {
		s.UpdateTaskID()
	})
}

// SetTaskType sets the "task_type" field.
func (u *AsyncTaskUpsertBulk) SetTaskType(v string) *AsyncTaskUpsertBulk {
	return u.Update(func(s *AsyncTaskUpsert) {
		s.SetTaskType(v)
	})
}

// UpdateTaskType sets the "task_type" field to the value that was provided on create.
func (u *AsyncTaskUpsertBulk) UpdateTaskType() *AsyncTaskUpsertBulk {
	return u.Update(func(s *AsyncTaskUpsert) {
		s.UpdateTaskType()
	})
}

// SetTaskGroup sets the "task_group" field.
func (u *AsyncTaskUpsertBulk) SetTaskGroup(v string) *AsyncTaskUpsertBulk {
	return u.Update(func(s *AsyncTaskUpsert) {
		s.SetTaskGroup(v)
	})
}

// UpdateTaskGroup sets the "task_group" field to the value that was provided on create.
func (u *AsyncTaskUpsertBulk) UpdateTaskGroup() *AsyncTaskUpsertBulk {
	return u.Update(func(s *AsyncTaskUpsert) {
		s.UpdateTaskGroup()
	})
}

// SetTaskName sets the "task_name" field.
func (u *AsyncTaskUpsertBulk) SetTaskName(v string) *AsyncTaskUpsertBulk {
	return u.Update(func(s *AsyncTaskUpsert) {
		s.SetTaskName(v)
	})
}

// UpdateTaskName sets the "task_name" field to the value that was provided on create.
func (u *AsyncTaskUpsertBulk) UpdateTaskName() *AsyncTaskUpsertBulk {
	return u.Update(func(s *AsyncTaskUpsert) {
		s.UpdateTaskName()
	})
}

// SetBizID sets the "biz_id" field.
func (u *AsyncTaskUpsertBulk) SetBizID(v string) *AsyncTaskUpsertBulk {
	return u.Update(func(s *AsyncTaskUpsert) {
		s.SetBizID(v)
	})
}

// UpdateBizID sets the "biz_id" field to the value that was provided on create.
func (u *AsyncTaskUpsertBulk) UpdateBizID() *AsyncTaskUpsertBulk {
	return u.Update(func(s *AsyncTaskUpsert) {
		s.UpdateBizID()
	})
}

// SetTaskData sets the "task_data" field.
func (u *AsyncTaskUpsertBulk) SetTaskData(v string) *AsyncTaskUpsertBulk {
	return u.Update(func(s *AsyncTaskUpsert) {
		s.SetTaskData(v)
	})
}

// UpdateTaskData sets the "task_data" field to the value that was provided on create.
func (u *AsyncTaskUpsertBulk) UpdateTaskData() *AsyncTaskUpsertBulk {
	return u.Update(func(s *AsyncTaskUpsert) {
		s.UpdateTaskData()
	})
}

// SetState sets the "state" field.
func (u *AsyncTaskUpsertBulk) SetState(v string) *AsyncTaskUpsertBulk {
	return u.Update(func(s *AsyncTaskUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *AsyncTaskUpsertBulk) UpdateState() *AsyncTaskUpsertBulk {
	return u.Update(func(s *AsyncTaskUpsert) {
		s.UpdateState()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *AsyncTaskUpsertBulk) SetCreatedAt(v time.Time) *AsyncTaskUpsertBulk {
	return u.Update(func(s *AsyncTaskUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AsyncTaskUpsertBulk) UpdateCreatedAt() *AsyncTaskUpsertBulk {
	return u.Update(func(s *AsyncTaskUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AsyncTaskUpsertBulk) SetUpdatedAt(v time.Time) *AsyncTaskUpsertBulk {
	return u.Update(func(s *AsyncTaskUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AsyncTaskUpsertBulk) UpdateUpdatedAt() *AsyncTaskUpsertBulk {
	return u.Update(func(s *AsyncTaskUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *AsyncTaskUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AsyncTaskCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AsyncTaskCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AsyncTaskUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
