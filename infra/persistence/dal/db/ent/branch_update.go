// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"purchase/infra/persistence/dal/db/ent/branch"
	"purchase/infra/persistence/dal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BranchUpdate is the builder for updating Branch entities.
type BranchUpdate struct {
	config
	hooks    []Hook
	mutation *BranchMutation
}

// Where appends a list predicates to the BranchUpdate builder.
func (bu *BranchUpdate) Where(ps ...predicate.Branch) *BranchUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetBranchID sets the "branch_id" field.
func (bu *BranchUpdate) SetBranchID(s string) *BranchUpdate {
	bu.mutation.SetBranchID(s)
	return bu
}

// SetNillableBranchID sets the "branch_id" field if the given value is not nil.
func (bu *BranchUpdate) SetNillableBranchID(s *string) *BranchUpdate {
	if s != nil {
		bu.SetBranchID(*s)
	}
	return bu
}

// SetTransID sets the "trans_id" field.
func (bu *BranchUpdate) SetTransID(s string) *BranchUpdate {
	bu.mutation.SetTransID(s)
	return bu
}

// SetNillableTransID sets the "trans_id" field if the given value is not nil.
func (bu *BranchUpdate) SetNillableTransID(s *string) *BranchUpdate {
	if s != nil {
		bu.SetTransID(*s)
	}
	return bu
}

// SetType sets the "type" field.
func (bu *BranchUpdate) SetType(s string) *BranchUpdate {
	bu.mutation.SetType(s)
	return bu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (bu *BranchUpdate) SetNillableType(s *string) *BranchUpdate {
	if s != nil {
		bu.SetType(*s)
	}
	return bu
}

// SetState sets the "state" field.
func (bu *BranchUpdate) SetState(s string) *BranchUpdate {
	bu.mutation.SetState(s)
	return bu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (bu *BranchUpdate) SetNillableState(s *string) *BranchUpdate {
	if s != nil {
		bu.SetState(*s)
	}
	return bu
}

// SetName sets the "name" field.
func (bu *BranchUpdate) SetName(s string) *BranchUpdate {
	bu.mutation.SetName(s)
	return bu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bu *BranchUpdate) SetNillableName(s *string) *BranchUpdate {
	if s != nil {
		bu.SetName(*s)
	}
	return bu
}

// SetAction sets the "action" field.
func (bu *BranchUpdate) SetAction(s string) *BranchUpdate {
	bu.mutation.SetAction(s)
	return bu
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (bu *BranchUpdate) SetNillableAction(s *string) *BranchUpdate {
	if s != nil {
		bu.SetAction(*s)
	}
	return bu
}

// SetCompensate sets the "compensate" field.
func (bu *BranchUpdate) SetCompensate(s string) *BranchUpdate {
	bu.mutation.SetCompensate(s)
	return bu
}

// SetNillableCompensate sets the "compensate" field if the given value is not nil.
func (bu *BranchUpdate) SetNillableCompensate(s *string) *BranchUpdate {
	if s != nil {
		bu.SetCompensate(*s)
	}
	return bu
}

// SetPayload sets the "payload" field.
func (bu *BranchUpdate) SetPayload(s string) *BranchUpdate {
	bu.mutation.SetPayload(s)
	return bu
}

// SetNillablePayload sets the "payload" field if the given value is not nil.
func (bu *BranchUpdate) SetNillablePayload(s *string) *BranchUpdate {
	if s != nil {
		bu.SetPayload(*s)
	}
	return bu
}

// SetActionDepend sets the "action_depend" field.
func (bu *BranchUpdate) SetActionDepend(s string) *BranchUpdate {
	bu.mutation.SetActionDepend(s)
	return bu
}

// SetNillableActionDepend sets the "action_depend" field if the given value is not nil.
func (bu *BranchUpdate) SetNillableActionDepend(s *string) *BranchUpdate {
	if s != nil {
		bu.SetActionDepend(*s)
	}
	return bu
}

// SetCompensateDepend sets the "compensate_depend" field.
func (bu *BranchUpdate) SetCompensateDepend(s string) *BranchUpdate {
	bu.mutation.SetCompensateDepend(s)
	return bu
}

// SetNillableCompensateDepend sets the "compensate_depend" field if the given value is not nil.
func (bu *BranchUpdate) SetNillableCompensateDepend(s *string) *BranchUpdate {
	if s != nil {
		bu.SetCompensateDepend(*s)
	}
	return bu
}

// SetFinishedAt sets the "finished_at" field.
func (bu *BranchUpdate) SetFinishedAt(t time.Time) *BranchUpdate {
	bu.mutation.SetFinishedAt(t)
	return bu
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (bu *BranchUpdate) SetNillableFinishedAt(t *time.Time) *BranchUpdate {
	if t != nil {
		bu.SetFinishedAt(*t)
	}
	return bu
}

// SetIsDead sets the "is_dead" field.
func (bu *BranchUpdate) SetIsDead(b bool) *BranchUpdate {
	bu.mutation.SetIsDead(b)
	return bu
}

// SetNillableIsDead sets the "is_dead" field if the given value is not nil.
func (bu *BranchUpdate) SetNillableIsDead(b *bool) *BranchUpdate {
	if b != nil {
		bu.SetIsDead(*b)
	}
	return bu
}

// SetCreatedAt sets the "created_at" field.
func (bu *BranchUpdate) SetCreatedAt(t time.Time) *BranchUpdate {
	bu.mutation.SetCreatedAt(t)
	return bu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bu *BranchUpdate) SetNillableCreatedAt(t *time.Time) *BranchUpdate {
	if t != nil {
		bu.SetCreatedAt(*t)
	}
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BranchUpdate) SetUpdatedAt(t time.Time) *BranchUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bu *BranchUpdate) SetNillableUpdatedAt(t *time.Time) *BranchUpdate {
	if t != nil {
		bu.SetUpdatedAt(*t)
	}
	return bu
}

// SetUpdatedBy sets the "updated_by" field.
func (bu *BranchUpdate) SetUpdatedBy(s string) *BranchUpdate {
	bu.mutation.SetUpdatedBy(s)
	return bu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (bu *BranchUpdate) SetNillableUpdatedBy(s *string) *BranchUpdate {
	if s != nil {
		bu.SetUpdatedBy(*s)
	}
	return bu
}

// SetCreatedBy sets the "created_by" field.
func (bu *BranchUpdate) SetCreatedBy(s string) *BranchUpdate {
	bu.mutation.SetCreatedBy(s)
	return bu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (bu *BranchUpdate) SetNillableCreatedBy(s *string) *BranchUpdate {
	if s != nil {
		bu.SetCreatedBy(*s)
	}
	return bu
}

// Mutation returns the BranchMutation object of the builder.
func (bu *BranchUpdate) Mutation() *BranchMutation {
	return bu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BranchUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BranchUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BranchUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BranchUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bu *BranchUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(branch.Table, branch.Columns, sqlgraph.NewFieldSpec(branch.FieldID, field.TypeInt))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.BranchID(); ok {
		_spec.SetField(branch.FieldBranchID, field.TypeString, value)
	}
	if value, ok := bu.mutation.TransID(); ok {
		_spec.SetField(branch.FieldTransID, field.TypeString, value)
	}
	if value, ok := bu.mutation.GetType(); ok {
		_spec.SetField(branch.FieldType, field.TypeString, value)
	}
	if value, ok := bu.mutation.State(); ok {
		_spec.SetField(branch.FieldState, field.TypeString, value)
	}
	if value, ok := bu.mutation.Name(); ok {
		_spec.SetField(branch.FieldName, field.TypeString, value)
	}
	if value, ok := bu.mutation.Action(); ok {
		_spec.SetField(branch.FieldAction, field.TypeString, value)
	}
	if value, ok := bu.mutation.Compensate(); ok {
		_spec.SetField(branch.FieldCompensate, field.TypeString, value)
	}
	if value, ok := bu.mutation.Payload(); ok {
		_spec.SetField(branch.FieldPayload, field.TypeString, value)
	}
	if value, ok := bu.mutation.ActionDepend(); ok {
		_spec.SetField(branch.FieldActionDepend, field.TypeString, value)
	}
	if value, ok := bu.mutation.CompensateDepend(); ok {
		_spec.SetField(branch.FieldCompensateDepend, field.TypeString, value)
	}
	if value, ok := bu.mutation.FinishedAt(); ok {
		_spec.SetField(branch.FieldFinishedAt, field.TypeTime, value)
	}
	if value, ok := bu.mutation.IsDead(); ok {
		_spec.SetField(branch.FieldIsDead, field.TypeBool, value)
	}
	if value, ok := bu.mutation.CreatedAt(); ok {
		_spec.SetField(branch.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.SetField(branch.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bu.mutation.UpdatedBy(); ok {
		_spec.SetField(branch.FieldUpdatedBy, field.TypeString, value)
	}
	if value, ok := bu.mutation.CreatedBy(); ok {
		_spec.SetField(branch.FieldCreatedBy, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{branch.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BranchUpdateOne is the builder for updating a single Branch entity.
type BranchUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BranchMutation
}

// SetBranchID sets the "branch_id" field.
func (buo *BranchUpdateOne) SetBranchID(s string) *BranchUpdateOne {
	buo.mutation.SetBranchID(s)
	return buo
}

// SetNillableBranchID sets the "branch_id" field if the given value is not nil.
func (buo *BranchUpdateOne) SetNillableBranchID(s *string) *BranchUpdateOne {
	if s != nil {
		buo.SetBranchID(*s)
	}
	return buo
}

// SetTransID sets the "trans_id" field.
func (buo *BranchUpdateOne) SetTransID(s string) *BranchUpdateOne {
	buo.mutation.SetTransID(s)
	return buo
}

// SetNillableTransID sets the "trans_id" field if the given value is not nil.
func (buo *BranchUpdateOne) SetNillableTransID(s *string) *BranchUpdateOne {
	if s != nil {
		buo.SetTransID(*s)
	}
	return buo
}

// SetType sets the "type" field.
func (buo *BranchUpdateOne) SetType(s string) *BranchUpdateOne {
	buo.mutation.SetType(s)
	return buo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (buo *BranchUpdateOne) SetNillableType(s *string) *BranchUpdateOne {
	if s != nil {
		buo.SetType(*s)
	}
	return buo
}

// SetState sets the "state" field.
func (buo *BranchUpdateOne) SetState(s string) *BranchUpdateOne {
	buo.mutation.SetState(s)
	return buo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (buo *BranchUpdateOne) SetNillableState(s *string) *BranchUpdateOne {
	if s != nil {
		buo.SetState(*s)
	}
	return buo
}

// SetName sets the "name" field.
func (buo *BranchUpdateOne) SetName(s string) *BranchUpdateOne {
	buo.mutation.SetName(s)
	return buo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (buo *BranchUpdateOne) SetNillableName(s *string) *BranchUpdateOne {
	if s != nil {
		buo.SetName(*s)
	}
	return buo
}

// SetAction sets the "action" field.
func (buo *BranchUpdateOne) SetAction(s string) *BranchUpdateOne {
	buo.mutation.SetAction(s)
	return buo
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (buo *BranchUpdateOne) SetNillableAction(s *string) *BranchUpdateOne {
	if s != nil {
		buo.SetAction(*s)
	}
	return buo
}

// SetCompensate sets the "compensate" field.
func (buo *BranchUpdateOne) SetCompensate(s string) *BranchUpdateOne {
	buo.mutation.SetCompensate(s)
	return buo
}

// SetNillableCompensate sets the "compensate" field if the given value is not nil.
func (buo *BranchUpdateOne) SetNillableCompensate(s *string) *BranchUpdateOne {
	if s != nil {
		buo.SetCompensate(*s)
	}
	return buo
}

// SetPayload sets the "payload" field.
func (buo *BranchUpdateOne) SetPayload(s string) *BranchUpdateOne {
	buo.mutation.SetPayload(s)
	return buo
}

// SetNillablePayload sets the "payload" field if the given value is not nil.
func (buo *BranchUpdateOne) SetNillablePayload(s *string) *BranchUpdateOne {
	if s != nil {
		buo.SetPayload(*s)
	}
	return buo
}

// SetActionDepend sets the "action_depend" field.
func (buo *BranchUpdateOne) SetActionDepend(s string) *BranchUpdateOne {
	buo.mutation.SetActionDepend(s)
	return buo
}

// SetNillableActionDepend sets the "action_depend" field if the given value is not nil.
func (buo *BranchUpdateOne) SetNillableActionDepend(s *string) *BranchUpdateOne {
	if s != nil {
		buo.SetActionDepend(*s)
	}
	return buo
}

// SetCompensateDepend sets the "compensate_depend" field.
func (buo *BranchUpdateOne) SetCompensateDepend(s string) *BranchUpdateOne {
	buo.mutation.SetCompensateDepend(s)
	return buo
}

// SetNillableCompensateDepend sets the "compensate_depend" field if the given value is not nil.
func (buo *BranchUpdateOne) SetNillableCompensateDepend(s *string) *BranchUpdateOne {
	if s != nil {
		buo.SetCompensateDepend(*s)
	}
	return buo
}

// SetFinishedAt sets the "finished_at" field.
func (buo *BranchUpdateOne) SetFinishedAt(t time.Time) *BranchUpdateOne {
	buo.mutation.SetFinishedAt(t)
	return buo
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (buo *BranchUpdateOne) SetNillableFinishedAt(t *time.Time) *BranchUpdateOne {
	if t != nil {
		buo.SetFinishedAt(*t)
	}
	return buo
}

// SetIsDead sets the "is_dead" field.
func (buo *BranchUpdateOne) SetIsDead(b bool) *BranchUpdateOne {
	buo.mutation.SetIsDead(b)
	return buo
}

// SetNillableIsDead sets the "is_dead" field if the given value is not nil.
func (buo *BranchUpdateOne) SetNillableIsDead(b *bool) *BranchUpdateOne {
	if b != nil {
		buo.SetIsDead(*b)
	}
	return buo
}

// SetCreatedAt sets the "created_at" field.
func (buo *BranchUpdateOne) SetCreatedAt(t time.Time) *BranchUpdateOne {
	buo.mutation.SetCreatedAt(t)
	return buo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (buo *BranchUpdateOne) SetNillableCreatedAt(t *time.Time) *BranchUpdateOne {
	if t != nil {
		buo.SetCreatedAt(*t)
	}
	return buo
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BranchUpdateOne) SetUpdatedAt(t time.Time) *BranchUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (buo *BranchUpdateOne) SetNillableUpdatedAt(t *time.Time) *BranchUpdateOne {
	if t != nil {
		buo.SetUpdatedAt(*t)
	}
	return buo
}

// SetUpdatedBy sets the "updated_by" field.
func (buo *BranchUpdateOne) SetUpdatedBy(s string) *BranchUpdateOne {
	buo.mutation.SetUpdatedBy(s)
	return buo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (buo *BranchUpdateOne) SetNillableUpdatedBy(s *string) *BranchUpdateOne {
	if s != nil {
		buo.SetUpdatedBy(*s)
	}
	return buo
}

// SetCreatedBy sets the "created_by" field.
func (buo *BranchUpdateOne) SetCreatedBy(s string) *BranchUpdateOne {
	buo.mutation.SetCreatedBy(s)
	return buo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (buo *BranchUpdateOne) SetNillableCreatedBy(s *string) *BranchUpdateOne {
	if s != nil {
		buo.SetCreatedBy(*s)
	}
	return buo
}

// Mutation returns the BranchMutation object of the builder.
func (buo *BranchUpdateOne) Mutation() *BranchMutation {
	return buo.mutation
}

// Where appends a list predicates to the BranchUpdate builder.
func (buo *BranchUpdateOne) Where(ps ...predicate.Branch) *BranchUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BranchUpdateOne) Select(field string, fields ...string) *BranchUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Branch entity.
func (buo *BranchUpdateOne) Save(ctx context.Context) (*Branch, error) {
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BranchUpdateOne) SaveX(ctx context.Context) *Branch {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BranchUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BranchUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (buo *BranchUpdateOne) sqlSave(ctx context.Context) (_node *Branch, err error) {
	_spec := sqlgraph.NewUpdateSpec(branch.Table, branch.Columns, sqlgraph.NewFieldSpec(branch.FieldID, field.TypeInt))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Branch.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, branch.FieldID)
		for _, f := range fields {
			if !branch.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != branch.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.BranchID(); ok {
		_spec.SetField(branch.FieldBranchID, field.TypeString, value)
	}
	if value, ok := buo.mutation.TransID(); ok {
		_spec.SetField(branch.FieldTransID, field.TypeString, value)
	}
	if value, ok := buo.mutation.GetType(); ok {
		_spec.SetField(branch.FieldType, field.TypeString, value)
	}
	if value, ok := buo.mutation.State(); ok {
		_spec.SetField(branch.FieldState, field.TypeString, value)
	}
	if value, ok := buo.mutation.Name(); ok {
		_spec.SetField(branch.FieldName, field.TypeString, value)
	}
	if value, ok := buo.mutation.Action(); ok {
		_spec.SetField(branch.FieldAction, field.TypeString, value)
	}
	if value, ok := buo.mutation.Compensate(); ok {
		_spec.SetField(branch.FieldCompensate, field.TypeString, value)
	}
	if value, ok := buo.mutation.Payload(); ok {
		_spec.SetField(branch.FieldPayload, field.TypeString, value)
	}
	if value, ok := buo.mutation.ActionDepend(); ok {
		_spec.SetField(branch.FieldActionDepend, field.TypeString, value)
	}
	if value, ok := buo.mutation.CompensateDepend(); ok {
		_spec.SetField(branch.FieldCompensateDepend, field.TypeString, value)
	}
	if value, ok := buo.mutation.FinishedAt(); ok {
		_spec.SetField(branch.FieldFinishedAt, field.TypeTime, value)
	}
	if value, ok := buo.mutation.IsDead(); ok {
		_spec.SetField(branch.FieldIsDead, field.TypeBool, value)
	}
	if value, ok := buo.mutation.CreatedAt(); ok {
		_spec.SetField(branch.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.SetField(branch.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := buo.mutation.UpdatedBy(); ok {
		_spec.SetField(branch.FieldUpdatedBy, field.TypeString, value)
	}
	if value, ok := buo.mutation.CreatedBy(); ok {
		_spec.SetField(branch.FieldCreatedBy, field.TypeString, value)
	}
	_node = &Branch{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{branch.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
