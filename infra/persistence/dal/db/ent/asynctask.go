// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"purchase/infra/persistence/dal/db/ent/asynctask"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// AsyncTask is the model entity for the AsyncTask schema.
type AsyncTask struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// TaskID holds the value of the "task_id" field.
	TaskID string `json:"task_id,omitempty"`
	// TaskType holds the value of the "task_type" field.
	TaskType string `json:"task_type,omitempty"`
	// TaskName holds the value of the "task_name" field.
	TaskName string `json:"task_name,omitempty"`
	// TaskData holds the value of the "task_data" field.
	TaskData string `json:"task_data,omitempty"`
	// State holds the value of the "state" field.
	State string `json:"state,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AsyncTask) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case asynctask.FieldID:
			values[i] = new(sql.NullInt64)
		case asynctask.FieldTaskID, asynctask.FieldTaskType, asynctask.FieldTaskName, asynctask.FieldTaskData, asynctask.FieldState:
			values[i] = new(sql.NullString)
		case asynctask.FieldCreatedAt, asynctask.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AsyncTask fields.
func (at *AsyncTask) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case asynctask.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			at.ID = int64(value.Int64)
		case asynctask.FieldTaskID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field task_id", values[i])
			} else if value.Valid {
				at.TaskID = value.String
			}
		case asynctask.FieldTaskType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field task_type", values[i])
			} else if value.Valid {
				at.TaskType = value.String
			}
		case asynctask.FieldTaskName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field task_name", values[i])
			} else if value.Valid {
				at.TaskName = value.String
			}
		case asynctask.FieldTaskData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field task_data", values[i])
			} else if value.Valid {
				at.TaskData = value.String
			}
		case asynctask.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				at.State = value.String
			}
		case asynctask.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				at.CreatedAt = value.Time
			}
		case asynctask.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				at.UpdatedAt = value.Time
			}
		default:
			at.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AsyncTask.
// This includes values selected through modifiers, order, etc.
func (at *AsyncTask) Value(name string) (ent.Value, error) {
	return at.selectValues.Get(name)
}

// Update returns a builder for updating this AsyncTask.
// Note that you need to call AsyncTask.Unwrap() before calling this method if this AsyncTask
// was returned from a transaction, and the transaction was committed or rolled back.
func (at *AsyncTask) Update() *AsyncTaskUpdateOne {
	return NewAsyncTaskClient(at.config).UpdateOne(at)
}

// Unwrap unwraps the AsyncTask entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (at *AsyncTask) Unwrap() *AsyncTask {
	_tx, ok := at.config.driver.(*txDriver)
	if !ok {
		panic("ent: AsyncTask is not a transactional entity")
	}
	at.config.driver = _tx.drv
	return at
}

// String implements the fmt.Stringer.
func (at *AsyncTask) String() string {
	var builder strings.Builder
	builder.WriteString("AsyncTask(")
	builder.WriteString(fmt.Sprintf("id=%v, ", at.ID))
	builder.WriteString("task_id=")
	builder.WriteString(at.TaskID)
	builder.WriteString(", ")
	builder.WriteString("task_type=")
	builder.WriteString(at.TaskType)
	builder.WriteString(", ")
	builder.WriteString("task_name=")
	builder.WriteString(at.TaskName)
	builder.WriteString(", ")
	builder.WriteString("task_data=")
	builder.WriteString(at.TaskData)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(at.State)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(at.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(at.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AsyncTasks is a parsable slice of AsyncTask.
type AsyncTasks []*AsyncTask
