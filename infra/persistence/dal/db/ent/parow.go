// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"purchase/infra/persistence/dal/db/ent/parow"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PARow is the model entity for the PARow schema.
type PARow struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// HeadCode holds the value of the "head_code" field.
	HeadCode string `json:"head_code,omitempty"`
	// RowCode holds the value of the "row_code" field.
	RowCode string `json:"row_code,omitempty"`
	// GrnCount holds the value of the "grn_count" field.
	GrnCount int32 `json:"grn_count,omitempty"`
	// GrnAmount holds the value of the "grn_amount" field.
	GrnAmount string `json:"grn_amount,omitempty"`
	// PayAmount holds the value of the "pay_amount" field.
	PayAmount string `json:"pay_amount,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PARow) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case parow.FieldID, parow.FieldGrnCount:
			values[i] = new(sql.NullInt64)
		case parow.FieldHeadCode, parow.FieldRowCode, parow.FieldGrnAmount, parow.FieldPayAmount, parow.FieldDescription:
			values[i] = new(sql.NullString)
		case parow.FieldCreatedAt, parow.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PARow fields.
func (pr *PARow) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case parow.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int64(value.Int64)
		case parow.FieldHeadCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field head_code", values[i])
			} else if value.Valid {
				pr.HeadCode = value.String
			}
		case parow.FieldRowCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field row_code", values[i])
			} else if value.Valid {
				pr.RowCode = value.String
			}
		case parow.FieldGrnCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field grn_count", values[i])
			} else if value.Valid {
				pr.GrnCount = int32(value.Int64)
			}
		case parow.FieldGrnAmount:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field grn_amount", values[i])
			} else if value.Valid {
				pr.GrnAmount = value.String
			}
		case parow.FieldPayAmount:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pay_amount", values[i])
			} else if value.Valid {
				pr.PayAmount = value.String
			}
		case parow.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pr.Description = value.String
			}
		case parow.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case parow.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PARow.
// This includes values selected through modifiers, order, etc.
func (pr *PARow) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// Update returns a builder for updating this PARow.
// Note that you need to call PARow.Unwrap() before calling this method if this PARow
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *PARow) Update() *PARowUpdateOne {
	return NewPARowClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the PARow entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *PARow) Unwrap() *PARow {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: PARow is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *PARow) String() string {
	var builder strings.Builder
	builder.WriteString("PARow(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("head_code=")
	builder.WriteString(pr.HeadCode)
	builder.WriteString(", ")
	builder.WriteString("row_code=")
	builder.WriteString(pr.RowCode)
	builder.WriteString(", ")
	builder.WriteString("grn_count=")
	builder.WriteString(fmt.Sprintf("%v", pr.GrnCount))
	builder.WriteString(", ")
	builder.WriteString("grn_amount=")
	builder.WriteString(pr.GrnAmount)
	builder.WriteString(", ")
	builder.WriteString("pay_amount=")
	builder.WriteString(pr.PayAmount)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pr.Description)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PARows is a parsable slice of PARow.
type PARows []*PARow
