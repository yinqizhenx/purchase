// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"purchase/infra/persistence/dal/db/ent/asynctask"
	"purchase/infra/persistence/dal/db/ent/pahead"
	"purchase/infra/persistence/dal/db/ent/parow"
	"purchase/infra/persistence/dal/db/ent/predicate"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAsyncTask = "AsyncTask"
	TypePAHead    = "PAHead"
	TypePARow     = "PARow"
)

// AsyncTaskMutation represents an operation that mutates the AsyncTask nodes in the graph.
type AsyncTaskMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	task_id       *string
	task_type     *string
	task_name     *string
	task_data     *string
	state         *string
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*AsyncTask, error)
	predicates    []predicate.AsyncTask
}

var _ ent.Mutation = (*AsyncTaskMutation)(nil)

// asynctaskOption allows management of the mutation configuration using functional options.
type asynctaskOption func(*AsyncTaskMutation)

// newAsyncTaskMutation creates new mutation for the AsyncTask entity.
func newAsyncTaskMutation(c config, op Op, opts ...asynctaskOption) *AsyncTaskMutation {
	m := &AsyncTaskMutation{
		config:        c,
		op:            op,
		typ:           TypeAsyncTask,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAsyncTaskID sets the ID field of the mutation.
func withAsyncTaskID(id int64) asynctaskOption {
	return func(m *AsyncTaskMutation) {
		var (
			err   error
			once  sync.Once
			value *AsyncTask
		)
		m.oldValue = func(ctx context.Context) (*AsyncTask, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AsyncTask.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAsyncTask sets the old AsyncTask of the mutation.
func withAsyncTask(node *AsyncTask) asynctaskOption {
	return func(m *AsyncTaskMutation) {
		m.oldValue = func(context.Context) (*AsyncTask, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AsyncTaskMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AsyncTaskMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AsyncTask entities.
func (m *AsyncTaskMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AsyncTaskMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AsyncTaskMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AsyncTask.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTaskID sets the "task_id" field.
func (m *AsyncTaskMutation) SetTaskID(s string) {
	m.task_id = &s
}

// TaskID returns the value of the "task_id" field in the mutation.
func (m *AsyncTaskMutation) TaskID() (r string, exists bool) {
	v := m.task_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskID returns the old "task_id" field's value of the AsyncTask entity.
// If the AsyncTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AsyncTaskMutation) OldTaskID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskID: %w", err)
	}
	return oldValue.TaskID, nil
}

// ResetTaskID resets all changes to the "task_id" field.
func (m *AsyncTaskMutation) ResetTaskID() {
	m.task_id = nil
}

// SetTaskType sets the "task_type" field.
func (m *AsyncTaskMutation) SetTaskType(s string) {
	m.task_type = &s
}

// TaskType returns the value of the "task_type" field in the mutation.
func (m *AsyncTaskMutation) TaskType() (r string, exists bool) {
	v := m.task_type
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskType returns the old "task_type" field's value of the AsyncTask entity.
// If the AsyncTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AsyncTaskMutation) OldTaskType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskType: %w", err)
	}
	return oldValue.TaskType, nil
}

// ResetTaskType resets all changes to the "task_type" field.
func (m *AsyncTaskMutation) ResetTaskType() {
	m.task_type = nil
}

// SetTaskName sets the "task_name" field.
func (m *AsyncTaskMutation) SetTaskName(s string) {
	m.task_name = &s
}

// TaskName returns the value of the "task_name" field in the mutation.
func (m *AsyncTaskMutation) TaskName() (r string, exists bool) {
	v := m.task_name
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskName returns the old "task_name" field's value of the AsyncTask entity.
// If the AsyncTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AsyncTaskMutation) OldTaskName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskName: %w", err)
	}
	return oldValue.TaskName, nil
}

// ResetTaskName resets all changes to the "task_name" field.
func (m *AsyncTaskMutation) ResetTaskName() {
	m.task_name = nil
}

// SetTaskData sets the "task_data" field.
func (m *AsyncTaskMutation) SetTaskData(s string) {
	m.task_data = &s
}

// TaskData returns the value of the "task_data" field in the mutation.
func (m *AsyncTaskMutation) TaskData() (r string, exists bool) {
	v := m.task_data
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskData returns the old "task_data" field's value of the AsyncTask entity.
// If the AsyncTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AsyncTaskMutation) OldTaskData(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskData: %w", err)
	}
	return oldValue.TaskData, nil
}

// ResetTaskData resets all changes to the "task_data" field.
func (m *AsyncTaskMutation) ResetTaskData() {
	m.task_data = nil
}

// SetState sets the "state" field.
func (m *AsyncTaskMutation) SetState(s string) {
	m.state = &s
}

// State returns the value of the "state" field in the mutation.
func (m *AsyncTaskMutation) State() (r string, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the AsyncTask entity.
// If the AsyncTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AsyncTaskMutation) OldState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ResetState resets all changes to the "state" field.
func (m *AsyncTaskMutation) ResetState() {
	m.state = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *AsyncTaskMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AsyncTaskMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the AsyncTask entity.
// If the AsyncTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AsyncTaskMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AsyncTaskMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AsyncTaskMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AsyncTaskMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the AsyncTask entity.
// If the AsyncTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AsyncTaskMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AsyncTaskMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the AsyncTaskMutation builder.
func (m *AsyncTaskMutation) Where(ps ...predicate.AsyncTask) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AsyncTaskMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AsyncTaskMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AsyncTask, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AsyncTaskMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AsyncTaskMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AsyncTask).
func (m *AsyncTaskMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AsyncTaskMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.task_id != nil {
		fields = append(fields, asynctask.FieldTaskID)
	}
	if m.task_type != nil {
		fields = append(fields, asynctask.FieldTaskType)
	}
	if m.task_name != nil {
		fields = append(fields, asynctask.FieldTaskName)
	}
	if m.task_data != nil {
		fields = append(fields, asynctask.FieldTaskData)
	}
	if m.state != nil {
		fields = append(fields, asynctask.FieldState)
	}
	if m.created_at != nil {
		fields = append(fields, asynctask.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, asynctask.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AsyncTaskMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case asynctask.FieldTaskID:
		return m.TaskID()
	case asynctask.FieldTaskType:
		return m.TaskType()
	case asynctask.FieldTaskName:
		return m.TaskName()
	case asynctask.FieldTaskData:
		return m.TaskData()
	case asynctask.FieldState:
		return m.State()
	case asynctask.FieldCreatedAt:
		return m.CreatedAt()
	case asynctask.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AsyncTaskMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case asynctask.FieldTaskID:
		return m.OldTaskID(ctx)
	case asynctask.FieldTaskType:
		return m.OldTaskType(ctx)
	case asynctask.FieldTaskName:
		return m.OldTaskName(ctx)
	case asynctask.FieldTaskData:
		return m.OldTaskData(ctx)
	case asynctask.FieldState:
		return m.OldState(ctx)
	case asynctask.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case asynctask.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown AsyncTask field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AsyncTaskMutation) SetField(name string, value ent.Value) error {
	switch name {
	case asynctask.FieldTaskID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskID(v)
		return nil
	case asynctask.FieldTaskType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskType(v)
		return nil
	case asynctask.FieldTaskName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskName(v)
		return nil
	case asynctask.FieldTaskData:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskData(v)
		return nil
	case asynctask.FieldState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case asynctask.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case asynctask.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown AsyncTask field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AsyncTaskMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AsyncTaskMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AsyncTaskMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown AsyncTask numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AsyncTaskMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AsyncTaskMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AsyncTaskMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AsyncTask nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AsyncTaskMutation) ResetField(name string) error {
	switch name {
	case asynctask.FieldTaskID:
		m.ResetTaskID()
		return nil
	case asynctask.FieldTaskType:
		m.ResetTaskType()
		return nil
	case asynctask.FieldTaskName:
		m.ResetTaskName()
		return nil
	case asynctask.FieldTaskData:
		m.ResetTaskData()
		return nil
	case asynctask.FieldState:
		m.ResetState()
		return nil
	case asynctask.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case asynctask.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown AsyncTask field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AsyncTaskMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AsyncTaskMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AsyncTaskMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AsyncTaskMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AsyncTaskMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AsyncTaskMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AsyncTaskMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AsyncTask unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AsyncTaskMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AsyncTask edge %s", name)
}

// PAHeadMutation represents an operation that mutates the PAHead nodes in the graph.
type PAHeadMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	code          *string
	state         *string
	pay_amount    *string
	applicant     *string
	department    *string
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*PAHead, error)
	predicates    []predicate.PAHead
}

var _ ent.Mutation = (*PAHeadMutation)(nil)

// paheadOption allows management of the mutation configuration using functional options.
type paheadOption func(*PAHeadMutation)

// newPAHeadMutation creates new mutation for the PAHead entity.
func newPAHeadMutation(c config, op Op, opts ...paheadOption) *PAHeadMutation {
	m := &PAHeadMutation{
		config:        c,
		op:            op,
		typ:           TypePAHead,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPAHeadID sets the ID field of the mutation.
func withPAHeadID(id int64) paheadOption {
	return func(m *PAHeadMutation) {
		var (
			err   error
			once  sync.Once
			value *PAHead
		)
		m.oldValue = func(ctx context.Context) (*PAHead, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PAHead.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPAHead sets the old PAHead of the mutation.
func withPAHead(node *PAHead) paheadOption {
	return func(m *PAHeadMutation) {
		m.oldValue = func(context.Context) (*PAHead, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PAHeadMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PAHeadMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PAHead entities.
func (m *PAHeadMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PAHeadMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PAHeadMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PAHead.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCode sets the "code" field.
func (m *PAHeadMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *PAHeadMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the PAHead entity.
// If the PAHead object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PAHeadMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *PAHeadMutation) ResetCode() {
	m.code = nil
}

// SetState sets the "state" field.
func (m *PAHeadMutation) SetState(s string) {
	m.state = &s
}

// State returns the value of the "state" field in the mutation.
func (m *PAHeadMutation) State() (r string, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the PAHead entity.
// If the PAHead object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PAHeadMutation) OldState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ResetState resets all changes to the "state" field.
func (m *PAHeadMutation) ResetState() {
	m.state = nil
}

// SetPayAmount sets the "pay_amount" field.
func (m *PAHeadMutation) SetPayAmount(s string) {
	m.pay_amount = &s
}

// PayAmount returns the value of the "pay_amount" field in the mutation.
func (m *PAHeadMutation) PayAmount() (r string, exists bool) {
	v := m.pay_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldPayAmount returns the old "pay_amount" field's value of the PAHead entity.
// If the PAHead object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PAHeadMutation) OldPayAmount(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPayAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPayAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPayAmount: %w", err)
	}
	return oldValue.PayAmount, nil
}

// ResetPayAmount resets all changes to the "pay_amount" field.
func (m *PAHeadMutation) ResetPayAmount() {
	m.pay_amount = nil
}

// SetApplicant sets the "applicant" field.
func (m *PAHeadMutation) SetApplicant(s string) {
	m.applicant = &s
}

// Applicant returns the value of the "applicant" field in the mutation.
func (m *PAHeadMutation) Applicant() (r string, exists bool) {
	v := m.applicant
	if v == nil {
		return
	}
	return *v, true
}

// OldApplicant returns the old "applicant" field's value of the PAHead entity.
// If the PAHead object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PAHeadMutation) OldApplicant(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldApplicant is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldApplicant requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldApplicant: %w", err)
	}
	return oldValue.Applicant, nil
}

// ResetApplicant resets all changes to the "applicant" field.
func (m *PAHeadMutation) ResetApplicant() {
	m.applicant = nil
}

// SetDepartment sets the "department" field.
func (m *PAHeadMutation) SetDepartment(s string) {
	m.department = &s
}

// Department returns the value of the "department" field in the mutation.
func (m *PAHeadMutation) Department() (r string, exists bool) {
	v := m.department
	if v == nil {
		return
	}
	return *v, true
}

// OldDepartment returns the old "department" field's value of the PAHead entity.
// If the PAHead object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PAHeadMutation) OldDepartment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDepartment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDepartment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDepartment: %w", err)
	}
	return oldValue.Department, nil
}

// ClearDepartment clears the value of the "department" field.
func (m *PAHeadMutation) ClearDepartment() {
	m.department = nil
	m.clearedFields[pahead.FieldDepartment] = struct{}{}
}

// DepartmentCleared returns if the "department" field was cleared in this mutation.
func (m *PAHeadMutation) DepartmentCleared() bool {
	_, ok := m.clearedFields[pahead.FieldDepartment]
	return ok
}

// ResetDepartment resets all changes to the "department" field.
func (m *PAHeadMutation) ResetDepartment() {
	m.department = nil
	delete(m.clearedFields, pahead.FieldDepartment)
}

// SetCreatedAt sets the "created_at" field.
func (m *PAHeadMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PAHeadMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the PAHead entity.
// If the PAHead object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PAHeadMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PAHeadMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PAHeadMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PAHeadMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the PAHead entity.
// If the PAHead object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PAHeadMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PAHeadMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the PAHeadMutation builder.
func (m *PAHeadMutation) Where(ps ...predicate.PAHead) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PAHeadMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PAHeadMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PAHead, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PAHeadMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PAHeadMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PAHead).
func (m *PAHeadMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PAHeadMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.code != nil {
		fields = append(fields, pahead.FieldCode)
	}
	if m.state != nil {
		fields = append(fields, pahead.FieldState)
	}
	if m.pay_amount != nil {
		fields = append(fields, pahead.FieldPayAmount)
	}
	if m.applicant != nil {
		fields = append(fields, pahead.FieldApplicant)
	}
	if m.department != nil {
		fields = append(fields, pahead.FieldDepartment)
	}
	if m.created_at != nil {
		fields = append(fields, pahead.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, pahead.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PAHeadMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case pahead.FieldCode:
		return m.Code()
	case pahead.FieldState:
		return m.State()
	case pahead.FieldPayAmount:
		return m.PayAmount()
	case pahead.FieldApplicant:
		return m.Applicant()
	case pahead.FieldDepartment:
		return m.Department()
	case pahead.FieldCreatedAt:
		return m.CreatedAt()
	case pahead.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PAHeadMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case pahead.FieldCode:
		return m.OldCode(ctx)
	case pahead.FieldState:
		return m.OldState(ctx)
	case pahead.FieldPayAmount:
		return m.OldPayAmount(ctx)
	case pahead.FieldApplicant:
		return m.OldApplicant(ctx)
	case pahead.FieldDepartment:
		return m.OldDepartment(ctx)
	case pahead.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case pahead.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown PAHead field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PAHeadMutation) SetField(name string, value ent.Value) error {
	switch name {
	case pahead.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case pahead.FieldState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case pahead.FieldPayAmount:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPayAmount(v)
		return nil
	case pahead.FieldApplicant:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetApplicant(v)
		return nil
	case pahead.FieldDepartment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDepartment(v)
		return nil
	case pahead.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case pahead.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown PAHead field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PAHeadMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PAHeadMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PAHeadMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown PAHead numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PAHeadMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(pahead.FieldDepartment) {
		fields = append(fields, pahead.FieldDepartment)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PAHeadMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PAHeadMutation) ClearField(name string) error {
	switch name {
	case pahead.FieldDepartment:
		m.ClearDepartment()
		return nil
	}
	return fmt.Errorf("unknown PAHead nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PAHeadMutation) ResetField(name string) error {
	switch name {
	case pahead.FieldCode:
		m.ResetCode()
		return nil
	case pahead.FieldState:
		m.ResetState()
		return nil
	case pahead.FieldPayAmount:
		m.ResetPayAmount()
		return nil
	case pahead.FieldApplicant:
		m.ResetApplicant()
		return nil
	case pahead.FieldDepartment:
		m.ResetDepartment()
		return nil
	case pahead.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case pahead.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown PAHead field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PAHeadMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PAHeadMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PAHeadMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PAHeadMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PAHeadMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PAHeadMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PAHeadMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown PAHead unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PAHeadMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown PAHead edge %s", name)
}

// PARowMutation represents an operation that mutates the PARow nodes in the graph.
type PARowMutation struct {
	config
	op             Op
	typ            string
	id             *int64
	doc_code       *string
	order_code     *string
	row_currency   *string
	tax_ratio      *string
	initial_amount *string
	created_at     *time.Time
	updated_at     *time.Time
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*PARow, error)
	predicates     []predicate.PARow
}

var _ ent.Mutation = (*PARowMutation)(nil)

// parowOption allows management of the mutation configuration using functional options.
type parowOption func(*PARowMutation)

// newPARowMutation creates new mutation for the PARow entity.
func newPARowMutation(c config, op Op, opts ...parowOption) *PARowMutation {
	m := &PARowMutation{
		config:        c,
		op:            op,
		typ:           TypePARow,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPARowID sets the ID field of the mutation.
func withPARowID(id int64) parowOption {
	return func(m *PARowMutation) {
		var (
			err   error
			once  sync.Once
			value *PARow
		)
		m.oldValue = func(ctx context.Context) (*PARow, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PARow.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPARow sets the old PARow of the mutation.
func withPARow(node *PARow) parowOption {
	return func(m *PARowMutation) {
		m.oldValue = func(context.Context) (*PARow, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PARowMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PARowMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PARow entities.
func (m *PARowMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PARowMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PARowMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PARow.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDocCode sets the "doc_code" field.
func (m *PARowMutation) SetDocCode(s string) {
	m.doc_code = &s
}

// DocCode returns the value of the "doc_code" field in the mutation.
func (m *PARowMutation) DocCode() (r string, exists bool) {
	v := m.doc_code
	if v == nil {
		return
	}
	return *v, true
}

// OldDocCode returns the old "doc_code" field's value of the PARow entity.
// If the PARow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PARowMutation) OldDocCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDocCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDocCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDocCode: %w", err)
	}
	return oldValue.DocCode, nil
}

// ResetDocCode resets all changes to the "doc_code" field.
func (m *PARowMutation) ResetDocCode() {
	m.doc_code = nil
}

// SetOrderCode sets the "order_code" field.
func (m *PARowMutation) SetOrderCode(s string) {
	m.order_code = &s
}

// OrderCode returns the value of the "order_code" field in the mutation.
func (m *PARowMutation) OrderCode() (r string, exists bool) {
	v := m.order_code
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderCode returns the old "order_code" field's value of the PARow entity.
// If the PARow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PARowMutation) OldOrderCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderCode: %w", err)
	}
	return oldValue.OrderCode, nil
}

// ResetOrderCode resets all changes to the "order_code" field.
func (m *PARowMutation) ResetOrderCode() {
	m.order_code = nil
}

// SetRowCurrency sets the "row_currency" field.
func (m *PARowMutation) SetRowCurrency(s string) {
	m.row_currency = &s
}

// RowCurrency returns the value of the "row_currency" field in the mutation.
func (m *PARowMutation) RowCurrency() (r string, exists bool) {
	v := m.row_currency
	if v == nil {
		return
	}
	return *v, true
}

// OldRowCurrency returns the old "row_currency" field's value of the PARow entity.
// If the PARow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PARowMutation) OldRowCurrency(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRowCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRowCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRowCurrency: %w", err)
	}
	return oldValue.RowCurrency, nil
}

// ResetRowCurrency resets all changes to the "row_currency" field.
func (m *PARowMutation) ResetRowCurrency() {
	m.row_currency = nil
}

// SetTaxRatio sets the "tax_ratio" field.
func (m *PARowMutation) SetTaxRatio(s string) {
	m.tax_ratio = &s
}

// TaxRatio returns the value of the "tax_ratio" field in the mutation.
func (m *PARowMutation) TaxRatio() (r string, exists bool) {
	v := m.tax_ratio
	if v == nil {
		return
	}
	return *v, true
}

// OldTaxRatio returns the old "tax_ratio" field's value of the PARow entity.
// If the PARow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PARowMutation) OldTaxRatio(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaxRatio is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaxRatio requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaxRatio: %w", err)
	}
	return oldValue.TaxRatio, nil
}

// ResetTaxRatio resets all changes to the "tax_ratio" field.
func (m *PARowMutation) ResetTaxRatio() {
	m.tax_ratio = nil
}

// SetInitialAmount sets the "initial_amount" field.
func (m *PARowMutation) SetInitialAmount(s string) {
	m.initial_amount = &s
}

// InitialAmount returns the value of the "initial_amount" field in the mutation.
func (m *PARowMutation) InitialAmount() (r string, exists bool) {
	v := m.initial_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldInitialAmount returns the old "initial_amount" field's value of the PARow entity.
// If the PARow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PARowMutation) OldInitialAmount(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInitialAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInitialAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInitialAmount: %w", err)
	}
	return oldValue.InitialAmount, nil
}

// ResetInitialAmount resets all changes to the "initial_amount" field.
func (m *PARowMutation) ResetInitialAmount() {
	m.initial_amount = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *PARowMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PARowMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the PARow entity.
// If the PARow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PARowMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PARowMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PARowMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PARowMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the PARow entity.
// If the PARow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PARowMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PARowMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the PARowMutation builder.
func (m *PARowMutation) Where(ps ...predicate.PARow) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PARowMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PARowMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PARow, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PARowMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PARowMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PARow).
func (m *PARowMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PARowMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.doc_code != nil {
		fields = append(fields, parow.FieldDocCode)
	}
	if m.order_code != nil {
		fields = append(fields, parow.FieldOrderCode)
	}
	if m.row_currency != nil {
		fields = append(fields, parow.FieldRowCurrency)
	}
	if m.tax_ratio != nil {
		fields = append(fields, parow.FieldTaxRatio)
	}
	if m.initial_amount != nil {
		fields = append(fields, parow.FieldInitialAmount)
	}
	if m.created_at != nil {
		fields = append(fields, parow.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, parow.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PARowMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case parow.FieldDocCode:
		return m.DocCode()
	case parow.FieldOrderCode:
		return m.OrderCode()
	case parow.FieldRowCurrency:
		return m.RowCurrency()
	case parow.FieldTaxRatio:
		return m.TaxRatio()
	case parow.FieldInitialAmount:
		return m.InitialAmount()
	case parow.FieldCreatedAt:
		return m.CreatedAt()
	case parow.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PARowMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case parow.FieldDocCode:
		return m.OldDocCode(ctx)
	case parow.FieldOrderCode:
		return m.OldOrderCode(ctx)
	case parow.FieldRowCurrency:
		return m.OldRowCurrency(ctx)
	case parow.FieldTaxRatio:
		return m.OldTaxRatio(ctx)
	case parow.FieldInitialAmount:
		return m.OldInitialAmount(ctx)
	case parow.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case parow.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown PARow field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PARowMutation) SetField(name string, value ent.Value) error {
	switch name {
	case parow.FieldDocCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDocCode(v)
		return nil
	case parow.FieldOrderCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderCode(v)
		return nil
	case parow.FieldRowCurrency:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRowCurrency(v)
		return nil
	case parow.FieldTaxRatio:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaxRatio(v)
		return nil
	case parow.FieldInitialAmount:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInitialAmount(v)
		return nil
	case parow.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case parow.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown PARow field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PARowMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PARowMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PARowMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown PARow numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PARowMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PARowMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PARowMutation) ClearField(name string) error {
	return fmt.Errorf("unknown PARow nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PARowMutation) ResetField(name string) error {
	switch name {
	case parow.FieldDocCode:
		m.ResetDocCode()
		return nil
	case parow.FieldOrderCode:
		m.ResetOrderCode()
		return nil
	case parow.FieldRowCurrency:
		m.ResetRowCurrency()
		return nil
	case parow.FieldTaxRatio:
		m.ResetTaxRatio()
		return nil
	case parow.FieldInitialAmount:
		m.ResetInitialAmount()
		return nil
	case parow.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case parow.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown PARow field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PARowMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PARowMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PARowMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PARowMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PARowMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PARowMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PARowMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown PARow unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PARowMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown PARow edge %s", name)
}
