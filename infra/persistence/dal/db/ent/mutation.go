// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"purchase/infra/persistence/dal/db/ent/asynctask"
	"purchase/infra/persistence/dal/db/ent/branch"
	"purchase/infra/persistence/dal/db/ent/pahead"
	"purchase/infra/persistence/dal/db/ent/parow"
	"purchase/infra/persistence/dal/db/ent/predicate"
	"purchase/infra/persistence/dal/db/ent/trans"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAsyncTask = "AsyncTask"
	TypeBranch    = "Branch"
	TypePAHead    = "PAHead"
	TypePARow     = "PARow"
	TypeTrans     = "Trans"
)

// AsyncTaskMutation represents an operation that mutates the AsyncTask nodes in the graph.
type AsyncTaskMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	task_id       *string
	task_type     *string
	task_group    *string
	task_name     *string
	biz_id        *string
	task_data     *string
	state         *string
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*AsyncTask, error)
	predicates    []predicate.AsyncTask
}

var _ ent.Mutation = (*AsyncTaskMutation)(nil)

// asynctaskOption allows management of the mutation configuration using functional options.
type asynctaskOption func(*AsyncTaskMutation)

// newAsyncTaskMutation creates new mutation for the AsyncTask entity.
func newAsyncTaskMutation(c config, op Op, opts ...asynctaskOption) *AsyncTaskMutation {
	m := &AsyncTaskMutation{
		config:        c,
		op:            op,
		typ:           TypeAsyncTask,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAsyncTaskID sets the ID field of the mutation.
func withAsyncTaskID(id int64) asynctaskOption {
	return func(m *AsyncTaskMutation) {
		var (
			err   error
			once  sync.Once
			value *AsyncTask
		)
		m.oldValue = func(ctx context.Context) (*AsyncTask, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AsyncTask.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAsyncTask sets the old AsyncTask of the mutation.
func withAsyncTask(node *AsyncTask) asynctaskOption {
	return func(m *AsyncTaskMutation) {
		m.oldValue = func(context.Context) (*AsyncTask, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AsyncTaskMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AsyncTaskMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AsyncTask entities.
func (m *AsyncTaskMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AsyncTaskMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AsyncTaskMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AsyncTask.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTaskID sets the "task_id" field.
func (m *AsyncTaskMutation) SetTaskID(s string) {
	m.task_id = &s
}

// TaskID returns the value of the "task_id" field in the mutation.
func (m *AsyncTaskMutation) TaskID() (r string, exists bool) {
	v := m.task_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskID returns the old "task_id" field's value of the AsyncTask entity.
// If the AsyncTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AsyncTaskMutation) OldTaskID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskID: %w", err)
	}
	return oldValue.TaskID, nil
}

// ResetTaskID resets all changes to the "task_id" field.
func (m *AsyncTaskMutation) ResetTaskID() {
	m.task_id = nil
}

// SetTaskType sets the "task_type" field.
func (m *AsyncTaskMutation) SetTaskType(s string) {
	m.task_type = &s
}

// TaskType returns the value of the "task_type" field in the mutation.
func (m *AsyncTaskMutation) TaskType() (r string, exists bool) {
	v := m.task_type
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskType returns the old "task_type" field's value of the AsyncTask entity.
// If the AsyncTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AsyncTaskMutation) OldTaskType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskType: %w", err)
	}
	return oldValue.TaskType, nil
}

// ResetTaskType resets all changes to the "task_type" field.
func (m *AsyncTaskMutation) ResetTaskType() {
	m.task_type = nil
}

// SetTaskGroup sets the "task_group" field.
func (m *AsyncTaskMutation) SetTaskGroup(s string) {
	m.task_group = &s
}

// TaskGroup returns the value of the "task_group" field in the mutation.
func (m *AsyncTaskMutation) TaskGroup() (r string, exists bool) {
	v := m.task_group
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskGroup returns the old "task_group" field's value of the AsyncTask entity.
// If the AsyncTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AsyncTaskMutation) OldTaskGroup(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskGroup is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskGroup requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskGroup: %w", err)
	}
	return oldValue.TaskGroup, nil
}

// ResetTaskGroup resets all changes to the "task_group" field.
func (m *AsyncTaskMutation) ResetTaskGroup() {
	m.task_group = nil
}

// SetTaskName sets the "task_name" field.
func (m *AsyncTaskMutation) SetTaskName(s string) {
	m.task_name = &s
}

// TaskName returns the value of the "task_name" field in the mutation.
func (m *AsyncTaskMutation) TaskName() (r string, exists bool) {
	v := m.task_name
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskName returns the old "task_name" field's value of the AsyncTask entity.
// If the AsyncTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AsyncTaskMutation) OldTaskName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskName: %w", err)
	}
	return oldValue.TaskName, nil
}

// ResetTaskName resets all changes to the "task_name" field.
func (m *AsyncTaskMutation) ResetTaskName() {
	m.task_name = nil
}

// SetBizID sets the "biz_id" field.
func (m *AsyncTaskMutation) SetBizID(s string) {
	m.biz_id = &s
}

// BizID returns the value of the "biz_id" field in the mutation.
func (m *AsyncTaskMutation) BizID() (r string, exists bool) {
	v := m.biz_id
	if v == nil {
		return
	}
	return *v, true
}

// OldBizID returns the old "biz_id" field's value of the AsyncTask entity.
// If the AsyncTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AsyncTaskMutation) OldBizID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBizID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBizID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBizID: %w", err)
	}
	return oldValue.BizID, nil
}

// ResetBizID resets all changes to the "biz_id" field.
func (m *AsyncTaskMutation) ResetBizID() {
	m.biz_id = nil
}

// SetTaskData sets the "task_data" field.
func (m *AsyncTaskMutation) SetTaskData(s string) {
	m.task_data = &s
}

// TaskData returns the value of the "task_data" field in the mutation.
func (m *AsyncTaskMutation) TaskData() (r string, exists bool) {
	v := m.task_data
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskData returns the old "task_data" field's value of the AsyncTask entity.
// If the AsyncTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AsyncTaskMutation) OldTaskData(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskData: %w", err)
	}
	return oldValue.TaskData, nil
}

// ResetTaskData resets all changes to the "task_data" field.
func (m *AsyncTaskMutation) ResetTaskData() {
	m.task_data = nil
}

// SetState sets the "state" field.
func (m *AsyncTaskMutation) SetState(s string) {
	m.state = &s
}

// State returns the value of the "state" field in the mutation.
func (m *AsyncTaskMutation) State() (r string, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the AsyncTask entity.
// If the AsyncTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AsyncTaskMutation) OldState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ResetState resets all changes to the "state" field.
func (m *AsyncTaskMutation) ResetState() {
	m.state = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *AsyncTaskMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AsyncTaskMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the AsyncTask entity.
// If the AsyncTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AsyncTaskMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AsyncTaskMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AsyncTaskMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AsyncTaskMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the AsyncTask entity.
// If the AsyncTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AsyncTaskMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AsyncTaskMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the AsyncTaskMutation builder.
func (m *AsyncTaskMutation) Where(ps ...predicate.AsyncTask) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AsyncTaskMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AsyncTaskMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AsyncTask, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AsyncTaskMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AsyncTaskMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AsyncTask).
func (m *AsyncTaskMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AsyncTaskMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.task_id != nil {
		fields = append(fields, asynctask.FieldTaskID)
	}
	if m.task_type != nil {
		fields = append(fields, asynctask.FieldTaskType)
	}
	if m.task_group != nil {
		fields = append(fields, asynctask.FieldTaskGroup)
	}
	if m.task_name != nil {
		fields = append(fields, asynctask.FieldTaskName)
	}
	if m.biz_id != nil {
		fields = append(fields, asynctask.FieldBizID)
	}
	if m.task_data != nil {
		fields = append(fields, asynctask.FieldTaskData)
	}
	if m.state != nil {
		fields = append(fields, asynctask.FieldState)
	}
	if m.created_at != nil {
		fields = append(fields, asynctask.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, asynctask.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AsyncTaskMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case asynctask.FieldTaskID:
		return m.TaskID()
	case asynctask.FieldTaskType:
		return m.TaskType()
	case asynctask.FieldTaskGroup:
		return m.TaskGroup()
	case asynctask.FieldTaskName:
		return m.TaskName()
	case asynctask.FieldBizID:
		return m.BizID()
	case asynctask.FieldTaskData:
		return m.TaskData()
	case asynctask.FieldState:
		return m.State()
	case asynctask.FieldCreatedAt:
		return m.CreatedAt()
	case asynctask.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AsyncTaskMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case asynctask.FieldTaskID:
		return m.OldTaskID(ctx)
	case asynctask.FieldTaskType:
		return m.OldTaskType(ctx)
	case asynctask.FieldTaskGroup:
		return m.OldTaskGroup(ctx)
	case asynctask.FieldTaskName:
		return m.OldTaskName(ctx)
	case asynctask.FieldBizID:
		return m.OldBizID(ctx)
	case asynctask.FieldTaskData:
		return m.OldTaskData(ctx)
	case asynctask.FieldState:
		return m.OldState(ctx)
	case asynctask.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case asynctask.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown AsyncTask field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AsyncTaskMutation) SetField(name string, value ent.Value) error {
	switch name {
	case asynctask.FieldTaskID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskID(v)
		return nil
	case asynctask.FieldTaskType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskType(v)
		return nil
	case asynctask.FieldTaskGroup:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskGroup(v)
		return nil
	case asynctask.FieldTaskName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskName(v)
		return nil
	case asynctask.FieldBizID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBizID(v)
		return nil
	case asynctask.FieldTaskData:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskData(v)
		return nil
	case asynctask.FieldState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case asynctask.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case asynctask.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown AsyncTask field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AsyncTaskMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AsyncTaskMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AsyncTaskMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown AsyncTask numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AsyncTaskMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AsyncTaskMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AsyncTaskMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AsyncTask nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AsyncTaskMutation) ResetField(name string) error {
	switch name {
	case asynctask.FieldTaskID:
		m.ResetTaskID()
		return nil
	case asynctask.FieldTaskType:
		m.ResetTaskType()
		return nil
	case asynctask.FieldTaskGroup:
		m.ResetTaskGroup()
		return nil
	case asynctask.FieldTaskName:
		m.ResetTaskName()
		return nil
	case asynctask.FieldBizID:
		m.ResetBizID()
		return nil
	case asynctask.FieldTaskData:
		m.ResetTaskData()
		return nil
	case asynctask.FieldState:
		m.ResetState()
		return nil
	case asynctask.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case asynctask.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown AsyncTask field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AsyncTaskMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AsyncTaskMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AsyncTaskMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AsyncTaskMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AsyncTaskMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AsyncTaskMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AsyncTaskMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AsyncTask unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AsyncTaskMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AsyncTask edge %s", name)
}

// BranchMutation represents an operation that mutates the Branch nodes in the graph.
type BranchMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	code               *string
	trans_id           *int
	addtrans_id        *int
	_type              *string
	state              *string
	name               *string
	action             *string
	compensate         *string
	action_payload     *string
	compensate_payload *string
	action_depend      *string
	compensate_depend  *string
	is_dead            *bool
	created_at         *time.Time
	updated_at         *time.Time
	updated_by         *string
	created_by         *string
	clearedFields      map[string]struct{}
	done               bool
	oldValue           func(context.Context) (*Branch, error)
	predicates         []predicate.Branch
}

var _ ent.Mutation = (*BranchMutation)(nil)

// branchOption allows management of the mutation configuration using functional options.
type branchOption func(*BranchMutation)

// newBranchMutation creates new mutation for the Branch entity.
func newBranchMutation(c config, op Op, opts ...branchOption) *BranchMutation {
	m := &BranchMutation{
		config:        c,
		op:            op,
		typ:           TypeBranch,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBranchID sets the ID field of the mutation.
func withBranchID(id int) branchOption {
	return func(m *BranchMutation) {
		var (
			err   error
			once  sync.Once
			value *Branch
		)
		m.oldValue = func(ctx context.Context) (*Branch, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Branch.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBranch sets the old Branch of the mutation.
func withBranch(node *Branch) branchOption {
	return func(m *BranchMutation) {
		m.oldValue = func(context.Context) (*Branch, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BranchMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BranchMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BranchMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BranchMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Branch.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCode sets the "code" field.
func (m *BranchMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *BranchMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Branch entity.
// If the Branch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *BranchMutation) ResetCode() {
	m.code = nil
}

// SetTransID sets the "trans_id" field.
func (m *BranchMutation) SetTransID(i int) {
	m.trans_id = &i
	m.addtrans_id = nil
}

// TransID returns the value of the "trans_id" field in the mutation.
func (m *BranchMutation) TransID() (r int, exists bool) {
	v := m.trans_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTransID returns the old "trans_id" field's value of the Branch entity.
// If the Branch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchMutation) OldTransID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTransID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTransID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTransID: %w", err)
	}
	return oldValue.TransID, nil
}

// AddTransID adds i to the "trans_id" field.
func (m *BranchMutation) AddTransID(i int) {
	if m.addtrans_id != nil {
		*m.addtrans_id += i
	} else {
		m.addtrans_id = &i
	}
}

// AddedTransID returns the value that was added to the "trans_id" field in this mutation.
func (m *BranchMutation) AddedTransID() (r int, exists bool) {
	v := m.addtrans_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetTransID resets all changes to the "trans_id" field.
func (m *BranchMutation) ResetTransID() {
	m.trans_id = nil
	m.addtrans_id = nil
}

// SetType sets the "type" field.
func (m *BranchMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *BranchMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Branch entity.
// If the Branch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *BranchMutation) ResetType() {
	m._type = nil
}

// SetState sets the "state" field.
func (m *BranchMutation) SetState(s string) {
	m.state = &s
}

// State returns the value of the "state" field in the mutation.
func (m *BranchMutation) State() (r string, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the Branch entity.
// If the Branch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchMutation) OldState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ResetState resets all changes to the "state" field.
func (m *BranchMutation) ResetState() {
	m.state = nil
}

// SetName sets the "name" field.
func (m *BranchMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *BranchMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Branch entity.
// If the Branch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *BranchMutation) ResetName() {
	m.name = nil
}

// SetAction sets the "action" field.
func (m *BranchMutation) SetAction(s string) {
	m.action = &s
}

// Action returns the value of the "action" field in the mutation.
func (m *BranchMutation) Action() (r string, exists bool) {
	v := m.action
	if v == nil {
		return
	}
	return *v, true
}

// OldAction returns the old "action" field's value of the Branch entity.
// If the Branch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchMutation) OldAction(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAction is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAction requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAction: %w", err)
	}
	return oldValue.Action, nil
}

// ResetAction resets all changes to the "action" field.
func (m *BranchMutation) ResetAction() {
	m.action = nil
}

// SetCompensate sets the "compensate" field.
func (m *BranchMutation) SetCompensate(s string) {
	m.compensate = &s
}

// Compensate returns the value of the "compensate" field in the mutation.
func (m *BranchMutation) Compensate() (r string, exists bool) {
	v := m.compensate
	if v == nil {
		return
	}
	return *v, true
}

// OldCompensate returns the old "compensate" field's value of the Branch entity.
// If the Branch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchMutation) OldCompensate(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCompensate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCompensate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCompensate: %w", err)
	}
	return oldValue.Compensate, nil
}

// ResetCompensate resets all changes to the "compensate" field.
func (m *BranchMutation) ResetCompensate() {
	m.compensate = nil
}

// SetActionPayload sets the "action_payload" field.
func (m *BranchMutation) SetActionPayload(s string) {
	m.action_payload = &s
}

// ActionPayload returns the value of the "action_payload" field in the mutation.
func (m *BranchMutation) ActionPayload() (r string, exists bool) {
	v := m.action_payload
	if v == nil {
		return
	}
	return *v, true
}

// OldActionPayload returns the old "action_payload" field's value of the Branch entity.
// If the Branch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchMutation) OldActionPayload(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActionPayload is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActionPayload requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActionPayload: %w", err)
	}
	return oldValue.ActionPayload, nil
}

// ResetActionPayload resets all changes to the "action_payload" field.
func (m *BranchMutation) ResetActionPayload() {
	m.action_payload = nil
}

// SetCompensatePayload sets the "compensate_payload" field.
func (m *BranchMutation) SetCompensatePayload(s string) {
	m.compensate_payload = &s
}

// CompensatePayload returns the value of the "compensate_payload" field in the mutation.
func (m *BranchMutation) CompensatePayload() (r string, exists bool) {
	v := m.compensate_payload
	if v == nil {
		return
	}
	return *v, true
}

// OldCompensatePayload returns the old "compensate_payload" field's value of the Branch entity.
// If the Branch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchMutation) OldCompensatePayload(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCompensatePayload is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCompensatePayload requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCompensatePayload: %w", err)
	}
	return oldValue.CompensatePayload, nil
}

// ResetCompensatePayload resets all changes to the "compensate_payload" field.
func (m *BranchMutation) ResetCompensatePayload() {
	m.compensate_payload = nil
}

// SetActionDepend sets the "action_depend" field.
func (m *BranchMutation) SetActionDepend(s string) {
	m.action_depend = &s
}

// ActionDepend returns the value of the "action_depend" field in the mutation.
func (m *BranchMutation) ActionDepend() (r string, exists bool) {
	v := m.action_depend
	if v == nil {
		return
	}
	return *v, true
}

// OldActionDepend returns the old "action_depend" field's value of the Branch entity.
// If the Branch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchMutation) OldActionDepend(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActionDepend is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActionDepend requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActionDepend: %w", err)
	}
	return oldValue.ActionDepend, nil
}

// ResetActionDepend resets all changes to the "action_depend" field.
func (m *BranchMutation) ResetActionDepend() {
	m.action_depend = nil
}

// SetCompensateDepend sets the "compensate_depend" field.
func (m *BranchMutation) SetCompensateDepend(s string) {
	m.compensate_depend = &s
}

// CompensateDepend returns the value of the "compensate_depend" field in the mutation.
func (m *BranchMutation) CompensateDepend() (r string, exists bool) {
	v := m.compensate_depend
	if v == nil {
		return
	}
	return *v, true
}

// OldCompensateDepend returns the old "compensate_depend" field's value of the Branch entity.
// If the Branch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchMutation) OldCompensateDepend(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCompensateDepend is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCompensateDepend requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCompensateDepend: %w", err)
	}
	return oldValue.CompensateDepend, nil
}

// ResetCompensateDepend resets all changes to the "compensate_depend" field.
func (m *BranchMutation) ResetCompensateDepend() {
	m.compensate_depend = nil
}

// SetIsDead sets the "is_dead" field.
func (m *BranchMutation) SetIsDead(b bool) {
	m.is_dead = &b
}

// IsDead returns the value of the "is_dead" field in the mutation.
func (m *BranchMutation) IsDead() (r bool, exists bool) {
	v := m.is_dead
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDead returns the old "is_dead" field's value of the Branch entity.
// If the Branch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchMutation) OldIsDead(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDead is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDead requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDead: %w", err)
	}
	return oldValue.IsDead, nil
}

// ResetIsDead resets all changes to the "is_dead" field.
func (m *BranchMutation) ResetIsDead() {
	m.is_dead = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *BranchMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *BranchMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Branch entity.
// If the Branch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *BranchMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *BranchMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *BranchMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Branch entity.
// If the Branch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *BranchMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUpdatedBy sets the "updated_by" field.
func (m *BranchMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *BranchMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Branch entity.
// If the Branch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *BranchMutation) ResetUpdatedBy() {
	m.updated_by = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *BranchMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *BranchMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Branch entity.
// If the Branch object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *BranchMutation) ResetCreatedBy() {
	m.created_by = nil
}

// Where appends a list predicates to the BranchMutation builder.
func (m *BranchMutation) Where(ps ...predicate.Branch) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BranchMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BranchMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Branch, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BranchMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BranchMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Branch).
func (m *BranchMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BranchMutation) Fields() []string {
	fields := make([]string, 0, 16)
	if m.code != nil {
		fields = append(fields, branch.FieldCode)
	}
	if m.trans_id != nil {
		fields = append(fields, branch.FieldTransID)
	}
	if m._type != nil {
		fields = append(fields, branch.FieldType)
	}
	if m.state != nil {
		fields = append(fields, branch.FieldState)
	}
	if m.name != nil {
		fields = append(fields, branch.FieldName)
	}
	if m.action != nil {
		fields = append(fields, branch.FieldAction)
	}
	if m.compensate != nil {
		fields = append(fields, branch.FieldCompensate)
	}
	if m.action_payload != nil {
		fields = append(fields, branch.FieldActionPayload)
	}
	if m.compensate_payload != nil {
		fields = append(fields, branch.FieldCompensatePayload)
	}
	if m.action_depend != nil {
		fields = append(fields, branch.FieldActionDepend)
	}
	if m.compensate_depend != nil {
		fields = append(fields, branch.FieldCompensateDepend)
	}
	if m.is_dead != nil {
		fields = append(fields, branch.FieldIsDead)
	}
	if m.created_at != nil {
		fields = append(fields, branch.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, branch.FieldUpdatedAt)
	}
	if m.updated_by != nil {
		fields = append(fields, branch.FieldUpdatedBy)
	}
	if m.created_by != nil {
		fields = append(fields, branch.FieldCreatedBy)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BranchMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case branch.FieldCode:
		return m.Code()
	case branch.FieldTransID:
		return m.TransID()
	case branch.FieldType:
		return m.GetType()
	case branch.FieldState:
		return m.State()
	case branch.FieldName:
		return m.Name()
	case branch.FieldAction:
		return m.Action()
	case branch.FieldCompensate:
		return m.Compensate()
	case branch.FieldActionPayload:
		return m.ActionPayload()
	case branch.FieldCompensatePayload:
		return m.CompensatePayload()
	case branch.FieldActionDepend:
		return m.ActionDepend()
	case branch.FieldCompensateDepend:
		return m.CompensateDepend()
	case branch.FieldIsDead:
		return m.IsDead()
	case branch.FieldCreatedAt:
		return m.CreatedAt()
	case branch.FieldUpdatedAt:
		return m.UpdatedAt()
	case branch.FieldUpdatedBy:
		return m.UpdatedBy()
	case branch.FieldCreatedBy:
		return m.CreatedBy()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BranchMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case branch.FieldCode:
		return m.OldCode(ctx)
	case branch.FieldTransID:
		return m.OldTransID(ctx)
	case branch.FieldType:
		return m.OldType(ctx)
	case branch.FieldState:
		return m.OldState(ctx)
	case branch.FieldName:
		return m.OldName(ctx)
	case branch.FieldAction:
		return m.OldAction(ctx)
	case branch.FieldCompensate:
		return m.OldCompensate(ctx)
	case branch.FieldActionPayload:
		return m.OldActionPayload(ctx)
	case branch.FieldCompensatePayload:
		return m.OldCompensatePayload(ctx)
	case branch.FieldActionDepend:
		return m.OldActionDepend(ctx)
	case branch.FieldCompensateDepend:
		return m.OldCompensateDepend(ctx)
	case branch.FieldIsDead:
		return m.OldIsDead(ctx)
	case branch.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case branch.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case branch.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case branch.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	}
	return nil, fmt.Errorf("unknown Branch field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BranchMutation) SetField(name string, value ent.Value) error {
	switch name {
	case branch.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case branch.FieldTransID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTransID(v)
		return nil
	case branch.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case branch.FieldState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case branch.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case branch.FieldAction:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAction(v)
		return nil
	case branch.FieldCompensate:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCompensate(v)
		return nil
	case branch.FieldActionPayload:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActionPayload(v)
		return nil
	case branch.FieldCompensatePayload:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCompensatePayload(v)
		return nil
	case branch.FieldActionDepend:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActionDepend(v)
		return nil
	case branch.FieldCompensateDepend:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCompensateDepend(v)
		return nil
	case branch.FieldIsDead:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDead(v)
		return nil
	case branch.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case branch.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case branch.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case branch.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	}
	return fmt.Errorf("unknown Branch field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BranchMutation) AddedFields() []string {
	var fields []string
	if m.addtrans_id != nil {
		fields = append(fields, branch.FieldTransID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BranchMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case branch.FieldTransID:
		return m.AddedTransID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BranchMutation) AddField(name string, value ent.Value) error {
	switch name {
	case branch.FieldTransID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTransID(v)
		return nil
	}
	return fmt.Errorf("unknown Branch numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BranchMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BranchMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BranchMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Branch nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BranchMutation) ResetField(name string) error {
	switch name {
	case branch.FieldCode:
		m.ResetCode()
		return nil
	case branch.FieldTransID:
		m.ResetTransID()
		return nil
	case branch.FieldType:
		m.ResetType()
		return nil
	case branch.FieldState:
		m.ResetState()
		return nil
	case branch.FieldName:
		m.ResetName()
		return nil
	case branch.FieldAction:
		m.ResetAction()
		return nil
	case branch.FieldCompensate:
		m.ResetCompensate()
		return nil
	case branch.FieldActionPayload:
		m.ResetActionPayload()
		return nil
	case branch.FieldCompensatePayload:
		m.ResetCompensatePayload()
		return nil
	case branch.FieldActionDepend:
		m.ResetActionDepend()
		return nil
	case branch.FieldCompensateDepend:
		m.ResetCompensateDepend()
		return nil
	case branch.FieldIsDead:
		m.ResetIsDead()
		return nil
	case branch.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case branch.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case branch.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case branch.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	}
	return fmt.Errorf("unknown Branch field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BranchMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BranchMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BranchMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BranchMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BranchMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BranchMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BranchMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Branch unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BranchMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Branch edge %s", name)
}

// PAHeadMutation represents an operation that mutates the PAHead nodes in the graph.
type PAHeadMutation struct {
	config
	op              Op
	typ             string
	id              *int64
	code            *string
	state           *string
	pay_amount      *string
	applicant       *string
	department_code *string
	supplier_code   *string
	is_adv          *bool
	has_invoice     *bool
	remark          *string
	created_at      *time.Time
	updated_at      *time.Time
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*PAHead, error)
	predicates      []predicate.PAHead
}

var _ ent.Mutation = (*PAHeadMutation)(nil)

// paheadOption allows management of the mutation configuration using functional options.
type paheadOption func(*PAHeadMutation)

// newPAHeadMutation creates new mutation for the PAHead entity.
func newPAHeadMutation(c config, op Op, opts ...paheadOption) *PAHeadMutation {
	m := &PAHeadMutation{
		config:        c,
		op:            op,
		typ:           TypePAHead,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPAHeadID sets the ID field of the mutation.
func withPAHeadID(id int64) paheadOption {
	return func(m *PAHeadMutation) {
		var (
			err   error
			once  sync.Once
			value *PAHead
		)
		m.oldValue = func(ctx context.Context) (*PAHead, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PAHead.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPAHead sets the old PAHead of the mutation.
func withPAHead(node *PAHead) paheadOption {
	return func(m *PAHeadMutation) {
		m.oldValue = func(context.Context) (*PAHead, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PAHeadMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PAHeadMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PAHead entities.
func (m *PAHeadMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PAHeadMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PAHeadMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PAHead.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCode sets the "code" field.
func (m *PAHeadMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *PAHeadMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the PAHead entity.
// If the PAHead object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PAHeadMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *PAHeadMutation) ResetCode() {
	m.code = nil
}

// SetState sets the "state" field.
func (m *PAHeadMutation) SetState(s string) {
	m.state = &s
}

// State returns the value of the "state" field in the mutation.
func (m *PAHeadMutation) State() (r string, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the PAHead entity.
// If the PAHead object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PAHeadMutation) OldState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ResetState resets all changes to the "state" field.
func (m *PAHeadMutation) ResetState() {
	m.state = nil
}

// SetPayAmount sets the "pay_amount" field.
func (m *PAHeadMutation) SetPayAmount(s string) {
	m.pay_amount = &s
}

// PayAmount returns the value of the "pay_amount" field in the mutation.
func (m *PAHeadMutation) PayAmount() (r string, exists bool) {
	v := m.pay_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldPayAmount returns the old "pay_amount" field's value of the PAHead entity.
// If the PAHead object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PAHeadMutation) OldPayAmount(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPayAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPayAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPayAmount: %w", err)
	}
	return oldValue.PayAmount, nil
}

// ResetPayAmount resets all changes to the "pay_amount" field.
func (m *PAHeadMutation) ResetPayAmount() {
	m.pay_amount = nil
}

// SetApplicant sets the "applicant" field.
func (m *PAHeadMutation) SetApplicant(s string) {
	m.applicant = &s
}

// Applicant returns the value of the "applicant" field in the mutation.
func (m *PAHeadMutation) Applicant() (r string, exists bool) {
	v := m.applicant
	if v == nil {
		return
	}
	return *v, true
}

// OldApplicant returns the old "applicant" field's value of the PAHead entity.
// If the PAHead object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PAHeadMutation) OldApplicant(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldApplicant is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldApplicant requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldApplicant: %w", err)
	}
	return oldValue.Applicant, nil
}

// ResetApplicant resets all changes to the "applicant" field.
func (m *PAHeadMutation) ResetApplicant() {
	m.applicant = nil
}

// SetDepartmentCode sets the "department_code" field.
func (m *PAHeadMutation) SetDepartmentCode(s string) {
	m.department_code = &s
}

// DepartmentCode returns the value of the "department_code" field in the mutation.
func (m *PAHeadMutation) DepartmentCode() (r string, exists bool) {
	v := m.department_code
	if v == nil {
		return
	}
	return *v, true
}

// OldDepartmentCode returns the old "department_code" field's value of the PAHead entity.
// If the PAHead object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PAHeadMutation) OldDepartmentCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDepartmentCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDepartmentCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDepartmentCode: %w", err)
	}
	return oldValue.DepartmentCode, nil
}

// ClearDepartmentCode clears the value of the "department_code" field.
func (m *PAHeadMutation) ClearDepartmentCode() {
	m.department_code = nil
	m.clearedFields[pahead.FieldDepartmentCode] = struct{}{}
}

// DepartmentCodeCleared returns if the "department_code" field was cleared in this mutation.
func (m *PAHeadMutation) DepartmentCodeCleared() bool {
	_, ok := m.clearedFields[pahead.FieldDepartmentCode]
	return ok
}

// ResetDepartmentCode resets all changes to the "department_code" field.
func (m *PAHeadMutation) ResetDepartmentCode() {
	m.department_code = nil
	delete(m.clearedFields, pahead.FieldDepartmentCode)
}

// SetSupplierCode sets the "supplier_code" field.
func (m *PAHeadMutation) SetSupplierCode(s string) {
	m.supplier_code = &s
}

// SupplierCode returns the value of the "supplier_code" field in the mutation.
func (m *PAHeadMutation) SupplierCode() (r string, exists bool) {
	v := m.supplier_code
	if v == nil {
		return
	}
	return *v, true
}

// OldSupplierCode returns the old "supplier_code" field's value of the PAHead entity.
// If the PAHead object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PAHeadMutation) OldSupplierCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSupplierCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSupplierCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSupplierCode: %w", err)
	}
	return oldValue.SupplierCode, nil
}

// ResetSupplierCode resets all changes to the "supplier_code" field.
func (m *PAHeadMutation) ResetSupplierCode() {
	m.supplier_code = nil
}

// SetIsAdv sets the "is_adv" field.
func (m *PAHeadMutation) SetIsAdv(b bool) {
	m.is_adv = &b
}

// IsAdv returns the value of the "is_adv" field in the mutation.
func (m *PAHeadMutation) IsAdv() (r bool, exists bool) {
	v := m.is_adv
	if v == nil {
		return
	}
	return *v, true
}

// OldIsAdv returns the old "is_adv" field's value of the PAHead entity.
// If the PAHead object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PAHeadMutation) OldIsAdv(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsAdv is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsAdv requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsAdv: %w", err)
	}
	return oldValue.IsAdv, nil
}

// ResetIsAdv resets all changes to the "is_adv" field.
func (m *PAHeadMutation) ResetIsAdv() {
	m.is_adv = nil
}

// SetHasInvoice sets the "has_invoice" field.
func (m *PAHeadMutation) SetHasInvoice(b bool) {
	m.has_invoice = &b
}

// HasInvoice returns the value of the "has_invoice" field in the mutation.
func (m *PAHeadMutation) HasInvoice() (r bool, exists bool) {
	v := m.has_invoice
	if v == nil {
		return
	}
	return *v, true
}

// OldHasInvoice returns the old "has_invoice" field's value of the PAHead entity.
// If the PAHead object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PAHeadMutation) OldHasInvoice(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHasInvoice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHasInvoice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHasInvoice: %w", err)
	}
	return oldValue.HasInvoice, nil
}

// ResetHasInvoice resets all changes to the "has_invoice" field.
func (m *PAHeadMutation) ResetHasInvoice() {
	m.has_invoice = nil
}

// SetRemark sets the "remark" field.
func (m *PAHeadMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *PAHeadMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the PAHead entity.
// If the PAHead object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PAHeadMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ResetRemark resets all changes to the "remark" field.
func (m *PAHeadMutation) ResetRemark() {
	m.remark = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *PAHeadMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PAHeadMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the PAHead entity.
// If the PAHead object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PAHeadMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PAHeadMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PAHeadMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PAHeadMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the PAHead entity.
// If the PAHead object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PAHeadMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PAHeadMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the PAHeadMutation builder.
func (m *PAHeadMutation) Where(ps ...predicate.PAHead) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PAHeadMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PAHeadMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PAHead, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PAHeadMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PAHeadMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PAHead).
func (m *PAHeadMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PAHeadMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.code != nil {
		fields = append(fields, pahead.FieldCode)
	}
	if m.state != nil {
		fields = append(fields, pahead.FieldState)
	}
	if m.pay_amount != nil {
		fields = append(fields, pahead.FieldPayAmount)
	}
	if m.applicant != nil {
		fields = append(fields, pahead.FieldApplicant)
	}
	if m.department_code != nil {
		fields = append(fields, pahead.FieldDepartmentCode)
	}
	if m.supplier_code != nil {
		fields = append(fields, pahead.FieldSupplierCode)
	}
	if m.is_adv != nil {
		fields = append(fields, pahead.FieldIsAdv)
	}
	if m.has_invoice != nil {
		fields = append(fields, pahead.FieldHasInvoice)
	}
	if m.remark != nil {
		fields = append(fields, pahead.FieldRemark)
	}
	if m.created_at != nil {
		fields = append(fields, pahead.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, pahead.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PAHeadMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case pahead.FieldCode:
		return m.Code()
	case pahead.FieldState:
		return m.State()
	case pahead.FieldPayAmount:
		return m.PayAmount()
	case pahead.FieldApplicant:
		return m.Applicant()
	case pahead.FieldDepartmentCode:
		return m.DepartmentCode()
	case pahead.FieldSupplierCode:
		return m.SupplierCode()
	case pahead.FieldIsAdv:
		return m.IsAdv()
	case pahead.FieldHasInvoice:
		return m.HasInvoice()
	case pahead.FieldRemark:
		return m.Remark()
	case pahead.FieldCreatedAt:
		return m.CreatedAt()
	case pahead.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PAHeadMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case pahead.FieldCode:
		return m.OldCode(ctx)
	case pahead.FieldState:
		return m.OldState(ctx)
	case pahead.FieldPayAmount:
		return m.OldPayAmount(ctx)
	case pahead.FieldApplicant:
		return m.OldApplicant(ctx)
	case pahead.FieldDepartmentCode:
		return m.OldDepartmentCode(ctx)
	case pahead.FieldSupplierCode:
		return m.OldSupplierCode(ctx)
	case pahead.FieldIsAdv:
		return m.OldIsAdv(ctx)
	case pahead.FieldHasInvoice:
		return m.OldHasInvoice(ctx)
	case pahead.FieldRemark:
		return m.OldRemark(ctx)
	case pahead.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case pahead.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown PAHead field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PAHeadMutation) SetField(name string, value ent.Value) error {
	switch name {
	case pahead.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case pahead.FieldState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case pahead.FieldPayAmount:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPayAmount(v)
		return nil
	case pahead.FieldApplicant:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetApplicant(v)
		return nil
	case pahead.FieldDepartmentCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDepartmentCode(v)
		return nil
	case pahead.FieldSupplierCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSupplierCode(v)
		return nil
	case pahead.FieldIsAdv:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsAdv(v)
		return nil
	case pahead.FieldHasInvoice:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHasInvoice(v)
		return nil
	case pahead.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case pahead.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case pahead.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown PAHead field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PAHeadMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PAHeadMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PAHeadMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown PAHead numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PAHeadMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(pahead.FieldDepartmentCode) {
		fields = append(fields, pahead.FieldDepartmentCode)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PAHeadMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PAHeadMutation) ClearField(name string) error {
	switch name {
	case pahead.FieldDepartmentCode:
		m.ClearDepartmentCode()
		return nil
	}
	return fmt.Errorf("unknown PAHead nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PAHeadMutation) ResetField(name string) error {
	switch name {
	case pahead.FieldCode:
		m.ResetCode()
		return nil
	case pahead.FieldState:
		m.ResetState()
		return nil
	case pahead.FieldPayAmount:
		m.ResetPayAmount()
		return nil
	case pahead.FieldApplicant:
		m.ResetApplicant()
		return nil
	case pahead.FieldDepartmentCode:
		m.ResetDepartmentCode()
		return nil
	case pahead.FieldSupplierCode:
		m.ResetSupplierCode()
		return nil
	case pahead.FieldIsAdv:
		m.ResetIsAdv()
		return nil
	case pahead.FieldHasInvoice:
		m.ResetHasInvoice()
		return nil
	case pahead.FieldRemark:
		m.ResetRemark()
		return nil
	case pahead.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case pahead.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown PAHead field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PAHeadMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PAHeadMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PAHeadMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PAHeadMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PAHeadMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PAHeadMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PAHeadMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown PAHead unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PAHeadMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown PAHead edge %s", name)
}

// PARowMutation represents an operation that mutates the PARow nodes in the graph.
type PARowMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	head_code     *string
	row_code      *string
	grn_count     *int32
	addgrn_count  *int32
	grn_amount    *string
	pay_amount    *string
	description   *string
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*PARow, error)
	predicates    []predicate.PARow
}

var _ ent.Mutation = (*PARowMutation)(nil)

// parowOption allows management of the mutation configuration using functional options.
type parowOption func(*PARowMutation)

// newPARowMutation creates new mutation for the PARow entity.
func newPARowMutation(c config, op Op, opts ...parowOption) *PARowMutation {
	m := &PARowMutation{
		config:        c,
		op:            op,
		typ:           TypePARow,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPARowID sets the ID field of the mutation.
func withPARowID(id int64) parowOption {
	return func(m *PARowMutation) {
		var (
			err   error
			once  sync.Once
			value *PARow
		)
		m.oldValue = func(ctx context.Context) (*PARow, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PARow.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPARow sets the old PARow of the mutation.
func withPARow(node *PARow) parowOption {
	return func(m *PARowMutation) {
		m.oldValue = func(context.Context) (*PARow, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PARowMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PARowMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PARow entities.
func (m *PARowMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PARowMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PARowMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PARow.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetHeadCode sets the "head_code" field.
func (m *PARowMutation) SetHeadCode(s string) {
	m.head_code = &s
}

// HeadCode returns the value of the "head_code" field in the mutation.
func (m *PARowMutation) HeadCode() (r string, exists bool) {
	v := m.head_code
	if v == nil {
		return
	}
	return *v, true
}

// OldHeadCode returns the old "head_code" field's value of the PARow entity.
// If the PARow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PARowMutation) OldHeadCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHeadCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHeadCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeadCode: %w", err)
	}
	return oldValue.HeadCode, nil
}

// ResetHeadCode resets all changes to the "head_code" field.
func (m *PARowMutation) ResetHeadCode() {
	m.head_code = nil
}

// SetRowCode sets the "row_code" field.
func (m *PARowMutation) SetRowCode(s string) {
	m.row_code = &s
}

// RowCode returns the value of the "row_code" field in the mutation.
func (m *PARowMutation) RowCode() (r string, exists bool) {
	v := m.row_code
	if v == nil {
		return
	}
	return *v, true
}

// OldRowCode returns the old "row_code" field's value of the PARow entity.
// If the PARow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PARowMutation) OldRowCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRowCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRowCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRowCode: %w", err)
	}
	return oldValue.RowCode, nil
}

// ResetRowCode resets all changes to the "row_code" field.
func (m *PARowMutation) ResetRowCode() {
	m.row_code = nil
}

// SetGrnCount sets the "grn_count" field.
func (m *PARowMutation) SetGrnCount(i int32) {
	m.grn_count = &i
	m.addgrn_count = nil
}

// GrnCount returns the value of the "grn_count" field in the mutation.
func (m *PARowMutation) GrnCount() (r int32, exists bool) {
	v := m.grn_count
	if v == nil {
		return
	}
	return *v, true
}

// OldGrnCount returns the old "grn_count" field's value of the PARow entity.
// If the PARow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PARowMutation) OldGrnCount(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGrnCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGrnCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGrnCount: %w", err)
	}
	return oldValue.GrnCount, nil
}

// AddGrnCount adds i to the "grn_count" field.
func (m *PARowMutation) AddGrnCount(i int32) {
	if m.addgrn_count != nil {
		*m.addgrn_count += i
	} else {
		m.addgrn_count = &i
	}
}

// AddedGrnCount returns the value that was added to the "grn_count" field in this mutation.
func (m *PARowMutation) AddedGrnCount() (r int32, exists bool) {
	v := m.addgrn_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetGrnCount resets all changes to the "grn_count" field.
func (m *PARowMutation) ResetGrnCount() {
	m.grn_count = nil
	m.addgrn_count = nil
}

// SetGrnAmount sets the "grn_amount" field.
func (m *PARowMutation) SetGrnAmount(s string) {
	m.grn_amount = &s
}

// GrnAmount returns the value of the "grn_amount" field in the mutation.
func (m *PARowMutation) GrnAmount() (r string, exists bool) {
	v := m.grn_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldGrnAmount returns the old "grn_amount" field's value of the PARow entity.
// If the PARow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PARowMutation) OldGrnAmount(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGrnAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGrnAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGrnAmount: %w", err)
	}
	return oldValue.GrnAmount, nil
}

// ResetGrnAmount resets all changes to the "grn_amount" field.
func (m *PARowMutation) ResetGrnAmount() {
	m.grn_amount = nil
}

// SetPayAmount sets the "pay_amount" field.
func (m *PARowMutation) SetPayAmount(s string) {
	m.pay_amount = &s
}

// PayAmount returns the value of the "pay_amount" field in the mutation.
func (m *PARowMutation) PayAmount() (r string, exists bool) {
	v := m.pay_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldPayAmount returns the old "pay_amount" field's value of the PARow entity.
// If the PARow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PARowMutation) OldPayAmount(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPayAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPayAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPayAmount: %w", err)
	}
	return oldValue.PayAmount, nil
}

// ResetPayAmount resets all changes to the "pay_amount" field.
func (m *PARowMutation) ResetPayAmount() {
	m.pay_amount = nil
}

// SetDescription sets the "description" field.
func (m *PARowMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *PARowMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the PARow entity.
// If the PARow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PARowMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *PARowMutation) ResetDescription() {
	m.description = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *PARowMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PARowMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the PARow entity.
// If the PARow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PARowMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PARowMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PARowMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PARowMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the PARow entity.
// If the PARow object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PARowMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PARowMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the PARowMutation builder.
func (m *PARowMutation) Where(ps ...predicate.PARow) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PARowMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PARowMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PARow, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PARowMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PARowMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PARow).
func (m *PARowMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PARowMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.head_code != nil {
		fields = append(fields, parow.FieldHeadCode)
	}
	if m.row_code != nil {
		fields = append(fields, parow.FieldRowCode)
	}
	if m.grn_count != nil {
		fields = append(fields, parow.FieldGrnCount)
	}
	if m.grn_amount != nil {
		fields = append(fields, parow.FieldGrnAmount)
	}
	if m.pay_amount != nil {
		fields = append(fields, parow.FieldPayAmount)
	}
	if m.description != nil {
		fields = append(fields, parow.FieldDescription)
	}
	if m.created_at != nil {
		fields = append(fields, parow.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, parow.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PARowMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case parow.FieldHeadCode:
		return m.HeadCode()
	case parow.FieldRowCode:
		return m.RowCode()
	case parow.FieldGrnCount:
		return m.GrnCount()
	case parow.FieldGrnAmount:
		return m.GrnAmount()
	case parow.FieldPayAmount:
		return m.PayAmount()
	case parow.FieldDescription:
		return m.Description()
	case parow.FieldCreatedAt:
		return m.CreatedAt()
	case parow.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PARowMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case parow.FieldHeadCode:
		return m.OldHeadCode(ctx)
	case parow.FieldRowCode:
		return m.OldRowCode(ctx)
	case parow.FieldGrnCount:
		return m.OldGrnCount(ctx)
	case parow.FieldGrnAmount:
		return m.OldGrnAmount(ctx)
	case parow.FieldPayAmount:
		return m.OldPayAmount(ctx)
	case parow.FieldDescription:
		return m.OldDescription(ctx)
	case parow.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case parow.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown PARow field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PARowMutation) SetField(name string, value ent.Value) error {
	switch name {
	case parow.FieldHeadCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeadCode(v)
		return nil
	case parow.FieldRowCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRowCode(v)
		return nil
	case parow.FieldGrnCount:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGrnCount(v)
		return nil
	case parow.FieldGrnAmount:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGrnAmount(v)
		return nil
	case parow.FieldPayAmount:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPayAmount(v)
		return nil
	case parow.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case parow.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case parow.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown PARow field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PARowMutation) AddedFields() []string {
	var fields []string
	if m.addgrn_count != nil {
		fields = append(fields, parow.FieldGrnCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PARowMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case parow.FieldGrnCount:
		return m.AddedGrnCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PARowMutation) AddField(name string, value ent.Value) error {
	switch name {
	case parow.FieldGrnCount:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGrnCount(v)
		return nil
	}
	return fmt.Errorf("unknown PARow numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PARowMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PARowMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PARowMutation) ClearField(name string) error {
	return fmt.Errorf("unknown PARow nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PARowMutation) ResetField(name string) error {
	switch name {
	case parow.FieldHeadCode:
		m.ResetHeadCode()
		return nil
	case parow.FieldRowCode:
		m.ResetRowCode()
		return nil
	case parow.FieldGrnCount:
		m.ResetGrnCount()
		return nil
	case parow.FieldGrnAmount:
		m.ResetGrnAmount()
		return nil
	case parow.FieldPayAmount:
		m.ResetPayAmount()
		return nil
	case parow.FieldDescription:
		m.ResetDescription()
		return nil
	case parow.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case parow.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown PARow field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PARowMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PARowMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PARowMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PARowMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PARowMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PARowMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PARowMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown PARow unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PARowMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown PARow edge %s", name)
}

// TransMutation represents an operation that mutates the Trans nodes in the graph.
type TransMutation struct {
	config
	op            Op
	typ           string
	id            *int
	state         *string
	execute_state *string
	name          *string
	finished_at   *time.Time
	created_at    *time.Time
	updated_at    *time.Time
	updated_by    *string
	created_by    *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Trans, error)
	predicates    []predicate.Trans
}

var _ ent.Mutation = (*TransMutation)(nil)

// transOption allows management of the mutation configuration using functional options.
type transOption func(*TransMutation)

// newTransMutation creates new mutation for the Trans entity.
func newTransMutation(c config, op Op, opts ...transOption) *TransMutation {
	m := &TransMutation{
		config:        c,
		op:            op,
		typ:           TypeTrans,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTransID sets the ID field of the mutation.
func withTransID(id int) transOption {
	return func(m *TransMutation) {
		var (
			err   error
			once  sync.Once
			value *Trans
		)
		m.oldValue = func(ctx context.Context) (*Trans, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Trans.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTrans sets the old Trans of the mutation.
func withTrans(node *Trans) transOption {
	return func(m *TransMutation) {
		m.oldValue = func(context.Context) (*Trans, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TransMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TransMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TransMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TransMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Trans.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetState sets the "state" field.
func (m *TransMutation) SetState(s string) {
	m.state = &s
}

// State returns the value of the "state" field in the mutation.
func (m *TransMutation) State() (r string, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the Trans entity.
// If the Trans object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransMutation) OldState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ResetState resets all changes to the "state" field.
func (m *TransMutation) ResetState() {
	m.state = nil
}

// SetExecuteState sets the "execute_state" field.
func (m *TransMutation) SetExecuteState(s string) {
	m.execute_state = &s
}

// ExecuteState returns the value of the "execute_state" field in the mutation.
func (m *TransMutation) ExecuteState() (r string, exists bool) {
	v := m.execute_state
	if v == nil {
		return
	}
	return *v, true
}

// OldExecuteState returns the old "execute_state" field's value of the Trans entity.
// If the Trans object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransMutation) OldExecuteState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExecuteState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExecuteState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExecuteState: %w", err)
	}
	return oldValue.ExecuteState, nil
}

// ResetExecuteState resets all changes to the "execute_state" field.
func (m *TransMutation) ResetExecuteState() {
	m.execute_state = nil
}

// SetName sets the "name" field.
func (m *TransMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TransMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Trans entity.
// If the Trans object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TransMutation) ResetName() {
	m.name = nil
}

// SetFinishedAt sets the "finished_at" field.
func (m *TransMutation) SetFinishedAt(t time.Time) {
	m.finished_at = &t
}

// FinishedAt returns the value of the "finished_at" field in the mutation.
func (m *TransMutation) FinishedAt() (r time.Time, exists bool) {
	v := m.finished_at
	if v == nil {
		return
	}
	return *v, true
}

// OldFinishedAt returns the old "finished_at" field's value of the Trans entity.
// If the Trans object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransMutation) OldFinishedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFinishedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFinishedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFinishedAt: %w", err)
	}
	return oldValue.FinishedAt, nil
}

// ResetFinishedAt resets all changes to the "finished_at" field.
func (m *TransMutation) ResetFinishedAt() {
	m.finished_at = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TransMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TransMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Trans entity.
// If the Trans object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TransMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TransMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TransMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Trans entity.
// If the Trans object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TransMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUpdatedBy sets the "updated_by" field.
func (m *TransMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *TransMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Trans entity.
// If the Trans object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *TransMutation) ResetUpdatedBy() {
	m.updated_by = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *TransMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *TransMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Trans entity.
// If the Trans object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *TransMutation) ResetCreatedBy() {
	m.created_by = nil
}

// Where appends a list predicates to the TransMutation builder.
func (m *TransMutation) Where(ps ...predicate.Trans) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TransMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TransMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Trans, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TransMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TransMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Trans).
func (m *TransMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TransMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.state != nil {
		fields = append(fields, trans.FieldState)
	}
	if m.execute_state != nil {
		fields = append(fields, trans.FieldExecuteState)
	}
	if m.name != nil {
		fields = append(fields, trans.FieldName)
	}
	if m.finished_at != nil {
		fields = append(fields, trans.FieldFinishedAt)
	}
	if m.created_at != nil {
		fields = append(fields, trans.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, trans.FieldUpdatedAt)
	}
	if m.updated_by != nil {
		fields = append(fields, trans.FieldUpdatedBy)
	}
	if m.created_by != nil {
		fields = append(fields, trans.FieldCreatedBy)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TransMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case trans.FieldState:
		return m.State()
	case trans.FieldExecuteState:
		return m.ExecuteState()
	case trans.FieldName:
		return m.Name()
	case trans.FieldFinishedAt:
		return m.FinishedAt()
	case trans.FieldCreatedAt:
		return m.CreatedAt()
	case trans.FieldUpdatedAt:
		return m.UpdatedAt()
	case trans.FieldUpdatedBy:
		return m.UpdatedBy()
	case trans.FieldCreatedBy:
		return m.CreatedBy()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TransMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case trans.FieldState:
		return m.OldState(ctx)
	case trans.FieldExecuteState:
		return m.OldExecuteState(ctx)
	case trans.FieldName:
		return m.OldName(ctx)
	case trans.FieldFinishedAt:
		return m.OldFinishedAt(ctx)
	case trans.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case trans.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case trans.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case trans.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	}
	return nil, fmt.Errorf("unknown Trans field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TransMutation) SetField(name string, value ent.Value) error {
	switch name {
	case trans.FieldState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case trans.FieldExecuteState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExecuteState(v)
		return nil
	case trans.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case trans.FieldFinishedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFinishedAt(v)
		return nil
	case trans.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case trans.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case trans.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case trans.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	}
	return fmt.Errorf("unknown Trans field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TransMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TransMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TransMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Trans numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TransMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TransMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TransMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Trans nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TransMutation) ResetField(name string) error {
	switch name {
	case trans.FieldState:
		m.ResetState()
		return nil
	case trans.FieldExecuteState:
		m.ResetExecuteState()
		return nil
	case trans.FieldName:
		m.ResetName()
		return nil
	case trans.FieldFinishedAt:
		m.ResetFinishedAt()
		return nil
	case trans.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case trans.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case trans.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case trans.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	}
	return fmt.Errorf("unknown Trans field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TransMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TransMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TransMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TransMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TransMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TransMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TransMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Trans unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TransMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Trans edge %s", name)
}
