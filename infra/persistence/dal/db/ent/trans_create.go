// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"purchase/infra/persistence/dal/db/ent/trans"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TransCreate is the builder for creating a Trans entity.
type TransCreate struct {
	config
	mutation *TransMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetState sets the "state" field.
func (tc *TransCreate) SetState(s string) *TransCreate {
	tc.mutation.SetState(s)
	return tc
}

// SetName sets the "name" field.
func (tc *TransCreate) SetName(s string) *TransCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetFinishedAt sets the "finished_at" field.
func (tc *TransCreate) SetFinishedAt(t time.Time) *TransCreate {
	tc.mutation.SetFinishedAt(t)
	return tc
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (tc *TransCreate) SetNillableFinishedAt(t *time.Time) *TransCreate {
	if t != nil {
		tc.SetFinishedAt(*t)
	}
	return tc
}

// SetCreatedAt sets the "created_at" field.
func (tc *TransCreate) SetCreatedAt(t time.Time) *TransCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TransCreate) SetNillableCreatedAt(t *time.Time) *TransCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TransCreate) SetUpdatedAt(t time.Time) *TransCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TransCreate) SetNillableUpdatedAt(t *time.Time) *TransCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetUpdatedBy sets the "updated_by" field.
func (tc *TransCreate) SetUpdatedBy(s string) *TransCreate {
	tc.mutation.SetUpdatedBy(s)
	return tc
}

// SetCreatedBy sets the "created_by" field.
func (tc *TransCreate) SetCreatedBy(s string) *TransCreate {
	tc.mutation.SetCreatedBy(s)
	return tc
}

// Mutation returns the TransMutation object of the builder.
func (tc *TransCreate) Mutation() *TransMutation {
	return tc.mutation
}

// Save creates the Trans in the database.
func (tc *TransCreate) Save(ctx context.Context) (*Trans, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TransCreate) SaveX(ctx context.Context) *Trans {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TransCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TransCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TransCreate) defaults() {
	if _, ok := tc.mutation.FinishedAt(); !ok {
		v := trans.DefaultFinishedAt()
		tc.mutation.SetFinishedAt(v)
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := trans.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := trans.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TransCreate) check() error {
	if _, ok := tc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "Trans.state"`)}
	}
	if _, ok := tc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Trans.name"`)}
	}
	if _, ok := tc.mutation.FinishedAt(); !ok {
		return &ValidationError{Name: "finished_at", err: errors.New(`ent: missing required field "Trans.finished_at"`)}
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Trans.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Trans.updated_at"`)}
	}
	if _, ok := tc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "Trans.updated_by"`)}
	}
	if _, ok := tc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "Trans.created_by"`)}
	}
	return nil
}

func (tc *TransCreate) sqlSave(ctx context.Context) (*Trans, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TransCreate) createSpec() (*Trans, *sqlgraph.CreateSpec) {
	var (
		_node = &Trans{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(trans.Table, sqlgraph.NewFieldSpec(trans.FieldID, field.TypeInt))
	)
	_spec.OnConflict = tc.conflict
	if value, ok := tc.mutation.State(); ok {
		_spec.SetField(trans.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := tc.mutation.Name(); ok {
		_spec.SetField(trans.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tc.mutation.FinishedAt(); ok {
		_spec.SetField(trans.FieldFinishedAt, field.TypeTime, value)
		_node.FinishedAt = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(trans.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(trans.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.UpdatedBy(); ok {
		_spec.SetField(trans.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := tc.mutation.CreatedBy(); ok {
		_spec.SetField(trans.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Trans.Create().
//		SetState(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TransUpsert) {
//			SetState(v+v).
//		}).
//		Exec(ctx)
func (tc *TransCreate) OnConflict(opts ...sql.ConflictOption) *TransUpsertOne {
	tc.conflict = opts
	return &TransUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Trans.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TransCreate) OnConflictColumns(columns ...string) *TransUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TransUpsertOne{
		create: tc,
	}
}

type (
	// TransUpsertOne is the builder for "upsert"-ing
	//  one Trans node.
	TransUpsertOne struct {
		create *TransCreate
	}

	// TransUpsert is the "OnConflict" setter.
	TransUpsert struct {
		*sql.UpdateSet
	}
)

// SetState sets the "state" field.
func (u *TransUpsert) SetState(v string) *TransUpsert {
	u.Set(trans.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *TransUpsert) UpdateState() *TransUpsert {
	u.SetExcluded(trans.FieldState)
	return u
}

// SetName sets the "name" field.
func (u *TransUpsert) SetName(v string) *TransUpsert {
	u.Set(trans.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TransUpsert) UpdateName() *TransUpsert {
	u.SetExcluded(trans.FieldName)
	return u
}

// SetFinishedAt sets the "finished_at" field.
func (u *TransUpsert) SetFinishedAt(v time.Time) *TransUpsert {
	u.Set(trans.FieldFinishedAt, v)
	return u
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *TransUpsert) UpdateFinishedAt() *TransUpsert {
	u.SetExcluded(trans.FieldFinishedAt)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TransUpsert) SetCreatedAt(v time.Time) *TransUpsert {
	u.Set(trans.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TransUpsert) UpdateCreatedAt() *TransUpsert {
	u.SetExcluded(trans.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TransUpsert) SetUpdatedAt(v time.Time) *TransUpsert {
	u.Set(trans.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TransUpsert) UpdateUpdatedAt() *TransUpsert {
	u.SetExcluded(trans.FieldUpdatedAt)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *TransUpsert) SetUpdatedBy(v string) *TransUpsert {
	u.Set(trans.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *TransUpsert) UpdateUpdatedBy() *TransUpsert {
	u.SetExcluded(trans.FieldUpdatedBy)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *TransUpsert) SetCreatedBy(v string) *TransUpsert {
	u.Set(trans.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *TransUpsert) UpdateCreatedBy() *TransUpsert {
	u.SetExcluded(trans.FieldCreatedBy)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Trans.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TransUpsertOne) UpdateNewValues() *TransUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Trans.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TransUpsertOne) Ignore() *TransUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TransUpsertOne) DoNothing() *TransUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TransCreate.OnConflict
// documentation for more info.
func (u *TransUpsertOne) Update(set func(*TransUpsert)) *TransUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TransUpsert{UpdateSet: update})
	}))
	return u
}

// SetState sets the "state" field.
func (u *TransUpsertOne) SetState(v string) *TransUpsertOne {
	return u.Update(func(s *TransUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *TransUpsertOne) UpdateState() *TransUpsertOne {
	return u.Update(func(s *TransUpsert) {
		s.UpdateState()
	})
}

// SetName sets the "name" field.
func (u *TransUpsertOne) SetName(v string) *TransUpsertOne {
	return u.Update(func(s *TransUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TransUpsertOne) UpdateName() *TransUpsertOne {
	return u.Update(func(s *TransUpsert) {
		s.UpdateName()
	})
}

// SetFinishedAt sets the "finished_at" field.
func (u *TransUpsertOne) SetFinishedAt(v time.Time) *TransUpsertOne {
	return u.Update(func(s *TransUpsert) {
		s.SetFinishedAt(v)
	})
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *TransUpsertOne) UpdateFinishedAt() *TransUpsertOne {
	return u.Update(func(s *TransUpsert) {
		s.UpdateFinishedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TransUpsertOne) SetCreatedAt(v time.Time) *TransUpsertOne {
	return u.Update(func(s *TransUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TransUpsertOne) UpdateCreatedAt() *TransUpsertOne {
	return u.Update(func(s *TransUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TransUpsertOne) SetUpdatedAt(v time.Time) *TransUpsertOne {
	return u.Update(func(s *TransUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TransUpsertOne) UpdateUpdatedAt() *TransUpsertOne {
	return u.Update(func(s *TransUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *TransUpsertOne) SetUpdatedBy(v string) *TransUpsertOne {
	return u.Update(func(s *TransUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *TransUpsertOne) UpdateUpdatedBy() *TransUpsertOne {
	return u.Update(func(s *TransUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *TransUpsertOne) SetCreatedBy(v string) *TransUpsertOne {
	return u.Update(func(s *TransUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *TransUpsertOne) UpdateCreatedBy() *TransUpsertOne {
	return u.Update(func(s *TransUpsert) {
		s.UpdateCreatedBy()
	})
}

// Exec executes the query.
func (u *TransUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TransCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TransUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TransUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TransUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TransCreateBulk is the builder for creating many Trans entities in bulk.
type TransCreateBulk struct {
	config
	err      error
	builders []*TransCreate
	conflict []sql.ConflictOption
}

// Save creates the Trans entities in the database.
func (tcb *TransCreateBulk) Save(ctx context.Context) ([]*Trans, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Trans, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TransMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TransCreateBulk) SaveX(ctx context.Context) []*Trans {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TransCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TransCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Trans.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TransUpsert) {
//			SetState(v+v).
//		}).
//		Exec(ctx)
func (tcb *TransCreateBulk) OnConflict(opts ...sql.ConflictOption) *TransUpsertBulk {
	tcb.conflict = opts
	return &TransUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Trans.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TransCreateBulk) OnConflictColumns(columns ...string) *TransUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TransUpsertBulk{
		create: tcb,
	}
}

// TransUpsertBulk is the builder for "upsert"-ing
// a bulk of Trans nodes.
type TransUpsertBulk struct {
	create *TransCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Trans.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TransUpsertBulk) UpdateNewValues() *TransUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Trans.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TransUpsertBulk) Ignore() *TransUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TransUpsertBulk) DoNothing() *TransUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TransCreateBulk.OnConflict
// documentation for more info.
func (u *TransUpsertBulk) Update(set func(*TransUpsert)) *TransUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TransUpsert{UpdateSet: update})
	}))
	return u
}

// SetState sets the "state" field.
func (u *TransUpsertBulk) SetState(v string) *TransUpsertBulk {
	return u.Update(func(s *TransUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *TransUpsertBulk) UpdateState() *TransUpsertBulk {
	return u.Update(func(s *TransUpsert) {
		s.UpdateState()
	})
}

// SetName sets the "name" field.
func (u *TransUpsertBulk) SetName(v string) *TransUpsertBulk {
	return u.Update(func(s *TransUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TransUpsertBulk) UpdateName() *TransUpsertBulk {
	return u.Update(func(s *TransUpsert) {
		s.UpdateName()
	})
}

// SetFinishedAt sets the "finished_at" field.
func (u *TransUpsertBulk) SetFinishedAt(v time.Time) *TransUpsertBulk {
	return u.Update(func(s *TransUpsert) {
		s.SetFinishedAt(v)
	})
}

// UpdateFinishedAt sets the "finished_at" field to the value that was provided on create.
func (u *TransUpsertBulk) UpdateFinishedAt() *TransUpsertBulk {
	return u.Update(func(s *TransUpsert) {
		s.UpdateFinishedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TransUpsertBulk) SetCreatedAt(v time.Time) *TransUpsertBulk {
	return u.Update(func(s *TransUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TransUpsertBulk) UpdateCreatedAt() *TransUpsertBulk {
	return u.Update(func(s *TransUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TransUpsertBulk) SetUpdatedAt(v time.Time) *TransUpsertBulk {
	return u.Update(func(s *TransUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TransUpsertBulk) UpdateUpdatedAt() *TransUpsertBulk {
	return u.Update(func(s *TransUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *TransUpsertBulk) SetUpdatedBy(v string) *TransUpsertBulk {
	return u.Update(func(s *TransUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *TransUpsertBulk) UpdateUpdatedBy() *TransUpsertBulk {
	return u.Update(func(s *TransUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *TransUpsertBulk) SetCreatedBy(v string) *TransUpsertBulk {
	return u.Update(func(s *TransUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *TransUpsertBulk) UpdateCreatedBy() *TransUpsertBulk {
	return u.Update(func(s *TransUpsert) {
		s.UpdateCreatedBy()
	})
}

// Exec executes the query.
func (u *TransUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TransCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TransCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TransUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
