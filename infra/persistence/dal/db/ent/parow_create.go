// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"purchase/infra/persistence/dal/db/ent/parow"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PARowCreate is the builder for creating a PARow entity.
type PARowCreate struct {
	config
	mutation *PARowMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetHeadCode sets the "head_code" field.
func (prc *PARowCreate) SetHeadCode(s string) *PARowCreate {
	prc.mutation.SetHeadCode(s)
	return prc
}

// SetRowCode sets the "row_code" field.
func (prc *PARowCreate) SetRowCode(s string) *PARowCreate {
	prc.mutation.SetRowCode(s)
	return prc
}

// SetGrnCount sets the "grn_count" field.
func (prc *PARowCreate) SetGrnCount(i int32) *PARowCreate {
	prc.mutation.SetGrnCount(i)
	return prc
}

// SetGrnAmount sets the "grn_amount" field.
func (prc *PARowCreate) SetGrnAmount(s string) *PARowCreate {
	prc.mutation.SetGrnAmount(s)
	return prc
}

// SetPayAmount sets the "pay_amount" field.
func (prc *PARowCreate) SetPayAmount(s string) *PARowCreate {
	prc.mutation.SetPayAmount(s)
	return prc
}

// SetDescription sets the "description" field.
func (prc *PARowCreate) SetDescription(s string) *PARowCreate {
	prc.mutation.SetDescription(s)
	return prc
}

// SetCreatedAt sets the "created_at" field.
func (prc *PARowCreate) SetCreatedAt(t time.Time) *PARowCreate {
	prc.mutation.SetCreatedAt(t)
	return prc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (prc *PARowCreate) SetNillableCreatedAt(t *time.Time) *PARowCreate {
	if t != nil {
		prc.SetCreatedAt(*t)
	}
	return prc
}

// SetUpdatedAt sets the "updated_at" field.
func (prc *PARowCreate) SetUpdatedAt(t time.Time) *PARowCreate {
	prc.mutation.SetUpdatedAt(t)
	return prc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (prc *PARowCreate) SetNillableUpdatedAt(t *time.Time) *PARowCreate {
	if t != nil {
		prc.SetUpdatedAt(*t)
	}
	return prc
}

// SetID sets the "id" field.
func (prc *PARowCreate) SetID(i int64) *PARowCreate {
	prc.mutation.SetID(i)
	return prc
}

// Mutation returns the PARowMutation object of the builder.
func (prc *PARowCreate) Mutation() *PARowMutation {
	return prc.mutation
}

// Save creates the PARow in the database.
func (prc *PARowCreate) Save(ctx context.Context) (*PARow, error) {
	prc.defaults()
	return withHooks(ctx, prc.sqlSave, prc.mutation, prc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (prc *PARowCreate) SaveX(ctx context.Context) *PARow {
	v, err := prc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prc *PARowCreate) Exec(ctx context.Context) error {
	_, err := prc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prc *PARowCreate) ExecX(ctx context.Context) {
	if err := prc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (prc *PARowCreate) defaults() {
	if _, ok := prc.mutation.CreatedAt(); !ok {
		v := parow.DefaultCreatedAt()
		prc.mutation.SetCreatedAt(v)
	}
	if _, ok := prc.mutation.UpdatedAt(); !ok {
		v := parow.DefaultUpdatedAt()
		prc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (prc *PARowCreate) check() error {
	if _, ok := prc.mutation.HeadCode(); !ok {
		return &ValidationError{Name: "head_code", err: errors.New(`ent: missing required field "PARow.head_code"`)}
	}
	if _, ok := prc.mutation.RowCode(); !ok {
		return &ValidationError{Name: "row_code", err: errors.New(`ent: missing required field "PARow.row_code"`)}
	}
	if _, ok := prc.mutation.GrnCount(); !ok {
		return &ValidationError{Name: "grn_count", err: errors.New(`ent: missing required field "PARow.grn_count"`)}
	}
	if _, ok := prc.mutation.GrnAmount(); !ok {
		return &ValidationError{Name: "grn_amount", err: errors.New(`ent: missing required field "PARow.grn_amount"`)}
	}
	if _, ok := prc.mutation.PayAmount(); !ok {
		return &ValidationError{Name: "pay_amount", err: errors.New(`ent: missing required field "PARow.pay_amount"`)}
	}
	if _, ok := prc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "PARow.description"`)}
	}
	if _, ok := prc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PARow.created_at"`)}
	}
	if _, ok := prc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PARow.updated_at"`)}
	}
	return nil
}

func (prc *PARowCreate) sqlSave(ctx context.Context) (*PARow, error) {
	if err := prc.check(); err != nil {
		return nil, err
	}
	_node, _spec := prc.createSpec()
	if err := sqlgraph.CreateNode(ctx, prc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	prc.mutation.id = &_node.ID
	prc.mutation.done = true
	return _node, nil
}

func (prc *PARowCreate) createSpec() (*PARow, *sqlgraph.CreateSpec) {
	var (
		_node = &PARow{config: prc.config}
		_spec = sqlgraph.NewCreateSpec(parow.Table, sqlgraph.NewFieldSpec(parow.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = prc.conflict
	if id, ok := prc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := prc.mutation.HeadCode(); ok {
		_spec.SetField(parow.FieldHeadCode, field.TypeString, value)
		_node.HeadCode = value
	}
	if value, ok := prc.mutation.RowCode(); ok {
		_spec.SetField(parow.FieldRowCode, field.TypeString, value)
		_node.RowCode = value
	}
	if value, ok := prc.mutation.GrnCount(); ok {
		_spec.SetField(parow.FieldGrnCount, field.TypeInt32, value)
		_node.GrnCount = value
	}
	if value, ok := prc.mutation.GrnAmount(); ok {
		_spec.SetField(parow.FieldGrnAmount, field.TypeString, value)
		_node.GrnAmount = value
	}
	if value, ok := prc.mutation.PayAmount(); ok {
		_spec.SetField(parow.FieldPayAmount, field.TypeString, value)
		_node.PayAmount = value
	}
	if value, ok := prc.mutation.Description(); ok {
		_spec.SetField(parow.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := prc.mutation.CreatedAt(); ok {
		_spec.SetField(parow.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := prc.mutation.UpdatedAt(); ok {
		_spec.SetField(parow.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PARow.Create().
//		SetHeadCode(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PARowUpsert) {
//			SetHeadCode(v+v).
//		}).
//		Exec(ctx)
func (prc *PARowCreate) OnConflict(opts ...sql.ConflictOption) *PARowUpsertOne {
	prc.conflict = opts
	return &PARowUpsertOne{
		create: prc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PARow.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (prc *PARowCreate) OnConflictColumns(columns ...string) *PARowUpsertOne {
	prc.conflict = append(prc.conflict, sql.ConflictColumns(columns...))
	return &PARowUpsertOne{
		create: prc,
	}
}

type (
	// PARowUpsertOne is the builder for "upsert"-ing
	//  one PARow node.
	PARowUpsertOne struct {
		create *PARowCreate
	}

	// PARowUpsert is the "OnConflict" setter.
	PARowUpsert struct {
		*sql.UpdateSet
	}
)

// SetHeadCode sets the "head_code" field.
func (u *PARowUpsert) SetHeadCode(v string) *PARowUpsert {
	u.Set(parow.FieldHeadCode, v)
	return u
}

// UpdateHeadCode sets the "head_code" field to the value that was provided on create.
func (u *PARowUpsert) UpdateHeadCode() *PARowUpsert {
	u.SetExcluded(parow.FieldHeadCode)
	return u
}

// SetRowCode sets the "row_code" field.
func (u *PARowUpsert) SetRowCode(v string) *PARowUpsert {
	u.Set(parow.FieldRowCode, v)
	return u
}

// UpdateRowCode sets the "row_code" field to the value that was provided on create.
func (u *PARowUpsert) UpdateRowCode() *PARowUpsert {
	u.SetExcluded(parow.FieldRowCode)
	return u
}

// SetGrnCount sets the "grn_count" field.
func (u *PARowUpsert) SetGrnCount(v int32) *PARowUpsert {
	u.Set(parow.FieldGrnCount, v)
	return u
}

// UpdateGrnCount sets the "grn_count" field to the value that was provided on create.
func (u *PARowUpsert) UpdateGrnCount() *PARowUpsert {
	u.SetExcluded(parow.FieldGrnCount)
	return u
}

// AddGrnCount adds v to the "grn_count" field.
func (u *PARowUpsert) AddGrnCount(v int32) *PARowUpsert {
	u.Add(parow.FieldGrnCount, v)
	return u
}

// SetGrnAmount sets the "grn_amount" field.
func (u *PARowUpsert) SetGrnAmount(v string) *PARowUpsert {
	u.Set(parow.FieldGrnAmount, v)
	return u
}

// UpdateGrnAmount sets the "grn_amount" field to the value that was provided on create.
func (u *PARowUpsert) UpdateGrnAmount() *PARowUpsert {
	u.SetExcluded(parow.FieldGrnAmount)
	return u
}

// SetPayAmount sets the "pay_amount" field.
func (u *PARowUpsert) SetPayAmount(v string) *PARowUpsert {
	u.Set(parow.FieldPayAmount, v)
	return u
}

// UpdatePayAmount sets the "pay_amount" field to the value that was provided on create.
func (u *PARowUpsert) UpdatePayAmount() *PARowUpsert {
	u.SetExcluded(parow.FieldPayAmount)
	return u
}

// SetDescription sets the "description" field.
func (u *PARowUpsert) SetDescription(v string) *PARowUpsert {
	u.Set(parow.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PARowUpsert) UpdateDescription() *PARowUpsert {
	u.SetExcluded(parow.FieldDescription)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PARowUpsert) SetCreatedAt(v time.Time) *PARowUpsert {
	u.Set(parow.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PARowUpsert) UpdateCreatedAt() *PARowUpsert {
	u.SetExcluded(parow.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PARowUpsert) SetUpdatedAt(v time.Time) *PARowUpsert {
	u.Set(parow.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PARowUpsert) UpdateUpdatedAt() *PARowUpsert {
	u.SetExcluded(parow.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PARow.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(parow.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PARowUpsertOne) UpdateNewValues() *PARowUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(parow.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PARow.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PARowUpsertOne) Ignore() *PARowUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PARowUpsertOne) DoNothing() *PARowUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PARowCreate.OnConflict
// documentation for more info.
func (u *PARowUpsertOne) Update(set func(*PARowUpsert)) *PARowUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PARowUpsert{UpdateSet: update})
	}))
	return u
}

// SetHeadCode sets the "head_code" field.
func (u *PARowUpsertOne) SetHeadCode(v string) *PARowUpsertOne {
	return u.Update(func(s *PARowUpsert) {
		s.SetHeadCode(v)
	})
}

// UpdateHeadCode sets the "head_code" field to the value that was provided on create.
func (u *PARowUpsertOne) UpdateHeadCode() *PARowUpsertOne {
	return u.Update(func(s *PARowUpsert) {
		s.UpdateHeadCode()
	})
}

// SetRowCode sets the "row_code" field.
func (u *PARowUpsertOne) SetRowCode(v string) *PARowUpsertOne {
	return u.Update(func(s *PARowUpsert) {
		s.SetRowCode(v)
	})
}

// UpdateRowCode sets the "row_code" field to the value that was provided on create.
func (u *PARowUpsertOne) UpdateRowCode() *PARowUpsertOne {
	return u.Update(func(s *PARowUpsert) {
		s.UpdateRowCode()
	})
}

// SetGrnCount sets the "grn_count" field.
func (u *PARowUpsertOne) SetGrnCount(v int32) *PARowUpsertOne {
	return u.Update(func(s *PARowUpsert) {
		s.SetGrnCount(v)
	})
}

// AddGrnCount adds v to the "grn_count" field.
func (u *PARowUpsertOne) AddGrnCount(v int32) *PARowUpsertOne {
	return u.Update(func(s *PARowUpsert) {
		s.AddGrnCount(v)
	})
}

// UpdateGrnCount sets the "grn_count" field to the value that was provided on create.
func (u *PARowUpsertOne) UpdateGrnCount() *PARowUpsertOne {
	return u.Update(func(s *PARowUpsert) {
		s.UpdateGrnCount()
	})
}

// SetGrnAmount sets the "grn_amount" field.
func (u *PARowUpsertOne) SetGrnAmount(v string) *PARowUpsertOne {
	return u.Update(func(s *PARowUpsert) {
		s.SetGrnAmount(v)
	})
}

// UpdateGrnAmount sets the "grn_amount" field to the value that was provided on create.
func (u *PARowUpsertOne) UpdateGrnAmount() *PARowUpsertOne {
	return u.Update(func(s *PARowUpsert) {
		s.UpdateGrnAmount()
	})
}

// SetPayAmount sets the "pay_amount" field.
func (u *PARowUpsertOne) SetPayAmount(v string) *PARowUpsertOne {
	return u.Update(func(s *PARowUpsert) {
		s.SetPayAmount(v)
	})
}

// UpdatePayAmount sets the "pay_amount" field to the value that was provided on create.
func (u *PARowUpsertOne) UpdatePayAmount() *PARowUpsertOne {
	return u.Update(func(s *PARowUpsert) {
		s.UpdatePayAmount()
	})
}

// SetDescription sets the "description" field.
func (u *PARowUpsertOne) SetDescription(v string) *PARowUpsertOne {
	return u.Update(func(s *PARowUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PARowUpsertOne) UpdateDescription() *PARowUpsertOne {
	return u.Update(func(s *PARowUpsert) {
		s.UpdateDescription()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *PARowUpsertOne) SetCreatedAt(v time.Time) *PARowUpsertOne {
	return u.Update(func(s *PARowUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PARowUpsertOne) UpdateCreatedAt() *PARowUpsertOne {
	return u.Update(func(s *PARowUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PARowUpsertOne) SetUpdatedAt(v time.Time) *PARowUpsertOne {
	return u.Update(func(s *PARowUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PARowUpsertOne) UpdateUpdatedAt() *PARowUpsertOne {
	return u.Update(func(s *PARowUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *PARowUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PARowCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PARowUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PARowUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PARowUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PARowCreateBulk is the builder for creating many PARow entities in bulk.
type PARowCreateBulk struct {
	config
	err      error
	builders []*PARowCreate
	conflict []sql.ConflictOption
}

// Save creates the PARow entities in the database.
func (prcb *PARowCreateBulk) Save(ctx context.Context) ([]*PARow, error) {
	if prcb.err != nil {
		return nil, prcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(prcb.builders))
	nodes := make([]*PARow, len(prcb.builders))
	mutators := make([]Mutator, len(prcb.builders))
	for i := range prcb.builders {
		func(i int, root context.Context) {
			builder := prcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PARowMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, prcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = prcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, prcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, prcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (prcb *PARowCreateBulk) SaveX(ctx context.Context) []*PARow {
	v, err := prcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prcb *PARowCreateBulk) Exec(ctx context.Context) error {
	_, err := prcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prcb *PARowCreateBulk) ExecX(ctx context.Context) {
	if err := prcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PARow.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PARowUpsert) {
//			SetHeadCode(v+v).
//		}).
//		Exec(ctx)
func (prcb *PARowCreateBulk) OnConflict(opts ...sql.ConflictOption) *PARowUpsertBulk {
	prcb.conflict = opts
	return &PARowUpsertBulk{
		create: prcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PARow.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (prcb *PARowCreateBulk) OnConflictColumns(columns ...string) *PARowUpsertBulk {
	prcb.conflict = append(prcb.conflict, sql.ConflictColumns(columns...))
	return &PARowUpsertBulk{
		create: prcb,
	}
}

// PARowUpsertBulk is the builder for "upsert"-ing
// a bulk of PARow nodes.
type PARowUpsertBulk struct {
	create *PARowCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PARow.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(parow.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PARowUpsertBulk) UpdateNewValues() *PARowUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(parow.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PARow.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PARowUpsertBulk) Ignore() *PARowUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PARowUpsertBulk) DoNothing() *PARowUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PARowCreateBulk.OnConflict
// documentation for more info.
func (u *PARowUpsertBulk) Update(set func(*PARowUpsert)) *PARowUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PARowUpsert{UpdateSet: update})
	}))
	return u
}

// SetHeadCode sets the "head_code" field.
func (u *PARowUpsertBulk) SetHeadCode(v string) *PARowUpsertBulk {
	return u.Update(func(s *PARowUpsert) {
		s.SetHeadCode(v)
	})
}

// UpdateHeadCode sets the "head_code" field to the value that was provided on create.
func (u *PARowUpsertBulk) UpdateHeadCode() *PARowUpsertBulk {
	return u.Update(func(s *PARowUpsert) {
		s.UpdateHeadCode()
	})
}

// SetRowCode sets the "row_code" field.
func (u *PARowUpsertBulk) SetRowCode(v string) *PARowUpsertBulk {
	return u.Update(func(s *PARowUpsert) {
		s.SetRowCode(v)
	})
}

// UpdateRowCode sets the "row_code" field to the value that was provided on create.
func (u *PARowUpsertBulk) UpdateRowCode() *PARowUpsertBulk {
	return u.Update(func(s *PARowUpsert) {
		s.UpdateRowCode()
	})
}

// SetGrnCount sets the "grn_count" field.
func (u *PARowUpsertBulk) SetGrnCount(v int32) *PARowUpsertBulk {
	return u.Update(func(s *PARowUpsert) {
		s.SetGrnCount(v)
	})
}

// AddGrnCount adds v to the "grn_count" field.
func (u *PARowUpsertBulk) AddGrnCount(v int32) *PARowUpsertBulk {
	return u.Update(func(s *PARowUpsert) {
		s.AddGrnCount(v)
	})
}

// UpdateGrnCount sets the "grn_count" field to the value that was provided on create.
func (u *PARowUpsertBulk) UpdateGrnCount() *PARowUpsertBulk {
	return u.Update(func(s *PARowUpsert) {
		s.UpdateGrnCount()
	})
}

// SetGrnAmount sets the "grn_amount" field.
func (u *PARowUpsertBulk) SetGrnAmount(v string) *PARowUpsertBulk {
	return u.Update(func(s *PARowUpsert) {
		s.SetGrnAmount(v)
	})
}

// UpdateGrnAmount sets the "grn_amount" field to the value that was provided on create.
func (u *PARowUpsertBulk) UpdateGrnAmount() *PARowUpsertBulk {
	return u.Update(func(s *PARowUpsert) {
		s.UpdateGrnAmount()
	})
}

// SetPayAmount sets the "pay_amount" field.
func (u *PARowUpsertBulk) SetPayAmount(v string) *PARowUpsertBulk {
	return u.Update(func(s *PARowUpsert) {
		s.SetPayAmount(v)
	})
}

// UpdatePayAmount sets the "pay_amount" field to the value that was provided on create.
func (u *PARowUpsertBulk) UpdatePayAmount() *PARowUpsertBulk {
	return u.Update(func(s *PARowUpsert) {
		s.UpdatePayAmount()
	})
}

// SetDescription sets the "description" field.
func (u *PARowUpsertBulk) SetDescription(v string) *PARowUpsertBulk {
	return u.Update(func(s *PARowUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PARowUpsertBulk) UpdateDescription() *PARowUpsertBulk {
	return u.Update(func(s *PARowUpsert) {
		s.UpdateDescription()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *PARowUpsertBulk) SetCreatedAt(v time.Time) *PARowUpsertBulk {
	return u.Update(func(s *PARowUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PARowUpsertBulk) UpdateCreatedAt() *PARowUpsertBulk {
	return u.Update(func(s *PARowUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PARowUpsertBulk) SetUpdatedAt(v time.Time) *PARowUpsertBulk {
	return u.Update(func(s *PARowUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PARowUpsertBulk) UpdateUpdatedAt() *PARowUpsertBulk {
	return u.Update(func(s *PARowUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *PARowUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PARowCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PARowCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PARowUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
