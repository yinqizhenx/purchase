// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"purchase/infra/persistence/dal/db/ent/pahead"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PAHead is the model entity for the PAHead schema.
type PAHead struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// State holds the value of the "state" field.
	State string `json:"state,omitempty"`
	// PayAmount holds the value of the "pay_amount" field.
	PayAmount string `json:"pay_amount,omitempty"`
	// Applicant holds the value of the "applicant" field.
	Applicant string `json:"applicant,omitempty"`
	// DepartmentCode holds the value of the "department_code" field.
	DepartmentCode string `json:"department_code,omitempty"`
	// SupplierCode holds the value of the "supplier_code" field.
	SupplierCode string `json:"supplier_code,omitempty"`
	// IsAdv holds the value of the "is_adv" field.
	IsAdv bool `json:"is_adv,omitempty"`
	// HasInvoice holds the value of the "has_invoice" field.
	HasInvoice bool `json:"has_invoice,omitempty"`
	// Remark holds the value of the "remark" field.
	Remark string `json:"remark,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PAHead) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case pahead.FieldIsAdv, pahead.FieldHasInvoice:
			values[i] = new(sql.NullBool)
		case pahead.FieldID:
			values[i] = new(sql.NullInt64)
		case pahead.FieldCode, pahead.FieldState, pahead.FieldPayAmount, pahead.FieldApplicant, pahead.FieldDepartmentCode, pahead.FieldSupplierCode, pahead.FieldRemark:
			values[i] = new(sql.NullString)
		case pahead.FieldCreatedAt, pahead.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PAHead fields.
func (ph *PAHead) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pahead.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ph.ID = int64(value.Int64)
		case pahead.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				ph.Code = value.String
			}
		case pahead.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				ph.State = value.String
			}
		case pahead.FieldPayAmount:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pay_amount", values[i])
			} else if value.Valid {
				ph.PayAmount = value.String
			}
		case pahead.FieldApplicant:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field applicant", values[i])
			} else if value.Valid {
				ph.Applicant = value.String
			}
		case pahead.FieldDepartmentCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field department_code", values[i])
			} else if value.Valid {
				ph.DepartmentCode = value.String
			}
		case pahead.FieldSupplierCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field supplier_code", values[i])
			} else if value.Valid {
				ph.SupplierCode = value.String
			}
		case pahead.FieldIsAdv:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_adv", values[i])
			} else if value.Valid {
				ph.IsAdv = value.Bool
			}
		case pahead.FieldHasInvoice:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_invoice", values[i])
			} else if value.Valid {
				ph.HasInvoice = value.Bool
			}
		case pahead.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				ph.Remark = value.String
			}
		case pahead.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ph.CreatedAt = value.Time
			}
		case pahead.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ph.UpdatedAt = value.Time
			}
		default:
			ph.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PAHead.
// This includes values selected through modifiers, order, etc.
func (ph *PAHead) Value(name string) (ent.Value, error) {
	return ph.selectValues.Get(name)
}

// Update returns a builder for updating this PAHead.
// Note that you need to call PAHead.Unwrap() before calling this method if this PAHead
// was returned from a transaction, and the transaction was committed or rolled back.
func (ph *PAHead) Update() *PAHeadUpdateOne {
	return NewPAHeadClient(ph.config).UpdateOne(ph)
}

// Unwrap unwraps the PAHead entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ph *PAHead) Unwrap() *PAHead {
	_tx, ok := ph.config.driver.(*txDriver)
	if !ok {
		panic("ent: PAHead is not a transactional entity")
	}
	ph.config.driver = _tx.drv
	return ph
}

// String implements the fmt.Stringer.
func (ph *PAHead) String() string {
	var builder strings.Builder
	builder.WriteString("PAHead(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ph.ID))
	builder.WriteString("code=")
	builder.WriteString(ph.Code)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(ph.State)
	builder.WriteString(", ")
	builder.WriteString("pay_amount=")
	builder.WriteString(ph.PayAmount)
	builder.WriteString(", ")
	builder.WriteString("applicant=")
	builder.WriteString(ph.Applicant)
	builder.WriteString(", ")
	builder.WriteString("department_code=")
	builder.WriteString(ph.DepartmentCode)
	builder.WriteString(", ")
	builder.WriteString("supplier_code=")
	builder.WriteString(ph.SupplierCode)
	builder.WriteString(", ")
	builder.WriteString("is_adv=")
	builder.WriteString(fmt.Sprintf("%v", ph.IsAdv))
	builder.WriteString(", ")
	builder.WriteString("has_invoice=")
	builder.WriteString(fmt.Sprintf("%v", ph.HasInvoice))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(ph.Remark)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ph.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ph.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PAHeads is a parsable slice of PAHead.
type PAHeads []*PAHead
