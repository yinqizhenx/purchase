// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"purchase/infra/persistence/dal/db/ent/asynctask"
	"purchase/infra/persistence/dal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AsyncTaskUpdate is the builder for updating AsyncTask entities.
type AsyncTaskUpdate struct {
	config
	hooks    []Hook
	mutation *AsyncTaskMutation
}

// Where appends a list predicates to the AsyncTaskUpdate builder.
func (atu *AsyncTaskUpdate) Where(ps ...predicate.AsyncTask) *AsyncTaskUpdate {
	atu.mutation.Where(ps...)
	return atu
}

// SetTaskID sets the "task_id" field.
func (atu *AsyncTaskUpdate) SetTaskID(s string) *AsyncTaskUpdate {
	atu.mutation.SetTaskID(s)
	return atu
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (atu *AsyncTaskUpdate) SetNillableTaskID(s *string) *AsyncTaskUpdate {
	if s != nil {
		atu.SetTaskID(*s)
	}
	return atu
}

// SetTaskType sets the "task_type" field.
func (atu *AsyncTaskUpdate) SetTaskType(s string) *AsyncTaskUpdate {
	atu.mutation.SetTaskType(s)
	return atu
}

// SetNillableTaskType sets the "task_type" field if the given value is not nil.
func (atu *AsyncTaskUpdate) SetNillableTaskType(s *string) *AsyncTaskUpdate {
	if s != nil {
		atu.SetTaskType(*s)
	}
	return atu
}

// SetTaskName sets the "task_name" field.
func (atu *AsyncTaskUpdate) SetTaskName(s string) *AsyncTaskUpdate {
	atu.mutation.SetTaskName(s)
	return atu
}

// SetNillableTaskName sets the "task_name" field if the given value is not nil.
func (atu *AsyncTaskUpdate) SetNillableTaskName(s *string) *AsyncTaskUpdate {
	if s != nil {
		atu.SetTaskName(*s)
	}
	return atu
}

// SetTaskData sets the "task_data" field.
func (atu *AsyncTaskUpdate) SetTaskData(s string) *AsyncTaskUpdate {
	atu.mutation.SetTaskData(s)
	return atu
}

// SetNillableTaskData sets the "task_data" field if the given value is not nil.
func (atu *AsyncTaskUpdate) SetNillableTaskData(s *string) *AsyncTaskUpdate {
	if s != nil {
		atu.SetTaskData(*s)
	}
	return atu
}

// SetState sets the "state" field.
func (atu *AsyncTaskUpdate) SetState(s string) *AsyncTaskUpdate {
	atu.mutation.SetState(s)
	return atu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (atu *AsyncTaskUpdate) SetNillableState(s *string) *AsyncTaskUpdate {
	if s != nil {
		atu.SetState(*s)
	}
	return atu
}

// SetCreatedAt sets the "created_at" field.
func (atu *AsyncTaskUpdate) SetCreatedAt(t time.Time) *AsyncTaskUpdate {
	atu.mutation.SetCreatedAt(t)
	return atu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (atu *AsyncTaskUpdate) SetNillableCreatedAt(t *time.Time) *AsyncTaskUpdate {
	if t != nil {
		atu.SetCreatedAt(*t)
	}
	return atu
}

// SetUpdatedAt sets the "updated_at" field.
func (atu *AsyncTaskUpdate) SetUpdatedAt(t time.Time) *AsyncTaskUpdate {
	atu.mutation.SetUpdatedAt(t)
	return atu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (atu *AsyncTaskUpdate) SetNillableUpdatedAt(t *time.Time) *AsyncTaskUpdate {
	if t != nil {
		atu.SetUpdatedAt(*t)
	}
	return atu
}

// Mutation returns the AsyncTaskMutation object of the builder.
func (atu *AsyncTaskUpdate) Mutation() *AsyncTaskMutation {
	return atu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (atu *AsyncTaskUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, atu.sqlSave, atu.mutation, atu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atu *AsyncTaskUpdate) SaveX(ctx context.Context) int {
	affected, err := atu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (atu *AsyncTaskUpdate) Exec(ctx context.Context) error {
	_, err := atu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atu *AsyncTaskUpdate) ExecX(ctx context.Context) {
	if err := atu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (atu *AsyncTaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(asynctask.Table, asynctask.Columns, sqlgraph.NewFieldSpec(asynctask.FieldID, field.TypeInt64))
	if ps := atu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atu.mutation.TaskID(); ok {
		_spec.SetField(asynctask.FieldTaskID, field.TypeString, value)
	}
	if value, ok := atu.mutation.TaskType(); ok {
		_spec.SetField(asynctask.FieldTaskType, field.TypeString, value)
	}
	if value, ok := atu.mutation.TaskName(); ok {
		_spec.SetField(asynctask.FieldTaskName, field.TypeString, value)
	}
	if value, ok := atu.mutation.TaskData(); ok {
		_spec.SetField(asynctask.FieldTaskData, field.TypeString, value)
	}
	if value, ok := atu.mutation.State(); ok {
		_spec.SetField(asynctask.FieldState, field.TypeString, value)
	}
	if value, ok := atu.mutation.CreatedAt(); ok {
		_spec.SetField(asynctask.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := atu.mutation.UpdatedAt(); ok {
		_spec.SetField(asynctask.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, atu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asynctask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	atu.mutation.done = true
	return n, nil
}

// AsyncTaskUpdateOne is the builder for updating a single AsyncTask entity.
type AsyncTaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AsyncTaskMutation
}

// SetTaskID sets the "task_id" field.
func (atuo *AsyncTaskUpdateOne) SetTaskID(s string) *AsyncTaskUpdateOne {
	atuo.mutation.SetTaskID(s)
	return atuo
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (atuo *AsyncTaskUpdateOne) SetNillableTaskID(s *string) *AsyncTaskUpdateOne {
	if s != nil {
		atuo.SetTaskID(*s)
	}
	return atuo
}

// SetTaskType sets the "task_type" field.
func (atuo *AsyncTaskUpdateOne) SetTaskType(s string) *AsyncTaskUpdateOne {
	atuo.mutation.SetTaskType(s)
	return atuo
}

// SetNillableTaskType sets the "task_type" field if the given value is not nil.
func (atuo *AsyncTaskUpdateOne) SetNillableTaskType(s *string) *AsyncTaskUpdateOne {
	if s != nil {
		atuo.SetTaskType(*s)
	}
	return atuo
}

// SetTaskName sets the "task_name" field.
func (atuo *AsyncTaskUpdateOne) SetTaskName(s string) *AsyncTaskUpdateOne {
	atuo.mutation.SetTaskName(s)
	return atuo
}

// SetNillableTaskName sets the "task_name" field if the given value is not nil.
func (atuo *AsyncTaskUpdateOne) SetNillableTaskName(s *string) *AsyncTaskUpdateOne {
	if s != nil {
		atuo.SetTaskName(*s)
	}
	return atuo
}

// SetTaskData sets the "task_data" field.
func (atuo *AsyncTaskUpdateOne) SetTaskData(s string) *AsyncTaskUpdateOne {
	atuo.mutation.SetTaskData(s)
	return atuo
}

// SetNillableTaskData sets the "task_data" field if the given value is not nil.
func (atuo *AsyncTaskUpdateOne) SetNillableTaskData(s *string) *AsyncTaskUpdateOne {
	if s != nil {
		atuo.SetTaskData(*s)
	}
	return atuo
}

// SetState sets the "state" field.
func (atuo *AsyncTaskUpdateOne) SetState(s string) *AsyncTaskUpdateOne {
	atuo.mutation.SetState(s)
	return atuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (atuo *AsyncTaskUpdateOne) SetNillableState(s *string) *AsyncTaskUpdateOne {
	if s != nil {
		atuo.SetState(*s)
	}
	return atuo
}

// SetCreatedAt sets the "created_at" field.
func (atuo *AsyncTaskUpdateOne) SetCreatedAt(t time.Time) *AsyncTaskUpdateOne {
	atuo.mutation.SetCreatedAt(t)
	return atuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (atuo *AsyncTaskUpdateOne) SetNillableCreatedAt(t *time.Time) *AsyncTaskUpdateOne {
	if t != nil {
		atuo.SetCreatedAt(*t)
	}
	return atuo
}

// SetUpdatedAt sets the "updated_at" field.
func (atuo *AsyncTaskUpdateOne) SetUpdatedAt(t time.Time) *AsyncTaskUpdateOne {
	atuo.mutation.SetUpdatedAt(t)
	return atuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (atuo *AsyncTaskUpdateOne) SetNillableUpdatedAt(t *time.Time) *AsyncTaskUpdateOne {
	if t != nil {
		atuo.SetUpdatedAt(*t)
	}
	return atuo
}

// Mutation returns the AsyncTaskMutation object of the builder.
func (atuo *AsyncTaskUpdateOne) Mutation() *AsyncTaskMutation {
	return atuo.mutation
}

// Where appends a list predicates to the AsyncTaskUpdate builder.
func (atuo *AsyncTaskUpdateOne) Where(ps ...predicate.AsyncTask) *AsyncTaskUpdateOne {
	atuo.mutation.Where(ps...)
	return atuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (atuo *AsyncTaskUpdateOne) Select(field string, fields ...string) *AsyncTaskUpdateOne {
	atuo.fields = append([]string{field}, fields...)
	return atuo
}

// Save executes the query and returns the updated AsyncTask entity.
func (atuo *AsyncTaskUpdateOne) Save(ctx context.Context) (*AsyncTask, error) {
	return withHooks(ctx, atuo.sqlSave, atuo.mutation, atuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atuo *AsyncTaskUpdateOne) SaveX(ctx context.Context) *AsyncTask {
	node, err := atuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (atuo *AsyncTaskUpdateOne) Exec(ctx context.Context) error {
	_, err := atuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atuo *AsyncTaskUpdateOne) ExecX(ctx context.Context) {
	if err := atuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (atuo *AsyncTaskUpdateOne) sqlSave(ctx context.Context) (_node *AsyncTask, err error) {
	_spec := sqlgraph.NewUpdateSpec(asynctask.Table, asynctask.Columns, sqlgraph.NewFieldSpec(asynctask.FieldID, field.TypeInt64))
	id, ok := atuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AsyncTask.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := atuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asynctask.FieldID)
		for _, f := range fields {
			if !asynctask.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != asynctask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := atuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atuo.mutation.TaskID(); ok {
		_spec.SetField(asynctask.FieldTaskID, field.TypeString, value)
	}
	if value, ok := atuo.mutation.TaskType(); ok {
		_spec.SetField(asynctask.FieldTaskType, field.TypeString, value)
	}
	if value, ok := atuo.mutation.TaskName(); ok {
		_spec.SetField(asynctask.FieldTaskName, field.TypeString, value)
	}
	if value, ok := atuo.mutation.TaskData(); ok {
		_spec.SetField(asynctask.FieldTaskData, field.TypeString, value)
	}
	if value, ok := atuo.mutation.State(); ok {
		_spec.SetField(asynctask.FieldState, field.TypeString, value)
	}
	if value, ok := atuo.mutation.CreatedAt(); ok {
		_spec.SetField(asynctask.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := atuo.mutation.UpdatedAt(); ok {
		_spec.SetField(asynctask.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &AsyncTask{config: atuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, atuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asynctask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	atuo.mutation.done = true
	return _node, nil
}
