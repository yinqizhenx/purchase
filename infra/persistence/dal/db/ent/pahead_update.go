// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"purchase/infra/persistence/dal/db/ent/pahead"
	"purchase/infra/persistence/dal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PAHeadUpdate is the builder for updating PAHead entities.
type PAHeadUpdate struct {
	config
	hooks    []Hook
	mutation *PAHeadMutation
}

// Where appends a list predicates to the PAHeadUpdate builder.
func (phu *PAHeadUpdate) Where(ps ...predicate.PAHead) *PAHeadUpdate {
	phu.mutation.Where(ps...)
	return phu
}

// SetCode sets the "code" field.
func (phu *PAHeadUpdate) SetCode(s string) *PAHeadUpdate {
	phu.mutation.SetCode(s)
	return phu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (phu *PAHeadUpdate) SetNillableCode(s *string) *PAHeadUpdate {
	if s != nil {
		phu.SetCode(*s)
	}
	return phu
}

// SetState sets the "state" field.
func (phu *PAHeadUpdate) SetState(s string) *PAHeadUpdate {
	phu.mutation.SetState(s)
	return phu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (phu *PAHeadUpdate) SetNillableState(s *string) *PAHeadUpdate {
	if s != nil {
		phu.SetState(*s)
	}
	return phu
}

// SetPayAmount sets the "pay_amount" field.
func (phu *PAHeadUpdate) SetPayAmount(s string) *PAHeadUpdate {
	phu.mutation.SetPayAmount(s)
	return phu
}

// SetNillablePayAmount sets the "pay_amount" field if the given value is not nil.
func (phu *PAHeadUpdate) SetNillablePayAmount(s *string) *PAHeadUpdate {
	if s != nil {
		phu.SetPayAmount(*s)
	}
	return phu
}

// SetApplicant sets the "applicant" field.
func (phu *PAHeadUpdate) SetApplicant(s string) *PAHeadUpdate {
	phu.mutation.SetApplicant(s)
	return phu
}

// SetNillableApplicant sets the "applicant" field if the given value is not nil.
func (phu *PAHeadUpdate) SetNillableApplicant(s *string) *PAHeadUpdate {
	if s != nil {
		phu.SetApplicant(*s)
	}
	return phu
}

// SetDepartmentCode sets the "department_code" field.
func (phu *PAHeadUpdate) SetDepartmentCode(s string) *PAHeadUpdate {
	phu.mutation.SetDepartmentCode(s)
	return phu
}

// SetNillableDepartmentCode sets the "department_code" field if the given value is not nil.
func (phu *PAHeadUpdate) SetNillableDepartmentCode(s *string) *PAHeadUpdate {
	if s != nil {
		phu.SetDepartmentCode(*s)
	}
	return phu
}

// ClearDepartmentCode clears the value of the "department_code" field.
func (phu *PAHeadUpdate) ClearDepartmentCode() *PAHeadUpdate {
	phu.mutation.ClearDepartmentCode()
	return phu
}

// SetSupplierCode sets the "supplier_code" field.
func (phu *PAHeadUpdate) SetSupplierCode(s string) *PAHeadUpdate {
	phu.mutation.SetSupplierCode(s)
	return phu
}

// SetNillableSupplierCode sets the "supplier_code" field if the given value is not nil.
func (phu *PAHeadUpdate) SetNillableSupplierCode(s *string) *PAHeadUpdate {
	if s != nil {
		phu.SetSupplierCode(*s)
	}
	return phu
}

// SetIsAdv sets the "is_adv" field.
func (phu *PAHeadUpdate) SetIsAdv(b bool) *PAHeadUpdate {
	phu.mutation.SetIsAdv(b)
	return phu
}

// SetNillableIsAdv sets the "is_adv" field if the given value is not nil.
func (phu *PAHeadUpdate) SetNillableIsAdv(b *bool) *PAHeadUpdate {
	if b != nil {
		phu.SetIsAdv(*b)
	}
	return phu
}

// SetHasInvoice sets the "has_invoice" field.
func (phu *PAHeadUpdate) SetHasInvoice(b bool) *PAHeadUpdate {
	phu.mutation.SetHasInvoice(b)
	return phu
}

// SetNillableHasInvoice sets the "has_invoice" field if the given value is not nil.
func (phu *PAHeadUpdate) SetNillableHasInvoice(b *bool) *PAHeadUpdate {
	if b != nil {
		phu.SetHasInvoice(*b)
	}
	return phu
}

// SetRemark sets the "remark" field.
func (phu *PAHeadUpdate) SetRemark(s string) *PAHeadUpdate {
	phu.mutation.SetRemark(s)
	return phu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (phu *PAHeadUpdate) SetNillableRemark(s *string) *PAHeadUpdate {
	if s != nil {
		phu.SetRemark(*s)
	}
	return phu
}

// SetCreatedAt sets the "created_at" field.
func (phu *PAHeadUpdate) SetCreatedAt(t time.Time) *PAHeadUpdate {
	phu.mutation.SetCreatedAt(t)
	return phu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (phu *PAHeadUpdate) SetNillableCreatedAt(t *time.Time) *PAHeadUpdate {
	if t != nil {
		phu.SetCreatedAt(*t)
	}
	return phu
}

// SetUpdatedAt sets the "updated_at" field.
func (phu *PAHeadUpdate) SetUpdatedAt(t time.Time) *PAHeadUpdate {
	phu.mutation.SetUpdatedAt(t)
	return phu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (phu *PAHeadUpdate) SetNillableUpdatedAt(t *time.Time) *PAHeadUpdate {
	if t != nil {
		phu.SetUpdatedAt(*t)
	}
	return phu
}

// Mutation returns the PAHeadMutation object of the builder.
func (phu *PAHeadUpdate) Mutation() *PAHeadMutation {
	return phu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (phu *PAHeadUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, phu.sqlSave, phu.mutation, phu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (phu *PAHeadUpdate) SaveX(ctx context.Context) int {
	affected, err := phu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (phu *PAHeadUpdate) Exec(ctx context.Context) error {
	_, err := phu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (phu *PAHeadUpdate) ExecX(ctx context.Context) {
	if err := phu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (phu *PAHeadUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(pahead.Table, pahead.Columns, sqlgraph.NewFieldSpec(pahead.FieldID, field.TypeInt64))
	if ps := phu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := phu.mutation.Code(); ok {
		_spec.SetField(pahead.FieldCode, field.TypeString, value)
	}
	if value, ok := phu.mutation.State(); ok {
		_spec.SetField(pahead.FieldState, field.TypeString, value)
	}
	if value, ok := phu.mutation.PayAmount(); ok {
		_spec.SetField(pahead.FieldPayAmount, field.TypeString, value)
	}
	if value, ok := phu.mutation.Applicant(); ok {
		_spec.SetField(pahead.FieldApplicant, field.TypeString, value)
	}
	if value, ok := phu.mutation.DepartmentCode(); ok {
		_spec.SetField(pahead.FieldDepartmentCode, field.TypeString, value)
	}
	if phu.mutation.DepartmentCodeCleared() {
		_spec.ClearField(pahead.FieldDepartmentCode, field.TypeString)
	}
	if value, ok := phu.mutation.SupplierCode(); ok {
		_spec.SetField(pahead.FieldSupplierCode, field.TypeString, value)
	}
	if value, ok := phu.mutation.IsAdv(); ok {
		_spec.SetField(pahead.FieldIsAdv, field.TypeBool, value)
	}
	if value, ok := phu.mutation.HasInvoice(); ok {
		_spec.SetField(pahead.FieldHasInvoice, field.TypeBool, value)
	}
	if value, ok := phu.mutation.Remark(); ok {
		_spec.SetField(pahead.FieldRemark, field.TypeString, value)
	}
	if value, ok := phu.mutation.CreatedAt(); ok {
		_spec.SetField(pahead.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := phu.mutation.UpdatedAt(); ok {
		_spec.SetField(pahead.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, phu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pahead.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	phu.mutation.done = true
	return n, nil
}

// PAHeadUpdateOne is the builder for updating a single PAHead entity.
type PAHeadUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PAHeadMutation
}

// SetCode sets the "code" field.
func (phuo *PAHeadUpdateOne) SetCode(s string) *PAHeadUpdateOne {
	phuo.mutation.SetCode(s)
	return phuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (phuo *PAHeadUpdateOne) SetNillableCode(s *string) *PAHeadUpdateOne {
	if s != nil {
		phuo.SetCode(*s)
	}
	return phuo
}

// SetState sets the "state" field.
func (phuo *PAHeadUpdateOne) SetState(s string) *PAHeadUpdateOne {
	phuo.mutation.SetState(s)
	return phuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (phuo *PAHeadUpdateOne) SetNillableState(s *string) *PAHeadUpdateOne {
	if s != nil {
		phuo.SetState(*s)
	}
	return phuo
}

// SetPayAmount sets the "pay_amount" field.
func (phuo *PAHeadUpdateOne) SetPayAmount(s string) *PAHeadUpdateOne {
	phuo.mutation.SetPayAmount(s)
	return phuo
}

// SetNillablePayAmount sets the "pay_amount" field if the given value is not nil.
func (phuo *PAHeadUpdateOne) SetNillablePayAmount(s *string) *PAHeadUpdateOne {
	if s != nil {
		phuo.SetPayAmount(*s)
	}
	return phuo
}

// SetApplicant sets the "applicant" field.
func (phuo *PAHeadUpdateOne) SetApplicant(s string) *PAHeadUpdateOne {
	phuo.mutation.SetApplicant(s)
	return phuo
}

// SetNillableApplicant sets the "applicant" field if the given value is not nil.
func (phuo *PAHeadUpdateOne) SetNillableApplicant(s *string) *PAHeadUpdateOne {
	if s != nil {
		phuo.SetApplicant(*s)
	}
	return phuo
}

// SetDepartmentCode sets the "department_code" field.
func (phuo *PAHeadUpdateOne) SetDepartmentCode(s string) *PAHeadUpdateOne {
	phuo.mutation.SetDepartmentCode(s)
	return phuo
}

// SetNillableDepartmentCode sets the "department_code" field if the given value is not nil.
func (phuo *PAHeadUpdateOne) SetNillableDepartmentCode(s *string) *PAHeadUpdateOne {
	if s != nil {
		phuo.SetDepartmentCode(*s)
	}
	return phuo
}

// ClearDepartmentCode clears the value of the "department_code" field.
func (phuo *PAHeadUpdateOne) ClearDepartmentCode() *PAHeadUpdateOne {
	phuo.mutation.ClearDepartmentCode()
	return phuo
}

// SetSupplierCode sets the "supplier_code" field.
func (phuo *PAHeadUpdateOne) SetSupplierCode(s string) *PAHeadUpdateOne {
	phuo.mutation.SetSupplierCode(s)
	return phuo
}

// SetNillableSupplierCode sets the "supplier_code" field if the given value is not nil.
func (phuo *PAHeadUpdateOne) SetNillableSupplierCode(s *string) *PAHeadUpdateOne {
	if s != nil {
		phuo.SetSupplierCode(*s)
	}
	return phuo
}

// SetIsAdv sets the "is_adv" field.
func (phuo *PAHeadUpdateOne) SetIsAdv(b bool) *PAHeadUpdateOne {
	phuo.mutation.SetIsAdv(b)
	return phuo
}

// SetNillableIsAdv sets the "is_adv" field if the given value is not nil.
func (phuo *PAHeadUpdateOne) SetNillableIsAdv(b *bool) *PAHeadUpdateOne {
	if b != nil {
		phuo.SetIsAdv(*b)
	}
	return phuo
}

// SetHasInvoice sets the "has_invoice" field.
func (phuo *PAHeadUpdateOne) SetHasInvoice(b bool) *PAHeadUpdateOne {
	phuo.mutation.SetHasInvoice(b)
	return phuo
}

// SetNillableHasInvoice sets the "has_invoice" field if the given value is not nil.
func (phuo *PAHeadUpdateOne) SetNillableHasInvoice(b *bool) *PAHeadUpdateOne {
	if b != nil {
		phuo.SetHasInvoice(*b)
	}
	return phuo
}

// SetRemark sets the "remark" field.
func (phuo *PAHeadUpdateOne) SetRemark(s string) *PAHeadUpdateOne {
	phuo.mutation.SetRemark(s)
	return phuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (phuo *PAHeadUpdateOne) SetNillableRemark(s *string) *PAHeadUpdateOne {
	if s != nil {
		phuo.SetRemark(*s)
	}
	return phuo
}

// SetCreatedAt sets the "created_at" field.
func (phuo *PAHeadUpdateOne) SetCreatedAt(t time.Time) *PAHeadUpdateOne {
	phuo.mutation.SetCreatedAt(t)
	return phuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (phuo *PAHeadUpdateOne) SetNillableCreatedAt(t *time.Time) *PAHeadUpdateOne {
	if t != nil {
		phuo.SetCreatedAt(*t)
	}
	return phuo
}

// SetUpdatedAt sets the "updated_at" field.
func (phuo *PAHeadUpdateOne) SetUpdatedAt(t time.Time) *PAHeadUpdateOne {
	phuo.mutation.SetUpdatedAt(t)
	return phuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (phuo *PAHeadUpdateOne) SetNillableUpdatedAt(t *time.Time) *PAHeadUpdateOne {
	if t != nil {
		phuo.SetUpdatedAt(*t)
	}
	return phuo
}

// Mutation returns the PAHeadMutation object of the builder.
func (phuo *PAHeadUpdateOne) Mutation() *PAHeadMutation {
	return phuo.mutation
}

// Where appends a list predicates to the PAHeadUpdate builder.
func (phuo *PAHeadUpdateOne) Where(ps ...predicate.PAHead) *PAHeadUpdateOne {
	phuo.mutation.Where(ps...)
	return phuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (phuo *PAHeadUpdateOne) Select(field string, fields ...string) *PAHeadUpdateOne {
	phuo.fields = append([]string{field}, fields...)
	return phuo
}

// Save executes the query and returns the updated PAHead entity.
func (phuo *PAHeadUpdateOne) Save(ctx context.Context) (*PAHead, error) {
	return withHooks(ctx, phuo.sqlSave, phuo.mutation, phuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (phuo *PAHeadUpdateOne) SaveX(ctx context.Context) *PAHead {
	node, err := phuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (phuo *PAHeadUpdateOne) Exec(ctx context.Context) error {
	_, err := phuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (phuo *PAHeadUpdateOne) ExecX(ctx context.Context) {
	if err := phuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (phuo *PAHeadUpdateOne) sqlSave(ctx context.Context) (_node *PAHead, err error) {
	_spec := sqlgraph.NewUpdateSpec(pahead.Table, pahead.Columns, sqlgraph.NewFieldSpec(pahead.FieldID, field.TypeInt64))
	id, ok := phuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PAHead.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := phuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pahead.FieldID)
		for _, f := range fields {
			if !pahead.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pahead.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := phuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := phuo.mutation.Code(); ok {
		_spec.SetField(pahead.FieldCode, field.TypeString, value)
	}
	if value, ok := phuo.mutation.State(); ok {
		_spec.SetField(pahead.FieldState, field.TypeString, value)
	}
	if value, ok := phuo.mutation.PayAmount(); ok {
		_spec.SetField(pahead.FieldPayAmount, field.TypeString, value)
	}
	if value, ok := phuo.mutation.Applicant(); ok {
		_spec.SetField(pahead.FieldApplicant, field.TypeString, value)
	}
	if value, ok := phuo.mutation.DepartmentCode(); ok {
		_spec.SetField(pahead.FieldDepartmentCode, field.TypeString, value)
	}
	if phuo.mutation.DepartmentCodeCleared() {
		_spec.ClearField(pahead.FieldDepartmentCode, field.TypeString)
	}
	if value, ok := phuo.mutation.SupplierCode(); ok {
		_spec.SetField(pahead.FieldSupplierCode, field.TypeString, value)
	}
	if value, ok := phuo.mutation.IsAdv(); ok {
		_spec.SetField(pahead.FieldIsAdv, field.TypeBool, value)
	}
	if value, ok := phuo.mutation.HasInvoice(); ok {
		_spec.SetField(pahead.FieldHasInvoice, field.TypeBool, value)
	}
	if value, ok := phuo.mutation.Remark(); ok {
		_spec.SetField(pahead.FieldRemark, field.TypeString, value)
	}
	if value, ok := phuo.mutation.CreatedAt(); ok {
		_spec.SetField(pahead.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := phuo.mutation.UpdatedAt(); ok {
		_spec.SetField(pahead.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &PAHead{config: phuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, phuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pahead.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	phuo.mutation.done = true
	return _node, nil
}
