// Code generated by ent, DO NOT EDIT.

package parow

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the parow type in the database.
	Label = "pa_row"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHeadCode holds the string denoting the head_code field in the database.
	FieldHeadCode = "head_code"
	// FieldRowCode holds the string denoting the row_code field in the database.
	FieldRowCode = "row_code"
	// FieldGrnCount holds the string denoting the grn_count field in the database.
	FieldGrnCount = "grn_count"
	// FieldGrnAmount holds the string denoting the grn_amount field in the database.
	FieldGrnAmount = "grn_amount"
	// FieldPayAmount holds the string denoting the pay_amount field in the database.
	FieldPayAmount = "pay_amount"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the parow in the database.
	Table = "pa_rows"
)

// Columns holds all SQL columns for parow fields.
var Columns = []string{
	FieldID,
	FieldHeadCode,
	FieldRowCode,
	FieldGrnCount,
	FieldGrnAmount,
	FieldPayAmount,
	FieldDescription,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the PARow queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHeadCode orders the results by the head_code field.
func ByHeadCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHeadCode, opts...).ToFunc()
}

// ByRowCode orders the results by the row_code field.
func ByRowCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRowCode, opts...).ToFunc()
}

// ByGrnCount orders the results by the grn_count field.
func ByGrnCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGrnCount, opts...).ToFunc()
}

// ByGrnAmount orders the results by the grn_amount field.
func ByGrnAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGrnAmount, opts...).ToFunc()
}

// ByPayAmount orders the results by the pay_amount field.
func ByPayAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPayAmount, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
