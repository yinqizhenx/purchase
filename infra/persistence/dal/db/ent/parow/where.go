// Code generated by ent, DO NOT EDIT.

package parow

import (
	"purchase/infra/persistence/dal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.PARow {
	return predicate.PARow(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.PARow {
	return predicate.PARow(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.PARow {
	return predicate.PARow(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.PARow {
	return predicate.PARow(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.PARow {
	return predicate.PARow(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.PARow {
	return predicate.PARow(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.PARow {
	return predicate.PARow(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.PARow {
	return predicate.PARow(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.PARow {
	return predicate.PARow(sql.FieldLTE(FieldID, id))
}

// DocCode applies equality check predicate on the "doc_code" field. It's identical to DocCodeEQ.
func DocCode(v string) predicate.PARow {
	return predicate.PARow(sql.FieldEQ(FieldDocCode, v))
}

// OrderCode applies equality check predicate on the "order_code" field. It's identical to OrderCodeEQ.
func OrderCode(v string) predicate.PARow {
	return predicate.PARow(sql.FieldEQ(FieldOrderCode, v))
}

// RowCurrency applies equality check predicate on the "row_currency" field. It's identical to RowCurrencyEQ.
func RowCurrency(v string) predicate.PARow {
	return predicate.PARow(sql.FieldEQ(FieldRowCurrency, v))
}

// TaxRatio applies equality check predicate on the "tax_ratio" field. It's identical to TaxRatioEQ.
func TaxRatio(v string) predicate.PARow {
	return predicate.PARow(sql.FieldEQ(FieldTaxRatio, v))
}

// InitialAmount applies equality check predicate on the "initial_amount" field. It's identical to InitialAmountEQ.
func InitialAmount(v string) predicate.PARow {
	return predicate.PARow(sql.FieldEQ(FieldInitialAmount, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PARow {
	return predicate.PARow(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PARow {
	return predicate.PARow(sql.FieldEQ(FieldUpdatedAt, v))
}

// DocCodeEQ applies the EQ predicate on the "doc_code" field.
func DocCodeEQ(v string) predicate.PARow {
	return predicate.PARow(sql.FieldEQ(FieldDocCode, v))
}

// DocCodeNEQ applies the NEQ predicate on the "doc_code" field.
func DocCodeNEQ(v string) predicate.PARow {
	return predicate.PARow(sql.FieldNEQ(FieldDocCode, v))
}

// DocCodeIn applies the In predicate on the "doc_code" field.
func DocCodeIn(vs ...string) predicate.PARow {
	return predicate.PARow(sql.FieldIn(FieldDocCode, vs...))
}

// DocCodeNotIn applies the NotIn predicate on the "doc_code" field.
func DocCodeNotIn(vs ...string) predicate.PARow {
	return predicate.PARow(sql.FieldNotIn(FieldDocCode, vs...))
}

// DocCodeGT applies the GT predicate on the "doc_code" field.
func DocCodeGT(v string) predicate.PARow {
	return predicate.PARow(sql.FieldGT(FieldDocCode, v))
}

// DocCodeGTE applies the GTE predicate on the "doc_code" field.
func DocCodeGTE(v string) predicate.PARow {
	return predicate.PARow(sql.FieldGTE(FieldDocCode, v))
}

// DocCodeLT applies the LT predicate on the "doc_code" field.
func DocCodeLT(v string) predicate.PARow {
	return predicate.PARow(sql.FieldLT(FieldDocCode, v))
}

// DocCodeLTE applies the LTE predicate on the "doc_code" field.
func DocCodeLTE(v string) predicate.PARow {
	return predicate.PARow(sql.FieldLTE(FieldDocCode, v))
}

// DocCodeContains applies the Contains predicate on the "doc_code" field.
func DocCodeContains(v string) predicate.PARow {
	return predicate.PARow(sql.FieldContains(FieldDocCode, v))
}

// DocCodeHasPrefix applies the HasPrefix predicate on the "doc_code" field.
func DocCodeHasPrefix(v string) predicate.PARow {
	return predicate.PARow(sql.FieldHasPrefix(FieldDocCode, v))
}

// DocCodeHasSuffix applies the HasSuffix predicate on the "doc_code" field.
func DocCodeHasSuffix(v string) predicate.PARow {
	return predicate.PARow(sql.FieldHasSuffix(FieldDocCode, v))
}

// DocCodeEqualFold applies the EqualFold predicate on the "doc_code" field.
func DocCodeEqualFold(v string) predicate.PARow {
	return predicate.PARow(sql.FieldEqualFold(FieldDocCode, v))
}

// DocCodeContainsFold applies the ContainsFold predicate on the "doc_code" field.
func DocCodeContainsFold(v string) predicate.PARow {
	return predicate.PARow(sql.FieldContainsFold(FieldDocCode, v))
}

// OrderCodeEQ applies the EQ predicate on the "order_code" field.
func OrderCodeEQ(v string) predicate.PARow {
	return predicate.PARow(sql.FieldEQ(FieldOrderCode, v))
}

// OrderCodeNEQ applies the NEQ predicate on the "order_code" field.
func OrderCodeNEQ(v string) predicate.PARow {
	return predicate.PARow(sql.FieldNEQ(FieldOrderCode, v))
}

// OrderCodeIn applies the In predicate on the "order_code" field.
func OrderCodeIn(vs ...string) predicate.PARow {
	return predicate.PARow(sql.FieldIn(FieldOrderCode, vs...))
}

// OrderCodeNotIn applies the NotIn predicate on the "order_code" field.
func OrderCodeNotIn(vs ...string) predicate.PARow {
	return predicate.PARow(sql.FieldNotIn(FieldOrderCode, vs...))
}

// OrderCodeGT applies the GT predicate on the "order_code" field.
func OrderCodeGT(v string) predicate.PARow {
	return predicate.PARow(sql.FieldGT(FieldOrderCode, v))
}

// OrderCodeGTE applies the GTE predicate on the "order_code" field.
func OrderCodeGTE(v string) predicate.PARow {
	return predicate.PARow(sql.FieldGTE(FieldOrderCode, v))
}

// OrderCodeLT applies the LT predicate on the "order_code" field.
func OrderCodeLT(v string) predicate.PARow {
	return predicate.PARow(sql.FieldLT(FieldOrderCode, v))
}

// OrderCodeLTE applies the LTE predicate on the "order_code" field.
func OrderCodeLTE(v string) predicate.PARow {
	return predicate.PARow(sql.FieldLTE(FieldOrderCode, v))
}

// OrderCodeContains applies the Contains predicate on the "order_code" field.
func OrderCodeContains(v string) predicate.PARow {
	return predicate.PARow(sql.FieldContains(FieldOrderCode, v))
}

// OrderCodeHasPrefix applies the HasPrefix predicate on the "order_code" field.
func OrderCodeHasPrefix(v string) predicate.PARow {
	return predicate.PARow(sql.FieldHasPrefix(FieldOrderCode, v))
}

// OrderCodeHasSuffix applies the HasSuffix predicate on the "order_code" field.
func OrderCodeHasSuffix(v string) predicate.PARow {
	return predicate.PARow(sql.FieldHasSuffix(FieldOrderCode, v))
}

// OrderCodeEqualFold applies the EqualFold predicate on the "order_code" field.
func OrderCodeEqualFold(v string) predicate.PARow {
	return predicate.PARow(sql.FieldEqualFold(FieldOrderCode, v))
}

// OrderCodeContainsFold applies the ContainsFold predicate on the "order_code" field.
func OrderCodeContainsFold(v string) predicate.PARow {
	return predicate.PARow(sql.FieldContainsFold(FieldOrderCode, v))
}

// RowCurrencyEQ applies the EQ predicate on the "row_currency" field.
func RowCurrencyEQ(v string) predicate.PARow {
	return predicate.PARow(sql.FieldEQ(FieldRowCurrency, v))
}

// RowCurrencyNEQ applies the NEQ predicate on the "row_currency" field.
func RowCurrencyNEQ(v string) predicate.PARow {
	return predicate.PARow(sql.FieldNEQ(FieldRowCurrency, v))
}

// RowCurrencyIn applies the In predicate on the "row_currency" field.
func RowCurrencyIn(vs ...string) predicate.PARow {
	return predicate.PARow(sql.FieldIn(FieldRowCurrency, vs...))
}

// RowCurrencyNotIn applies the NotIn predicate on the "row_currency" field.
func RowCurrencyNotIn(vs ...string) predicate.PARow {
	return predicate.PARow(sql.FieldNotIn(FieldRowCurrency, vs...))
}

// RowCurrencyGT applies the GT predicate on the "row_currency" field.
func RowCurrencyGT(v string) predicate.PARow {
	return predicate.PARow(sql.FieldGT(FieldRowCurrency, v))
}

// RowCurrencyGTE applies the GTE predicate on the "row_currency" field.
func RowCurrencyGTE(v string) predicate.PARow {
	return predicate.PARow(sql.FieldGTE(FieldRowCurrency, v))
}

// RowCurrencyLT applies the LT predicate on the "row_currency" field.
func RowCurrencyLT(v string) predicate.PARow {
	return predicate.PARow(sql.FieldLT(FieldRowCurrency, v))
}

// RowCurrencyLTE applies the LTE predicate on the "row_currency" field.
func RowCurrencyLTE(v string) predicate.PARow {
	return predicate.PARow(sql.FieldLTE(FieldRowCurrency, v))
}

// RowCurrencyContains applies the Contains predicate on the "row_currency" field.
func RowCurrencyContains(v string) predicate.PARow {
	return predicate.PARow(sql.FieldContains(FieldRowCurrency, v))
}

// RowCurrencyHasPrefix applies the HasPrefix predicate on the "row_currency" field.
func RowCurrencyHasPrefix(v string) predicate.PARow {
	return predicate.PARow(sql.FieldHasPrefix(FieldRowCurrency, v))
}

// RowCurrencyHasSuffix applies the HasSuffix predicate on the "row_currency" field.
func RowCurrencyHasSuffix(v string) predicate.PARow {
	return predicate.PARow(sql.FieldHasSuffix(FieldRowCurrency, v))
}

// RowCurrencyEqualFold applies the EqualFold predicate on the "row_currency" field.
func RowCurrencyEqualFold(v string) predicate.PARow {
	return predicate.PARow(sql.FieldEqualFold(FieldRowCurrency, v))
}

// RowCurrencyContainsFold applies the ContainsFold predicate on the "row_currency" field.
func RowCurrencyContainsFold(v string) predicate.PARow {
	return predicate.PARow(sql.FieldContainsFold(FieldRowCurrency, v))
}

// TaxRatioEQ applies the EQ predicate on the "tax_ratio" field.
func TaxRatioEQ(v string) predicate.PARow {
	return predicate.PARow(sql.FieldEQ(FieldTaxRatio, v))
}

// TaxRatioNEQ applies the NEQ predicate on the "tax_ratio" field.
func TaxRatioNEQ(v string) predicate.PARow {
	return predicate.PARow(sql.FieldNEQ(FieldTaxRatio, v))
}

// TaxRatioIn applies the In predicate on the "tax_ratio" field.
func TaxRatioIn(vs ...string) predicate.PARow {
	return predicate.PARow(sql.FieldIn(FieldTaxRatio, vs...))
}

// TaxRatioNotIn applies the NotIn predicate on the "tax_ratio" field.
func TaxRatioNotIn(vs ...string) predicate.PARow {
	return predicate.PARow(sql.FieldNotIn(FieldTaxRatio, vs...))
}

// TaxRatioGT applies the GT predicate on the "tax_ratio" field.
func TaxRatioGT(v string) predicate.PARow {
	return predicate.PARow(sql.FieldGT(FieldTaxRatio, v))
}

// TaxRatioGTE applies the GTE predicate on the "tax_ratio" field.
func TaxRatioGTE(v string) predicate.PARow {
	return predicate.PARow(sql.FieldGTE(FieldTaxRatio, v))
}

// TaxRatioLT applies the LT predicate on the "tax_ratio" field.
func TaxRatioLT(v string) predicate.PARow {
	return predicate.PARow(sql.FieldLT(FieldTaxRatio, v))
}

// TaxRatioLTE applies the LTE predicate on the "tax_ratio" field.
func TaxRatioLTE(v string) predicate.PARow {
	return predicate.PARow(sql.FieldLTE(FieldTaxRatio, v))
}

// TaxRatioContains applies the Contains predicate on the "tax_ratio" field.
func TaxRatioContains(v string) predicate.PARow {
	return predicate.PARow(sql.FieldContains(FieldTaxRatio, v))
}

// TaxRatioHasPrefix applies the HasPrefix predicate on the "tax_ratio" field.
func TaxRatioHasPrefix(v string) predicate.PARow {
	return predicate.PARow(sql.FieldHasPrefix(FieldTaxRatio, v))
}

// TaxRatioHasSuffix applies the HasSuffix predicate on the "tax_ratio" field.
func TaxRatioHasSuffix(v string) predicate.PARow {
	return predicate.PARow(sql.FieldHasSuffix(FieldTaxRatio, v))
}

// TaxRatioEqualFold applies the EqualFold predicate on the "tax_ratio" field.
func TaxRatioEqualFold(v string) predicate.PARow {
	return predicate.PARow(sql.FieldEqualFold(FieldTaxRatio, v))
}

// TaxRatioContainsFold applies the ContainsFold predicate on the "tax_ratio" field.
func TaxRatioContainsFold(v string) predicate.PARow {
	return predicate.PARow(sql.FieldContainsFold(FieldTaxRatio, v))
}

// InitialAmountEQ applies the EQ predicate on the "initial_amount" field.
func InitialAmountEQ(v string) predicate.PARow {
	return predicate.PARow(sql.FieldEQ(FieldInitialAmount, v))
}

// InitialAmountNEQ applies the NEQ predicate on the "initial_amount" field.
func InitialAmountNEQ(v string) predicate.PARow {
	return predicate.PARow(sql.FieldNEQ(FieldInitialAmount, v))
}

// InitialAmountIn applies the In predicate on the "initial_amount" field.
func InitialAmountIn(vs ...string) predicate.PARow {
	return predicate.PARow(sql.FieldIn(FieldInitialAmount, vs...))
}

// InitialAmountNotIn applies the NotIn predicate on the "initial_amount" field.
func InitialAmountNotIn(vs ...string) predicate.PARow {
	return predicate.PARow(sql.FieldNotIn(FieldInitialAmount, vs...))
}

// InitialAmountGT applies the GT predicate on the "initial_amount" field.
func InitialAmountGT(v string) predicate.PARow {
	return predicate.PARow(sql.FieldGT(FieldInitialAmount, v))
}

// InitialAmountGTE applies the GTE predicate on the "initial_amount" field.
func InitialAmountGTE(v string) predicate.PARow {
	return predicate.PARow(sql.FieldGTE(FieldInitialAmount, v))
}

// InitialAmountLT applies the LT predicate on the "initial_amount" field.
func InitialAmountLT(v string) predicate.PARow {
	return predicate.PARow(sql.FieldLT(FieldInitialAmount, v))
}

// InitialAmountLTE applies the LTE predicate on the "initial_amount" field.
func InitialAmountLTE(v string) predicate.PARow {
	return predicate.PARow(sql.FieldLTE(FieldInitialAmount, v))
}

// InitialAmountContains applies the Contains predicate on the "initial_amount" field.
func InitialAmountContains(v string) predicate.PARow {
	return predicate.PARow(sql.FieldContains(FieldInitialAmount, v))
}

// InitialAmountHasPrefix applies the HasPrefix predicate on the "initial_amount" field.
func InitialAmountHasPrefix(v string) predicate.PARow {
	return predicate.PARow(sql.FieldHasPrefix(FieldInitialAmount, v))
}

// InitialAmountHasSuffix applies the HasSuffix predicate on the "initial_amount" field.
func InitialAmountHasSuffix(v string) predicate.PARow {
	return predicate.PARow(sql.FieldHasSuffix(FieldInitialAmount, v))
}

// InitialAmountEqualFold applies the EqualFold predicate on the "initial_amount" field.
func InitialAmountEqualFold(v string) predicate.PARow {
	return predicate.PARow(sql.FieldEqualFold(FieldInitialAmount, v))
}

// InitialAmountContainsFold applies the ContainsFold predicate on the "initial_amount" field.
func InitialAmountContainsFold(v string) predicate.PARow {
	return predicate.PARow(sql.FieldContainsFold(FieldInitialAmount, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PARow {
	return predicate.PARow(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PARow {
	return predicate.PARow(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PARow {
	return predicate.PARow(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PARow {
	return predicate.PARow(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PARow {
	return predicate.PARow(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PARow {
	return predicate.PARow(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PARow {
	return predicate.PARow(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PARow {
	return predicate.PARow(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PARow {
	return predicate.PARow(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PARow {
	return predicate.PARow(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PARow {
	return predicate.PARow(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PARow {
	return predicate.PARow(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PARow {
	return predicate.PARow(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PARow {
	return predicate.PARow(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PARow {
	return predicate.PARow(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PARow {
	return predicate.PARow(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PARow) predicate.PARow {
	return predicate.PARow(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PARow) predicate.PARow {
	return predicate.PARow(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PARow) predicate.PARow {
	return predicate.PARow(sql.NotPredicates(p))
}
