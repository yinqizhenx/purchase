// Code generated by ent, DO NOT EDIT.

package parow

import (
	"purchase/infra/persistence/dal/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.PARow {
	return predicate.PARow(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.PARow {
	return predicate.PARow(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.PARow {
	return predicate.PARow(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.PARow {
	return predicate.PARow(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.PARow {
	return predicate.PARow(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.PARow {
	return predicate.PARow(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.PARow {
	return predicate.PARow(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.PARow {
	return predicate.PARow(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.PARow {
	return predicate.PARow(sql.FieldLTE(FieldID, id))
}

// HeadCode applies equality check predicate on the "head_code" field. It's identical to HeadCodeEQ.
func HeadCode(v string) predicate.PARow {
	return predicate.PARow(sql.FieldEQ(FieldHeadCode, v))
}

// RowCode applies equality check predicate on the "row_code" field. It's identical to RowCodeEQ.
func RowCode(v string) predicate.PARow {
	return predicate.PARow(sql.FieldEQ(FieldRowCode, v))
}

// GrnCount applies equality check predicate on the "grn_count" field. It's identical to GrnCountEQ.
func GrnCount(v int32) predicate.PARow {
	return predicate.PARow(sql.FieldEQ(FieldGrnCount, v))
}

// GrnAmount applies equality check predicate on the "grn_amount" field. It's identical to GrnAmountEQ.
func GrnAmount(v string) predicate.PARow {
	return predicate.PARow(sql.FieldEQ(FieldGrnAmount, v))
}

// PayAmount applies equality check predicate on the "pay_amount" field. It's identical to PayAmountEQ.
func PayAmount(v string) predicate.PARow {
	return predicate.PARow(sql.FieldEQ(FieldPayAmount, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.PARow {
	return predicate.PARow(sql.FieldEQ(FieldDescription, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PARow {
	return predicate.PARow(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PARow {
	return predicate.PARow(sql.FieldEQ(FieldUpdatedAt, v))
}

// HeadCodeEQ applies the EQ predicate on the "head_code" field.
func HeadCodeEQ(v string) predicate.PARow {
	return predicate.PARow(sql.FieldEQ(FieldHeadCode, v))
}

// HeadCodeNEQ applies the NEQ predicate on the "head_code" field.
func HeadCodeNEQ(v string) predicate.PARow {
	return predicate.PARow(sql.FieldNEQ(FieldHeadCode, v))
}

// HeadCodeIn applies the In predicate on the "head_code" field.
func HeadCodeIn(vs ...string) predicate.PARow {
	return predicate.PARow(sql.FieldIn(FieldHeadCode, vs...))
}

// HeadCodeNotIn applies the NotIn predicate on the "head_code" field.
func HeadCodeNotIn(vs ...string) predicate.PARow {
	return predicate.PARow(sql.FieldNotIn(FieldHeadCode, vs...))
}

// HeadCodeGT applies the GT predicate on the "head_code" field.
func HeadCodeGT(v string) predicate.PARow {
	return predicate.PARow(sql.FieldGT(FieldHeadCode, v))
}

// HeadCodeGTE applies the GTE predicate on the "head_code" field.
func HeadCodeGTE(v string) predicate.PARow {
	return predicate.PARow(sql.FieldGTE(FieldHeadCode, v))
}

// HeadCodeLT applies the LT predicate on the "head_code" field.
func HeadCodeLT(v string) predicate.PARow {
	return predicate.PARow(sql.FieldLT(FieldHeadCode, v))
}

// HeadCodeLTE applies the LTE predicate on the "head_code" field.
func HeadCodeLTE(v string) predicate.PARow {
	return predicate.PARow(sql.FieldLTE(FieldHeadCode, v))
}

// HeadCodeContains applies the Contains predicate on the "head_code" field.
func HeadCodeContains(v string) predicate.PARow {
	return predicate.PARow(sql.FieldContains(FieldHeadCode, v))
}

// HeadCodeHasPrefix applies the HasPrefix predicate on the "head_code" field.
func HeadCodeHasPrefix(v string) predicate.PARow {
	return predicate.PARow(sql.FieldHasPrefix(FieldHeadCode, v))
}

// HeadCodeHasSuffix applies the HasSuffix predicate on the "head_code" field.
func HeadCodeHasSuffix(v string) predicate.PARow {
	return predicate.PARow(sql.FieldHasSuffix(FieldHeadCode, v))
}

// HeadCodeEqualFold applies the EqualFold predicate on the "head_code" field.
func HeadCodeEqualFold(v string) predicate.PARow {
	return predicate.PARow(sql.FieldEqualFold(FieldHeadCode, v))
}

// HeadCodeContainsFold applies the ContainsFold predicate on the "head_code" field.
func HeadCodeContainsFold(v string) predicate.PARow {
	return predicate.PARow(sql.FieldContainsFold(FieldHeadCode, v))
}

// RowCodeEQ applies the EQ predicate on the "row_code" field.
func RowCodeEQ(v string) predicate.PARow {
	return predicate.PARow(sql.FieldEQ(FieldRowCode, v))
}

// RowCodeNEQ applies the NEQ predicate on the "row_code" field.
func RowCodeNEQ(v string) predicate.PARow {
	return predicate.PARow(sql.FieldNEQ(FieldRowCode, v))
}

// RowCodeIn applies the In predicate on the "row_code" field.
func RowCodeIn(vs ...string) predicate.PARow {
	return predicate.PARow(sql.FieldIn(FieldRowCode, vs...))
}

// RowCodeNotIn applies the NotIn predicate on the "row_code" field.
func RowCodeNotIn(vs ...string) predicate.PARow {
	return predicate.PARow(sql.FieldNotIn(FieldRowCode, vs...))
}

// RowCodeGT applies the GT predicate on the "row_code" field.
func RowCodeGT(v string) predicate.PARow {
	return predicate.PARow(sql.FieldGT(FieldRowCode, v))
}

// RowCodeGTE applies the GTE predicate on the "row_code" field.
func RowCodeGTE(v string) predicate.PARow {
	return predicate.PARow(sql.FieldGTE(FieldRowCode, v))
}

// RowCodeLT applies the LT predicate on the "row_code" field.
func RowCodeLT(v string) predicate.PARow {
	return predicate.PARow(sql.FieldLT(FieldRowCode, v))
}

// RowCodeLTE applies the LTE predicate on the "row_code" field.
func RowCodeLTE(v string) predicate.PARow {
	return predicate.PARow(sql.FieldLTE(FieldRowCode, v))
}

// RowCodeContains applies the Contains predicate on the "row_code" field.
func RowCodeContains(v string) predicate.PARow {
	return predicate.PARow(sql.FieldContains(FieldRowCode, v))
}

// RowCodeHasPrefix applies the HasPrefix predicate on the "row_code" field.
func RowCodeHasPrefix(v string) predicate.PARow {
	return predicate.PARow(sql.FieldHasPrefix(FieldRowCode, v))
}

// RowCodeHasSuffix applies the HasSuffix predicate on the "row_code" field.
func RowCodeHasSuffix(v string) predicate.PARow {
	return predicate.PARow(sql.FieldHasSuffix(FieldRowCode, v))
}

// RowCodeEqualFold applies the EqualFold predicate on the "row_code" field.
func RowCodeEqualFold(v string) predicate.PARow {
	return predicate.PARow(sql.FieldEqualFold(FieldRowCode, v))
}

// RowCodeContainsFold applies the ContainsFold predicate on the "row_code" field.
func RowCodeContainsFold(v string) predicate.PARow {
	return predicate.PARow(sql.FieldContainsFold(FieldRowCode, v))
}

// GrnCountEQ applies the EQ predicate on the "grn_count" field.
func GrnCountEQ(v int32) predicate.PARow {
	return predicate.PARow(sql.FieldEQ(FieldGrnCount, v))
}

// GrnCountNEQ applies the NEQ predicate on the "grn_count" field.
func GrnCountNEQ(v int32) predicate.PARow {
	return predicate.PARow(sql.FieldNEQ(FieldGrnCount, v))
}

// GrnCountIn applies the In predicate on the "grn_count" field.
func GrnCountIn(vs ...int32) predicate.PARow {
	return predicate.PARow(sql.FieldIn(FieldGrnCount, vs...))
}

// GrnCountNotIn applies the NotIn predicate on the "grn_count" field.
func GrnCountNotIn(vs ...int32) predicate.PARow {
	return predicate.PARow(sql.FieldNotIn(FieldGrnCount, vs...))
}

// GrnCountGT applies the GT predicate on the "grn_count" field.
func GrnCountGT(v int32) predicate.PARow {
	return predicate.PARow(sql.FieldGT(FieldGrnCount, v))
}

// GrnCountGTE applies the GTE predicate on the "grn_count" field.
func GrnCountGTE(v int32) predicate.PARow {
	return predicate.PARow(sql.FieldGTE(FieldGrnCount, v))
}

// GrnCountLT applies the LT predicate on the "grn_count" field.
func GrnCountLT(v int32) predicate.PARow {
	return predicate.PARow(sql.FieldLT(FieldGrnCount, v))
}

// GrnCountLTE applies the LTE predicate on the "grn_count" field.
func GrnCountLTE(v int32) predicate.PARow {
	return predicate.PARow(sql.FieldLTE(FieldGrnCount, v))
}

// GrnAmountEQ applies the EQ predicate on the "grn_amount" field.
func GrnAmountEQ(v string) predicate.PARow {
	return predicate.PARow(sql.FieldEQ(FieldGrnAmount, v))
}

// GrnAmountNEQ applies the NEQ predicate on the "grn_amount" field.
func GrnAmountNEQ(v string) predicate.PARow {
	return predicate.PARow(sql.FieldNEQ(FieldGrnAmount, v))
}

// GrnAmountIn applies the In predicate on the "grn_amount" field.
func GrnAmountIn(vs ...string) predicate.PARow {
	return predicate.PARow(sql.FieldIn(FieldGrnAmount, vs...))
}

// GrnAmountNotIn applies the NotIn predicate on the "grn_amount" field.
func GrnAmountNotIn(vs ...string) predicate.PARow {
	return predicate.PARow(sql.FieldNotIn(FieldGrnAmount, vs...))
}

// GrnAmountGT applies the GT predicate on the "grn_amount" field.
func GrnAmountGT(v string) predicate.PARow {
	return predicate.PARow(sql.FieldGT(FieldGrnAmount, v))
}

// GrnAmountGTE applies the GTE predicate on the "grn_amount" field.
func GrnAmountGTE(v string) predicate.PARow {
	return predicate.PARow(sql.FieldGTE(FieldGrnAmount, v))
}

// GrnAmountLT applies the LT predicate on the "grn_amount" field.
func GrnAmountLT(v string) predicate.PARow {
	return predicate.PARow(sql.FieldLT(FieldGrnAmount, v))
}

// GrnAmountLTE applies the LTE predicate on the "grn_amount" field.
func GrnAmountLTE(v string) predicate.PARow {
	return predicate.PARow(sql.FieldLTE(FieldGrnAmount, v))
}

// GrnAmountContains applies the Contains predicate on the "grn_amount" field.
func GrnAmountContains(v string) predicate.PARow {
	return predicate.PARow(sql.FieldContains(FieldGrnAmount, v))
}

// GrnAmountHasPrefix applies the HasPrefix predicate on the "grn_amount" field.
func GrnAmountHasPrefix(v string) predicate.PARow {
	return predicate.PARow(sql.FieldHasPrefix(FieldGrnAmount, v))
}

// GrnAmountHasSuffix applies the HasSuffix predicate on the "grn_amount" field.
func GrnAmountHasSuffix(v string) predicate.PARow {
	return predicate.PARow(sql.FieldHasSuffix(FieldGrnAmount, v))
}

// GrnAmountEqualFold applies the EqualFold predicate on the "grn_amount" field.
func GrnAmountEqualFold(v string) predicate.PARow {
	return predicate.PARow(sql.FieldEqualFold(FieldGrnAmount, v))
}

// GrnAmountContainsFold applies the ContainsFold predicate on the "grn_amount" field.
func GrnAmountContainsFold(v string) predicate.PARow {
	return predicate.PARow(sql.FieldContainsFold(FieldGrnAmount, v))
}

// PayAmountEQ applies the EQ predicate on the "pay_amount" field.
func PayAmountEQ(v string) predicate.PARow {
	return predicate.PARow(sql.FieldEQ(FieldPayAmount, v))
}

// PayAmountNEQ applies the NEQ predicate on the "pay_amount" field.
func PayAmountNEQ(v string) predicate.PARow {
	return predicate.PARow(sql.FieldNEQ(FieldPayAmount, v))
}

// PayAmountIn applies the In predicate on the "pay_amount" field.
func PayAmountIn(vs ...string) predicate.PARow {
	return predicate.PARow(sql.FieldIn(FieldPayAmount, vs...))
}

// PayAmountNotIn applies the NotIn predicate on the "pay_amount" field.
func PayAmountNotIn(vs ...string) predicate.PARow {
	return predicate.PARow(sql.FieldNotIn(FieldPayAmount, vs...))
}

// PayAmountGT applies the GT predicate on the "pay_amount" field.
func PayAmountGT(v string) predicate.PARow {
	return predicate.PARow(sql.FieldGT(FieldPayAmount, v))
}

// PayAmountGTE applies the GTE predicate on the "pay_amount" field.
func PayAmountGTE(v string) predicate.PARow {
	return predicate.PARow(sql.FieldGTE(FieldPayAmount, v))
}

// PayAmountLT applies the LT predicate on the "pay_amount" field.
func PayAmountLT(v string) predicate.PARow {
	return predicate.PARow(sql.FieldLT(FieldPayAmount, v))
}

// PayAmountLTE applies the LTE predicate on the "pay_amount" field.
func PayAmountLTE(v string) predicate.PARow {
	return predicate.PARow(sql.FieldLTE(FieldPayAmount, v))
}

// PayAmountContains applies the Contains predicate on the "pay_amount" field.
func PayAmountContains(v string) predicate.PARow {
	return predicate.PARow(sql.FieldContains(FieldPayAmount, v))
}

// PayAmountHasPrefix applies the HasPrefix predicate on the "pay_amount" field.
func PayAmountHasPrefix(v string) predicate.PARow {
	return predicate.PARow(sql.FieldHasPrefix(FieldPayAmount, v))
}

// PayAmountHasSuffix applies the HasSuffix predicate on the "pay_amount" field.
func PayAmountHasSuffix(v string) predicate.PARow {
	return predicate.PARow(sql.FieldHasSuffix(FieldPayAmount, v))
}

// PayAmountEqualFold applies the EqualFold predicate on the "pay_amount" field.
func PayAmountEqualFold(v string) predicate.PARow {
	return predicate.PARow(sql.FieldEqualFold(FieldPayAmount, v))
}

// PayAmountContainsFold applies the ContainsFold predicate on the "pay_amount" field.
func PayAmountContainsFold(v string) predicate.PARow {
	return predicate.PARow(sql.FieldContainsFold(FieldPayAmount, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.PARow {
	return predicate.PARow(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.PARow {
	return predicate.PARow(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.PARow {
	return predicate.PARow(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.PARow {
	return predicate.PARow(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.PARow {
	return predicate.PARow(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.PARow {
	return predicate.PARow(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.PARow {
	return predicate.PARow(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.PARow {
	return predicate.PARow(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.PARow {
	return predicate.PARow(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.PARow {
	return predicate.PARow(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.PARow {
	return predicate.PARow(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.PARow {
	return predicate.PARow(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.PARow {
	return predicate.PARow(sql.FieldContainsFold(FieldDescription, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PARow {
	return predicate.PARow(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PARow {
	return predicate.PARow(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PARow {
	return predicate.PARow(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PARow {
	return predicate.PARow(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PARow {
	return predicate.PARow(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PARow {
	return predicate.PARow(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PARow {
	return predicate.PARow(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PARow {
	return predicate.PARow(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PARow {
	return predicate.PARow(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PARow {
	return predicate.PARow(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PARow {
	return predicate.PARow(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PARow {
	return predicate.PARow(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PARow {
	return predicate.PARow(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PARow {
	return predicate.PARow(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PARow {
	return predicate.PARow(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PARow {
	return predicate.PARow(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PARow) predicate.PARow {
	return predicate.PARow(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PARow) predicate.PARow {
	return predicate.PARow(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PARow) predicate.PARow {
	return predicate.PARow(sql.NotPredicates(p))
}
